
Stm32g030_clock_cpp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a08  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000165c  08003ac0  08003ac0  00004ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800511c  0800511c  0000706c  2**0
                  CONTENTS
  4 .ARM          00000000  0800511c  0800511c  0000706c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800511c  0800511c  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800511c  0800511c  0000611c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  08005124  08005124  00006124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800512c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000072c  2000006c  08005198  0000706c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000798  08005198  00007798  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024f28  00000000  00000000  00007094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000042a9  00000000  00000000  0002bfbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af8  00000000  00000000  00030268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001210  00000000  00000000  00030d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a7ce  00000000  00000000  00031f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001878f  00000000  00000000  0004c73e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a4bc  00000000  00000000  00064ecd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ff389  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000255c  00000000  00000000  000ff3cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 00009b63  00000000  00000000  00101928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  0010b48b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000006c 	.word	0x2000006c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08003aa8 	.word	0x08003aa8

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000070 	.word	0x20000070
 80000fc:	08003aa8 	.word	0x08003aa8

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_shi>:
 8000110:	b403      	push	{r0, r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0040      	lsls	r0, r0, #1
 8000118:	0049      	lsls	r1, r1, #1
 800011a:	5e09      	ldrsh	r1, [r1, r0]
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	448e      	add	lr, r1
 8000120:	bc03      	pop	{r0, r1}
 8000122:	4770      	bx	lr

08000124 <__udivsi3>:
 8000124:	2200      	movs	r2, #0
 8000126:	0843      	lsrs	r3, r0, #1
 8000128:	428b      	cmp	r3, r1
 800012a:	d374      	bcc.n	8000216 <__udivsi3+0xf2>
 800012c:	0903      	lsrs	r3, r0, #4
 800012e:	428b      	cmp	r3, r1
 8000130:	d35f      	bcc.n	80001f2 <__udivsi3+0xce>
 8000132:	0a03      	lsrs	r3, r0, #8
 8000134:	428b      	cmp	r3, r1
 8000136:	d344      	bcc.n	80001c2 <__udivsi3+0x9e>
 8000138:	0b03      	lsrs	r3, r0, #12
 800013a:	428b      	cmp	r3, r1
 800013c:	d328      	bcc.n	8000190 <__udivsi3+0x6c>
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d30d      	bcc.n	8000160 <__udivsi3+0x3c>
 8000144:	22ff      	movs	r2, #255	@ 0xff
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	ba12      	rev	r2, r2
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d302      	bcc.n	8000156 <__udivsi3+0x32>
 8000150:	1212      	asrs	r2, r2, #8
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	d065      	beq.n	8000222 <__udivsi3+0xfe>
 8000156:	0b03      	lsrs	r3, r0, #12
 8000158:	428b      	cmp	r3, r1
 800015a:	d319      	bcc.n	8000190 <__udivsi3+0x6c>
 800015c:	e000      	b.n	8000160 <__udivsi3+0x3c>
 800015e:	0a09      	lsrs	r1, r1, #8
 8000160:	0bc3      	lsrs	r3, r0, #15
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x46>
 8000166:	03cb      	lsls	r3, r1, #15
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b83      	lsrs	r3, r0, #14
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x52>
 8000172:	038b      	lsls	r3, r1, #14
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b43      	lsrs	r3, r0, #13
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x5e>
 800017e:	034b      	lsls	r3, r1, #13
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b03      	lsrs	r3, r0, #12
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x6a>
 800018a:	030b      	lsls	r3, r1, #12
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0ac3      	lsrs	r3, r0, #11
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x76>
 8000196:	02cb      	lsls	r3, r1, #11
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a83      	lsrs	r3, r0, #10
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x82>
 80001a2:	028b      	lsls	r3, r1, #10
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a43      	lsrs	r3, r0, #9
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x8e>
 80001ae:	024b      	lsls	r3, r1, #9
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a03      	lsrs	r3, r0, #8
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x9a>
 80001ba:	020b      	lsls	r3, r1, #8
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	d2cd      	bcs.n	800015e <__udivsi3+0x3a>
 80001c2:	09c3      	lsrs	r3, r0, #7
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xa8>
 80001c8:	01cb      	lsls	r3, r1, #7
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0983      	lsrs	r3, r0, #6
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xb4>
 80001d4:	018b      	lsls	r3, r1, #6
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0943      	lsrs	r3, r0, #5
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xc0>
 80001e0:	014b      	lsls	r3, r1, #5
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0903      	lsrs	r3, r0, #4
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xcc>
 80001ec:	010b      	lsls	r3, r1, #4
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	08c3      	lsrs	r3, r0, #3
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xd8>
 80001f8:	00cb      	lsls	r3, r1, #3
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0883      	lsrs	r3, r0, #2
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xe4>
 8000204:	008b      	lsls	r3, r1, #2
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0843      	lsrs	r3, r0, #1
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xf0>
 8000210:	004b      	lsls	r3, r1, #1
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	1a41      	subs	r1, r0, r1
 8000218:	d200      	bcs.n	800021c <__udivsi3+0xf8>
 800021a:	4601      	mov	r1, r0
 800021c:	4152      	adcs	r2, r2
 800021e:	4610      	mov	r0, r2
 8000220:	4770      	bx	lr
 8000222:	e7ff      	b.n	8000224 <__udivsi3+0x100>
 8000224:	b501      	push	{r0, lr}
 8000226:	2000      	movs	r0, #0
 8000228:	f000 f806 	bl	8000238 <__aeabi_idiv0>
 800022c:	bd02      	pop	{r1, pc}
 800022e:	46c0      	nop			@ (mov r8, r8)

08000230 <__aeabi_uidivmod>:
 8000230:	2900      	cmp	r1, #0
 8000232:	d0f7      	beq.n	8000224 <__udivsi3+0x100>
 8000234:	e776      	b.n	8000124 <__udivsi3>
 8000236:	4770      	bx	lr

08000238 <__aeabi_idiv0>:
 8000238:	4770      	bx	lr
 800023a:	46c0      	nop			@ (mov r8, r8)

0800023c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800023c:	b500      	push	{lr}
 800023e:	b093      	sub	sp, #76	@ 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000240:	2234      	movs	r2, #52	@ 0x34
 8000242:	2100      	movs	r1, #0
 8000244:	a804      	add	r0, sp, #16
 8000246:	f003 f819 	bl	800327c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800024a:	2210      	movs	r2, #16
 800024c:	2100      	movs	r1, #0
 800024e:	4668      	mov	r0, sp
 8000250:	f003 f814 	bl	800327c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000254:	2080      	movs	r0, #128	@ 0x80
 8000256:	0080      	lsls	r0, r0, #2
 8000258:	f001 f8e2 	bl	8001420 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800025c:	f001 f8d6 	bl	800140c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000260:	2118      	movs	r1, #24
 8000262:	4a15      	ldr	r2, [pc, #84]	@ (80002b8 <_Z18SystemClock_Configv+0x7c>)
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000264:	a804      	add	r0, sp, #16
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000266:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 8000268:	438b      	bics	r3, r1
 800026a:	65d3      	str	r3, [r2, #92]	@ 0x5c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800026c:	2306      	movs	r3, #6
 800026e:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000270:	2380      	movs	r3, #128	@ 0x80
 8000272:	2201      	movs	r2, #1
 8000274:	005b      	lsls	r3, r3, #1
 8000276:	9206      	str	r2, [sp, #24]
 8000278:	9307      	str	r3, [sp, #28]
 800027a:	2340      	movs	r3, #64	@ 0x40
 800027c:	2200      	movs	r2, #0
 800027e:	9208      	str	r2, [sp, #32]
 8000280:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000282:	2300      	movs	r3, #0
 8000284:	930b      	str	r3, [sp, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000286:	f001 f8fb 	bl	8001480 <HAL_RCC_OscConfig>
 800028a:	2800      	cmp	r0, #0
 800028c:	d001      	beq.n	8000292 <_Z18SystemClock_Configv+0x56>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800028e:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000290:	e7fe      	b.n	8000290 <_Z18SystemClock_Configv+0x54>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000292:	2207      	movs	r2, #7
 8000294:	2300      	movs	r3, #0
 8000296:	9200      	str	r2, [sp, #0]
 8000298:	9301      	str	r3, [sp, #4]
 800029a:	2200      	movs	r2, #0
 800029c:	2300      	movs	r3, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800029e:	2100      	movs	r1, #0
 80002a0:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002a2:	9202      	str	r2, [sp, #8]
 80002a4:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002a6:	f001 fb97 	bl	80019d8 <HAL_RCC_ClockConfig>
 80002aa:	2800      	cmp	r0, #0
 80002ac:	d001      	beq.n	80002b2 <_Z18SystemClock_Configv+0x76>
 80002ae:	b672      	cpsid	i
  while (1)
 80002b0:	e7fe      	b.n	80002b0 <_Z18SystemClock_Configv+0x74>
}
 80002b2:	b013      	add	sp, #76	@ 0x4c
 80002b4:	bd00      	pop	{pc}
 80002b6:	46c0      	nop			@ (mov r8, r8)
 80002b8:	40021000 	.word	0x40021000

080002bc <main>:
{
 80002bc:	b570      	push	{r4, r5, r6, lr}
 80002be:	b08a      	sub	sp, #40	@ 0x28
  HAL_Init();
 80002c0:	f000 fa26 	bl	8000710 <HAL_Init>
  SystemClock_Config();
 80002c4:	f7ff ffba 	bl	800023c <_Z18SystemClock_Configv>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002c8:	2214      	movs	r2, #20
 80002ca:	2100      	movs	r1, #0
 80002cc:	a805      	add	r0, sp, #20
 80002ce:	f002 ffd5 	bl	800327c <memset>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002d2:	2202      	movs	r2, #2
 80002d4:	4b58      	ldr	r3, [pc, #352]	@ (8000438 <main+0x17c>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002d6:	2601      	movs	r6, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002d8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
  HAL_GPIO_WritePin(GPIOA, KEY_PAD_0_Pin|KEY_PAD_1_Pin, GPIO_PIN_RESET);
 80002da:	20a0      	movs	r0, #160	@ 0xa0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002dc:	4311      	orrs	r1, r2
 80002de:	6359      	str	r1, [r3, #52]	@ 0x34
 80002e0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
  HAL_GPIO_WritePin(GPIOA, KEY_PAD_0_Pin|KEY_PAD_1_Pin, GPIO_PIN_RESET);
 80002e2:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002e4:	400a      	ands	r2, r1
 80002e6:	9202      	str	r2, [sp, #8]
 80002e8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002ea:	2204      	movs	r2, #4
 80002ec:	6b59      	ldr	r1, [r3, #52]	@ 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ee:	2500      	movs	r5, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002f0:	4311      	orrs	r1, r2
 80002f2:	6359      	str	r1, [r3, #52]	@ 0x34
 80002f4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80002f6:	400a      	ands	r2, r1
 80002f8:	9203      	str	r2, [sp, #12]
 80002fa:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  HAL_GPIO_WritePin(GPIOA, KEY_PAD_0_Pin|KEY_PAD_1_Pin, GPIO_PIN_RESET);
 80002fe:	2103      	movs	r1, #3
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000300:	4332      	orrs	r2, r6
 8000302:	635a      	str	r2, [r3, #52]	@ 0x34
 8000304:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  HAL_GPIO_WritePin(GPIOA, KEY_PAD_0_Pin|KEY_PAD_1_Pin, GPIO_PIN_RESET);
 8000306:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000308:	4033      	ands	r3, r6
 800030a:	9304      	str	r3, [sp, #16]
 800030c:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, KEY_PAD_0_Pin|KEY_PAD_1_Pin, GPIO_PIN_RESET);
 800030e:	f000 fb7f 	bl	8000a10 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000312:	20a0      	movs	r0, #160	@ 0xa0
  GPIO_InitStruct.Pin = KEY_PAD_0_Pin|KEY_PAD_1_Pin;
 8000314:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000316:	a905      	add	r1, sp, #20
 8000318:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = KEY_PAD_0_Pin|KEY_PAD_1_Pin;
 800031a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800031c:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800031e:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000320:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000322:	f000 fa7d 	bl	8000820 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000326:	20a0      	movs	r0, #160	@ 0xa0
  GPIO_InitStruct.Pin = KEY_PAD_2_Pin|KEY_PAD_3_Pin;
 8000328:	230c      	movs	r3, #12
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800032a:	05c0      	lsls	r0, r0, #23
 800032c:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = KEY_PAD_2_Pin|KEY_PAD_3_Pin;
 800032e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000330:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000332:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000334:	f000 fa74 	bl	8000820 <HAL_GPIO_Init>
  hi2c1.Instance = I2C1;
 8000338:	4c40      	ldr	r4, [pc, #256]	@ (800043c <main+0x180>)
 800033a:	4b41      	ldr	r3, [pc, #260]	@ (8000440 <main+0x184>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800033c:	0020      	movs	r0, r4
  hi2c1.Instance = I2C1;
 800033e:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x00200105;
 8000340:	4b40      	ldr	r3, [pc, #256]	@ (8000444 <main+0x188>)
  hi2c1.Init.OwnAddress1 = 0;
 8000342:	60a5      	str	r5, [r4, #8]
  hi2c1.Init.Timing = 0x00200105;
 8000344:	6063      	str	r3, [r4, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000346:	60e6      	str	r6, [r4, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000348:	6125      	str	r5, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800034a:	6165      	str	r5, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800034c:	61a5      	str	r5, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800034e:	61e5      	str	r5, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000350:	6225      	str	r5, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000352:	f000 fcfd 	bl	8000d50 <HAL_I2C_Init>
 8000356:	2800      	cmp	r0, #0
 8000358:	d001      	beq.n	800035e <main+0xa2>
 800035a:	b672      	cpsid	i
  while (1)
 800035c:	e7fe      	b.n	800035c <main+0xa0>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800035e:	2100      	movs	r1, #0
 8000360:	0020      	movs	r0, r4
 8000362:	f000 ffeb 	bl	800133c <HAL_I2CEx_ConfigAnalogFilter>
 8000366:	1e01      	subs	r1, r0, #0
 8000368:	d001      	beq.n	800036e <main+0xb2>
 800036a:	b672      	cpsid	i
  while (1)
 800036c:	e7fe      	b.n	800036c <main+0xb0>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800036e:	0020      	movs	r0, r4
 8000370:	f001 f80a 	bl	8001388 <HAL_I2CEx_ConfigDigitalFilter>
 8000374:	1e05      	subs	r5, r0, #0
 8000376:	d001      	beq.n	800037c <main+0xc0>
 8000378:	b672      	cpsid	i
  while (1)
 800037a:	e7fe      	b.n	800037a <main+0xbe>
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 800037c:	2080      	movs	r0, #128	@ 0x80
 800037e:	0340      	lsls	r0, r0, #13
 8000380:	f001 f830 	bl	80013e4 <HAL_I2CEx_EnableFastModePlus>
  RTC_TimeTypeDef sTime = {0};
 8000384:	2214      	movs	r2, #20
 8000386:	0029      	movs	r1, r5
 8000388:	a805      	add	r0, sp, #20
 800038a:	f002 ff77 	bl	800327c <memset>
  hrtc.Instance = RTC;
 800038e:	4c2e      	ldr	r4, [pc, #184]	@ (8000448 <main+0x18c>)
 8000390:	4b2e      	ldr	r3, [pc, #184]	@ (800044c <main+0x190>)
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000392:	0020      	movs	r0, r4
  hrtc.Instance = RTC;
 8000394:	6023      	str	r3, [r4, #0]
  hrtc.Init.AsynchPrediv = 127;
 8000396:	237f      	movs	r3, #127	@ 0x7f
 8000398:	60e3      	str	r3, [r4, #12]
  hrtc.Init.SynchPrediv = 255;
 800039a:	3380      	adds	r3, #128	@ 0x80
 800039c:	6123      	str	r3, [r4, #16]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800039e:	2380      	movs	r3, #128	@ 0x80
 80003a0:	05db      	lsls	r3, r3, #23
  RTC_DateTypeDef sDate = {0};
 80003a2:	9501      	str	r5, [sp, #4]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80003a4:	60a5      	str	r5, [r4, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80003a6:	6165      	str	r5, [r4, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80003a8:	61a5      	str	r5, [r4, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80003aa:	61e5      	str	r5, [r4, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80003ac:	6223      	str	r3, [r4, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80003ae:	6265      	str	r5, [r4, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80003b0:	f001 fd78 	bl	8001ea4 <HAL_RTC_Init>
 80003b4:	1e02      	subs	r2, r0, #0
 80003b6:	d001      	beq.n	80003bc <main+0x100>
 80003b8:	b672      	cpsid	i
  while (1)
 80003ba:	e7fe      	b.n	80003ba <main+0xfe>
  sTime.Hours = 0;
 80003bc:	466b      	mov	r3, sp
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80003be:	a905      	add	r1, sp, #20
  sTime.Hours = 0;
 80003c0:	8298      	strh	r0, [r3, #20]
  sTime.Seconds = 0;
 80003c2:	7598      	strb	r0, [r3, #22]
  sTime.SubSeconds = 0;
 80003c4:	9006      	str	r0, [sp, #24]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80003c6:	9008      	str	r0, [sp, #32]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80003c8:	9009      	str	r0, [sp, #36]	@ 0x24
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80003ca:	0020      	movs	r0, r4
 80003cc:	f001 fdc8 	bl	8001f60 <HAL_RTC_SetTime>
 80003d0:	1e02      	subs	r2, r0, #0
 80003d2:	d001      	beq.n	80003d8 <main+0x11c>
 80003d4:	b672      	cpsid	i
  while (1)
 80003d6:	e7fe      	b.n	80003d6 <main+0x11a>
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 80003d8:	4b1d      	ldr	r3, [pc, #116]	@ (8000450 <main+0x194>)
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80003da:	0020      	movs	r0, r4
 80003dc:	a901      	add	r1, sp, #4
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 80003de:	9301      	str	r3, [sp, #4]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80003e0:	f001 fe3e 	bl	8002060 <HAL_RTC_SetDate>
 80003e4:	2800      	cmp	r0, #0
 80003e6:	d001      	beq.n	80003ec <main+0x130>
 80003e8:	b672      	cpsid	i
  while (1)
 80003ea:	e7fe      	b.n	80003ea <main+0x12e>
  hi2c2.Instance = I2C2;
 80003ec:	4c19      	ldr	r4, [pc, #100]	@ (8000454 <main+0x198>)
 80003ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000458 <main+0x19c>)
  hi2c2.Init.OwnAddress1 = 0;
 80003f0:	60a0      	str	r0, [r4, #8]
  hi2c2.Instance = I2C2;
 80003f2:	6023      	str	r3, [r4, #0]
  hi2c2.Init.Timing = 0x00503D58;
 80003f4:	4b19      	ldr	r3, [pc, #100]	@ (800045c <main+0x1a0>)
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003f6:	6120      	str	r0, [r4, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80003f8:	6160      	str	r0, [r4, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003fa:	61a0      	str	r0, [r4, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003fc:	61e0      	str	r0, [r4, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003fe:	6220      	str	r0, [r4, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000400:	0020      	movs	r0, r4
  hi2c2.Init.Timing = 0x00503D58;
 8000402:	6063      	str	r3, [r4, #4]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000404:	60e6      	str	r6, [r4, #12]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000406:	f000 fca3 	bl	8000d50 <HAL_I2C_Init>
 800040a:	1e01      	subs	r1, r0, #0
 800040c:	d001      	beq.n	8000412 <main+0x156>
 800040e:	b672      	cpsid	i
  while (1)
 8000410:	e7fe      	b.n	8000410 <main+0x154>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000412:	0020      	movs	r0, r4
 8000414:	f000 ff92 	bl	800133c <HAL_I2CEx_ConfigAnalogFilter>
 8000418:	1e01      	subs	r1, r0, #0
 800041a:	d001      	beq.n	8000420 <main+0x164>
 800041c:	b672      	cpsid	i
  while (1)
 800041e:	e7fe      	b.n	800041e <main+0x162>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000420:	0020      	movs	r0, r4
 8000422:	f000 ffb1 	bl	8001388 <HAL_I2CEx_ConfigDigitalFilter>
 8000426:	2800      	cmp	r0, #0
 8000428:	d001      	beq.n	800042e <main+0x172>
 800042a:	b672      	cpsid	i
  while (1)
 800042c:	e7fe      	b.n	800042c <main+0x170>
  main_app.main();
 800042e:	a805      	add	r0, sp, #20
 8000430:	f002 fcc2 	bl	8002db8 <_ZN3app4mainEv>
  while (1)
 8000434:	e7fe      	b.n	8000434 <main+0x178>
 8000436:	46c0      	nop			@ (mov r8, r8)
 8000438:	40021000 	.word	0x40021000
 800043c:	20000108 	.word	0x20000108
 8000440:	40005400 	.word	0x40005400
 8000444:	00200105 	.word	0x00200105
 8000448:	20000088 	.word	0x20000088
 800044c:	40002800 	.word	0x40002800
 8000450:	00190805 	.word	0x00190805
 8000454:	200000b4 	.word	0x200000b4
 8000458:	40005800 	.word	0x40005800
 800045c:	00503d58 	.word	0x00503d58

08000460 <Error_Handler>:
 8000460:	b672      	cpsid	i
  while (1)
 8000462:	e7fe      	b.n	8000462 <Error_Handler+0x2>

08000464 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000464:	2201      	movs	r2, #1
 8000466:	4b0e      	ldr	r3, [pc, #56]	@ (80004a0 <HAL_MspInit+0x3c>)
{
 8000468:	b500      	push	{lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800046a:	6c19      	ldr	r1, [r3, #64]	@ 0x40
{
 800046c:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800046e:	4311      	orrs	r1, r2
 8000470:	6419      	str	r1, [r3, #64]	@ 0x40
 8000472:	6c19      	ldr	r1, [r3, #64]	@ 0x40

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000474:	2004      	movs	r0, #4
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000476:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8000478:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800047a:	9200      	str	r2, [sp, #0]
 800047c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800047e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000480:	0549      	lsls	r1, r1, #21
 8000482:	430a      	orrs	r2, r1
 8000484:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000486:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000488:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 800048a:	400b      	ands	r3, r1
 800048c:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800048e:	2100      	movs	r1, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 8000490:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000492:	f000 f975 	bl	8000780 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000496:	2004      	movs	r0, #4
 8000498:	f000 f99c 	bl	80007d4 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800049c:	b003      	add	sp, #12
 800049e:	bd00      	pop	{pc}
 80004a0:	40021000 	.word	0x40021000

080004a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80004a4:	b510      	push	{r4, lr}
 80004a6:	0004      	movs	r4, r0
 80004a8:	b090      	sub	sp, #64	@ 0x40
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004aa:	2214      	movs	r2, #20
 80004ac:	2100      	movs	r1, #0
 80004ae:	a804      	add	r0, sp, #16
 80004b0:	f002 fee4 	bl	800327c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004b4:	2218      	movs	r2, #24
 80004b6:	2100      	movs	r1, #0
 80004b8:	a80a      	add	r0, sp, #40	@ 0x28
 80004ba:	f002 fedf 	bl	800327c <memset>
  if(hi2c->Instance==I2C1)
 80004be:	6823      	ldr	r3, [r4, #0]
 80004c0:	4a2e      	ldr	r2, [pc, #184]	@ (800057c <HAL_I2C_MspInit+0xd8>)
 80004c2:	4293      	cmp	r3, r2
 80004c4:	d004      	beq.n	80004d0 <HAL_I2C_MspInit+0x2c>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(hi2c->Instance==I2C2)
 80004c6:	4a2e      	ldr	r2, [pc, #184]	@ (8000580 <HAL_I2C_MspInit+0xdc>)
 80004c8:	4293      	cmp	r3, r2
 80004ca:	d031      	beq.n	8000530 <HAL_I2C_MspInit+0x8c>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80004cc:	b010      	add	sp, #64	@ 0x40
 80004ce:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80004d0:	2320      	movs	r3, #32
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004d2:	a80a      	add	r0, sp, #40	@ 0x28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80004d4:	930a      	str	r3, [sp, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004d6:	f001 fb47 	bl	8001b68 <HAL_RCCEx_PeriphCLKConfig>
 80004da:	2800      	cmp	r0, #0
 80004dc:	d14b      	bne.n	8000576 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004de:	2302      	movs	r3, #2
 80004e0:	4c28      	ldr	r4, [pc, #160]	@ (8000584 <HAL_I2C_MspInit+0xe0>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004e2:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004e4:	6b62      	ldr	r2, [r4, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004e6:	4828      	ldr	r0, [pc, #160]	@ (8000588 <HAL_I2C_MspInit+0xe4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004e8:	431a      	orrs	r2, r3
 80004ea:	6362      	str	r2, [r4, #52]	@ 0x34
 80004ec:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80004ee:	4013      	ands	r3, r2
 80004f0:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = LCD_SDA_Pin|LCD_SCL_Pin;
 80004f2:	22c0      	movs	r2, #192	@ 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004f4:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = LCD_SDA_Pin|LCD_SCL_Pin;
 80004f6:	2312      	movs	r3, #18
 80004f8:	9204      	str	r2, [sp, #16]
 80004fa:	9305      	str	r3, [sp, #20]
 80004fc:	2201      	movs	r2, #1
 80004fe:	2303      	movs	r3, #3
 8000500:	9206      	str	r2, [sp, #24]
 8000502:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000504:	2306      	movs	r3, #6
 8000506:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000508:	f000 f98a 	bl	8000820 <HAL_GPIO_Init>
    HAL_I2CEx_EnableFastModePlus(SYSCFG_FASTMODEPLUS_PB7);
 800050c:	2080      	movs	r0, #128	@ 0x80
 800050e:	0280      	lsls	r0, r0, #10
 8000510:	f000 ff68 	bl	80013e4 <HAL_I2CEx_EnableFastModePlus>
    HAL_I2CEx_EnableFastModePlus(SYSCFG_FASTMODEPLUS_PB6);
 8000514:	2080      	movs	r0, #128	@ 0x80
 8000516:	0240      	lsls	r0, r0, #9
 8000518:	f000 ff64 	bl	80013e4 <HAL_I2CEx_EnableFastModePlus>
    __HAL_RCC_I2C1_CLK_ENABLE();
 800051c:	2280      	movs	r2, #128	@ 0x80
 800051e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8000520:	0392      	lsls	r2, r2, #14
 8000522:	4313      	orrs	r3, r2
 8000524:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8000526:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8000528:	4013      	ands	r3, r2
 800052a:	9301      	str	r3, [sp, #4]
 800052c:	9b01      	ldr	r3, [sp, #4]
 800052e:	e7cd      	b.n	80004cc <HAL_I2C_MspInit+0x28>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000530:	2301      	movs	r3, #1
 8000532:	4c14      	ldr	r4, [pc, #80]	@ (8000584 <HAL_I2C_MspInit+0xe0>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000534:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000536:	6b62      	ldr	r2, [r4, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000538:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800053a:	431a      	orrs	r2, r3
 800053c:	6362      	str	r2, [r4, #52]	@ 0x34
 800053e:	6b62      	ldr	r2, [r4, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000540:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000542:	4013      	ands	r3, r2
 8000544:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = SENSOR_SCL_Pin|SENSOR_SDA_Pin;
 8000546:	22c0      	movs	r2, #192	@ 0xc0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000548:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SENSOR_SCL_Pin|SENSOR_SDA_Pin;
 800054a:	2312      	movs	r3, #18
 800054c:	0152      	lsls	r2, r2, #5
 800054e:	9204      	str	r2, [sp, #16]
 8000550:	9305      	str	r3, [sp, #20]
 8000552:	2201      	movs	r2, #1
 8000554:	2303      	movs	r3, #3
 8000556:	9206      	str	r2, [sp, #24]
 8000558:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 800055a:	2306      	movs	r3, #6
 800055c:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800055e:	f000 f95f 	bl	8000820 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000562:	2280      	movs	r2, #128	@ 0x80
 8000564:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8000566:	03d2      	lsls	r2, r2, #15
 8000568:	4313      	orrs	r3, r2
 800056a:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800056c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800056e:	4013      	ands	r3, r2
 8000570:	9303      	str	r3, [sp, #12]
 8000572:	9b03      	ldr	r3, [sp, #12]
}
 8000574:	e7aa      	b.n	80004cc <HAL_I2C_MspInit+0x28>
      Error_Handler();
 8000576:	f7ff ff73 	bl	8000460 <Error_Handler>
 800057a:	e7b0      	b.n	80004de <HAL_I2C_MspInit+0x3a>
 800057c:	40005400 	.word	0x40005400
 8000580:	40005800 	.word	0x40005800
 8000584:	40021000 	.word	0x40021000
 8000588:	50000400 	.word	0x50000400

0800058c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800058c:	b510      	push	{r4, lr}
 800058e:	0004      	movs	r4, r0
 8000590:	b088      	sub	sp, #32
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000592:	2218      	movs	r2, #24
 8000594:	2100      	movs	r1, #0
 8000596:	a802      	add	r0, sp, #8
 8000598:	f002 fe70 	bl	800327c <memset>
  if(hrtc->Instance==RTC)
 800059c:	4b11      	ldr	r3, [pc, #68]	@ (80005e4 <HAL_RTC_MspInit+0x58>)
 800059e:	6822      	ldr	r2, [r4, #0]
 80005a0:	429a      	cmp	r2, r3
 80005a2:	d001      	beq.n	80005a8 <HAL_RTC_MspInit+0x1c>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 80005a4:	b008      	add	sp, #32
 80005a6:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80005a8:	2380      	movs	r3, #128	@ 0x80
 80005aa:	029b      	lsls	r3, r3, #10
 80005ac:	9302      	str	r3, [sp, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80005ae:	2380      	movs	r3, #128	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005b0:	a802      	add	r0, sp, #8
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80005b2:	005b      	lsls	r3, r3, #1
 80005b4:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005b6:	f001 fad7 	bl	8001b68 <HAL_RCCEx_PeriphCLKConfig>
 80005ba:	2800      	cmp	r0, #0
 80005bc:	d10f      	bne.n	80005de <HAL_RTC_MspInit+0x52>
    __HAL_RCC_RTC_ENABLE();
 80005be:	2280      	movs	r2, #128	@ 0x80
 80005c0:	4b09      	ldr	r3, [pc, #36]	@ (80005e8 <HAL_RTC_MspInit+0x5c>)
 80005c2:	0212      	lsls	r2, r2, #8
 80005c4:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 80005c6:	430a      	orrs	r2, r1
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80005c8:	2180      	movs	r1, #128	@ 0x80
    __HAL_RCC_RTC_ENABLE();
 80005ca:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80005cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80005ce:	00c9      	lsls	r1, r1, #3
 80005d0:	430a      	orrs	r2, r1
 80005d2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80005d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80005d6:	400b      	ands	r3, r1
 80005d8:	9301      	str	r3, [sp, #4]
 80005da:	9b01      	ldr	r3, [sp, #4]
}
 80005dc:	e7e2      	b.n	80005a4 <HAL_RTC_MspInit+0x18>
      Error_Handler();
 80005de:	f7ff ff3f 	bl	8000460 <Error_Handler>
 80005e2:	e7ec      	b.n	80005be <HAL_RTC_MspInit+0x32>
 80005e4:	40002800 	.word	0x40002800
 80005e8:	40021000 	.word	0x40021000

080005ec <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005ec:	e7fe      	b.n	80005ec <NMI_Handler>
 80005ee:	46c0      	nop			@ (mov r8, r8)

080005f0 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005f0:	e7fe      	b.n	80005f0 <HardFault_Handler>
 80005f2:	46c0      	nop			@ (mov r8, r8)

080005f4 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80005f4:	4770      	bx	lr
 80005f6:	46c0      	nop			@ (mov r8, r8)

080005f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 80005f8:	4770      	bx	lr
 80005fa:	46c0      	nop			@ (mov r8, r8)

080005fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005fc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005fe:	f000 f89b 	bl	8000738 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000602:	bd10      	pop	{r4, pc}

08000604 <RCC_IRQHandler>:
/******************************************************************************/

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
 8000604:	4770      	bx	lr
 8000606:	46c0      	nop			@ (mov r8, r8)

08000608 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8000608:	2001      	movs	r0, #1
 800060a:	4770      	bx	lr

0800060c <_kill>:

int _kill(int pid, int sig)
{
 800060c:	b510      	push	{r4, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800060e:	f002 fe99 	bl	8003344 <__errno>
 8000612:	2316      	movs	r3, #22
 8000614:	6003      	str	r3, [r0, #0]
  return -1;
 8000616:	2001      	movs	r0, #1
}
 8000618:	4240      	negs	r0, r0
 800061a:	bd10      	pop	{r4, pc}

0800061c <_exit>:

void _exit (int status)
{
 800061c:	b510      	push	{r4, lr}
  errno = EINVAL;
 800061e:	f002 fe91 	bl	8003344 <__errno>
 8000622:	2316      	movs	r3, #22
 8000624:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8000626:	e7fe      	b.n	8000626 <_exit+0xa>

08000628 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000628:	490c      	ldr	r1, [pc, #48]	@ (800065c <_sbrk+0x34>)
 800062a:	4a0d      	ldr	r2, [pc, #52]	@ (8000660 <_sbrk+0x38>)
{
 800062c:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800062e:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000630:	490c      	ldr	r1, [pc, #48]	@ (8000664 <_sbrk+0x3c>)
{
 8000632:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8000634:	6808      	ldr	r0, [r1, #0]
 8000636:	2800      	cmp	r0, #0
 8000638:	d004      	beq.n	8000644 <_sbrk+0x1c>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800063a:	18c3      	adds	r3, r0, r3
 800063c:	4293      	cmp	r3, r2
 800063e:	d806      	bhi.n	800064e <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000640:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 8000642:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000644:	4808      	ldr	r0, [pc, #32]	@ (8000668 <_sbrk+0x40>)
  if (__sbrk_heap_end + incr > max_heap)
 8000646:	18c3      	adds	r3, r0, r3
    __sbrk_heap_end = &_end;
 8000648:	6008      	str	r0, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 800064a:	4293      	cmp	r3, r2
 800064c:	d9f8      	bls.n	8000640 <_sbrk+0x18>
    errno = ENOMEM;
 800064e:	f002 fe79 	bl	8003344 <__errno>
 8000652:	230c      	movs	r3, #12
 8000654:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000656:	2001      	movs	r0, #1
 8000658:	4240      	negs	r0, r0
 800065a:	e7f2      	b.n	8000642 <_sbrk+0x1a>
 800065c:	00000400 	.word	0x00000400
 8000660:	20002000 	.word	0x20002000
 8000664:	2000015c 	.word	0x2000015c
 8000668:	20000798 	.word	0x20000798

0800066c <SystemInit>:
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800066c:	4770      	bx	lr
 800066e:	46c0      	nop			@ (mov r8, r8)

08000670 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000670:	480d      	ldr	r0, [pc, #52]	@ (80006a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000672:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000674:	f7ff fffa 	bl	800066c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000678:	480c      	ldr	r0, [pc, #48]	@ (80006ac <LoopForever+0x6>)
  ldr r1, =_edata
 800067a:	490d      	ldr	r1, [pc, #52]	@ (80006b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800067c:	4a0d      	ldr	r2, [pc, #52]	@ (80006b4 <LoopForever+0xe>)
  movs r3, #0
 800067e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000680:	e002      	b.n	8000688 <LoopCopyDataInit>

08000682 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000682:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000684:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000686:	3304      	adds	r3, #4

08000688 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000688:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800068a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800068c:	d3f9      	bcc.n	8000682 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800068e:	4a0a      	ldr	r2, [pc, #40]	@ (80006b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000690:	4c0a      	ldr	r4, [pc, #40]	@ (80006bc <LoopForever+0x16>)
  movs r3, #0
 8000692:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000694:	e001      	b.n	800069a <LoopFillZerobss>

08000696 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000696:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000698:	3204      	adds	r2, #4

0800069a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800069a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800069c:	d3fb      	bcc.n	8000696 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800069e:	f002 fe57 	bl	8003350 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80006a2:	f7ff fe0b 	bl	80002bc <main>

080006a6 <LoopForever>:

LoopForever:
  b LoopForever
 80006a6:	e7fe      	b.n	80006a6 <LoopForever>
  ldr   r0, =_estack
 80006a8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80006ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006b0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80006b4:	0800512c 	.word	0x0800512c
  ldr r2, =_sbss
 80006b8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80006bc:	20000798 	.word	0x20000798

080006c0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006c0:	e7fe      	b.n	80006c0 <ADC1_IRQHandler>
	...

080006c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006c4:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80006c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000704 <HAL_InitTick+0x40>)
{
 80006c8:	0004      	movs	r4, r0
  if ((uint32_t)uwTickFreq != 0U)
 80006ca:	7819      	ldrb	r1, [r3, #0]
 80006cc:	2900      	cmp	r1, #0
 80006ce:	d101      	bne.n	80006d4 <HAL_InitTick+0x10>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 80006d0:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80006d4:	20fa      	movs	r0, #250	@ 0xfa
 80006d6:	0080      	lsls	r0, r0, #2
 80006d8:	f7ff fd24 	bl	8000124 <__udivsi3>
 80006dc:	4d0a      	ldr	r5, [pc, #40]	@ (8000708 <HAL_InitTick+0x44>)
 80006de:	0001      	movs	r1, r0
 80006e0:	6828      	ldr	r0, [r5, #0]
 80006e2:	f7ff fd1f 	bl	8000124 <__udivsi3>
 80006e6:	f000 f881 	bl	80007ec <HAL_SYSTICK_Config>
 80006ea:	2800      	cmp	r0, #0
 80006ec:	d1f0      	bne.n	80006d0 <HAL_InitTick+0xc>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006ee:	2c03      	cmp	r4, #3
 80006f0:	d8ee      	bhi.n	80006d0 <HAL_InitTick+0xc>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006f2:	3801      	subs	r0, #1
 80006f4:	2200      	movs	r2, #0
 80006f6:	0021      	movs	r1, r4
 80006f8:	f000 f842 	bl	8000780 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006fc:	4b03      	ldr	r3, [pc, #12]	@ (800070c <HAL_InitTick+0x48>)
 80006fe:	2000      	movs	r0, #0
 8000700:	601c      	str	r4, [r3, #0]
  return status;
 8000702:	e7e6      	b.n	80006d2 <HAL_InitTick+0xe>
 8000704:	20000004 	.word	0x20000004
 8000708:	20000000 	.word	0x20000000
 800070c:	20000008 	.word	0x20000008

08000710 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000710:	2380      	movs	r3, #128	@ 0x80
 8000712:	4a08      	ldr	r2, [pc, #32]	@ (8000734 <HAL_Init+0x24>)
 8000714:	005b      	lsls	r3, r3, #1
 8000716:	6811      	ldr	r1, [r2, #0]
{
 8000718:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800071a:	430b      	orrs	r3, r1
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800071c:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800071e:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000720:	f7ff ffd0 	bl	80006c4 <HAL_InitTick>
 8000724:	1e04      	subs	r4, r0, #0
 8000726:	d002      	beq.n	800072e <HAL_Init+0x1e>
    status = HAL_ERROR;
 8000728:	2401      	movs	r4, #1
}
 800072a:	0020      	movs	r0, r4
 800072c:	bd10      	pop	{r4, pc}
  HAL_MspInit();
 800072e:	f7ff fe99 	bl	8000464 <HAL_MspInit>
 8000732:	e7fa      	b.n	800072a <HAL_Init+0x1a>
 8000734:	40022000 	.word	0x40022000

08000738 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000738:	4a03      	ldr	r2, [pc, #12]	@ (8000748 <HAL_IncTick+0x10>)
 800073a:	4b04      	ldr	r3, [pc, #16]	@ (800074c <HAL_IncTick+0x14>)
 800073c:	6811      	ldr	r1, [r2, #0]
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	185b      	adds	r3, r3, r1
 8000742:	6013      	str	r3, [r2, #0]
}
 8000744:	4770      	bx	lr
 8000746:	46c0      	nop			@ (mov r8, r8)
 8000748:	20000160 	.word	0x20000160
 800074c:	20000004 	.word	0x20000004

08000750 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000750:	4b01      	ldr	r3, [pc, #4]	@ (8000758 <HAL_GetTick+0x8>)
 8000752:	6818      	ldr	r0, [r3, #0]
}
 8000754:	4770      	bx	lr
 8000756:	46c0      	nop			@ (mov r8, r8)
 8000758:	20000160 	.word	0x20000160

0800075c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000760:	f7ff fff6 	bl	8000750 <HAL_GetTick>
 8000764:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000766:	1c63      	adds	r3, r4, #1
 8000768:	d002      	beq.n	8000770 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800076a:	4b04      	ldr	r3, [pc, #16]	@ (800077c <HAL_Delay+0x20>)
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000770:	f7ff ffee 	bl	8000750 <HAL_GetTick>
 8000774:	1b40      	subs	r0, r0, r5
 8000776:	42a0      	cmp	r0, r4
 8000778:	d3fa      	bcc.n	8000770 <HAL_Delay+0x14>
  {
  }
}
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	20000004 	.word	0x20000004

08000780 <HAL_NVIC_SetPriority>:
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000780:	22ff      	movs	r2, #255	@ 0xff
 8000782:	2303      	movs	r3, #3
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000784:	b510      	push	{r4, lr}
 8000786:	0014      	movs	r4, r2
 8000788:	4003      	ands	r3, r0
 800078a:	00db      	lsls	r3, r3, #3
 800078c:	409c      	lsls	r4, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800078e:	0189      	lsls	r1, r1, #6
 8000790:	400a      	ands	r2, r1
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000792:	43e4      	mvns	r4, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000794:	409a      	lsls	r2, r3
  if ((int32_t)(IRQn) >= 0)
 8000796:	2800      	cmp	r0, #0
 8000798:	db0b      	blt.n	80007b2 <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800079a:	4b0c      	ldr	r3, [pc, #48]	@ (80007cc <HAL_NVIC_SetPriority+0x4c>)
 800079c:	21c0      	movs	r1, #192	@ 0xc0
 800079e:	469c      	mov	ip, r3
 80007a0:	0880      	lsrs	r0, r0, #2
 80007a2:	0080      	lsls	r0, r0, #2
 80007a4:	4460      	add	r0, ip
 80007a6:	0089      	lsls	r1, r1, #2
 80007a8:	5843      	ldr	r3, [r0, r1]
 80007aa:	4023      	ands	r3, r4
 80007ac:	4313      	orrs	r3, r2
 80007ae:	5043      	str	r3, [r0, r1]
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 80007b0:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007b2:	230f      	movs	r3, #15
 80007b4:	4906      	ldr	r1, [pc, #24]	@ (80007d0 <HAL_NVIC_SetPriority+0x50>)
 80007b6:	4003      	ands	r3, r0
 80007b8:	468c      	mov	ip, r1
 80007ba:	3b08      	subs	r3, #8
 80007bc:	089b      	lsrs	r3, r3, #2
 80007be:	009b      	lsls	r3, r3, #2
 80007c0:	4463      	add	r3, ip
 80007c2:	69d9      	ldr	r1, [r3, #28]
 80007c4:	400c      	ands	r4, r1
 80007c6:	4314      	orrs	r4, r2
 80007c8:	61dc      	str	r4, [r3, #28]
 80007ca:	e7f1      	b.n	80007b0 <HAL_NVIC_SetPriority+0x30>
 80007cc:	e000e100 	.word	0xe000e100
 80007d0:	e000ed00 	.word	0xe000ed00

080007d4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80007d4:	2800      	cmp	r0, #0
 80007d6:	db05      	blt.n	80007e4 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007d8:	221f      	movs	r2, #31
 80007da:	2301      	movs	r3, #1
 80007dc:	4002      	ands	r2, r0
 80007de:	4093      	lsls	r3, r2
 80007e0:	4a01      	ldr	r2, [pc, #4]	@ (80007e8 <HAL_NVIC_EnableIRQ+0x14>)
 80007e2:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80007e4:	4770      	bx	lr
 80007e6:	46c0      	nop			@ (mov r8, r8)
 80007e8:	e000e100 	.word	0xe000e100

080007ec <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007ec:	2280      	movs	r2, #128	@ 0x80
 80007ee:	1e43      	subs	r3, r0, #1
 80007f0:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 80007f2:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007f4:	4293      	cmp	r3, r2
 80007f6:	d20e      	bcs.n	8000816 <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007f8:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007fa:	4a07      	ldr	r2, [pc, #28]	@ (8000818 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007fc:	4807      	ldr	r0, [pc, #28]	@ (800081c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007fe:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000800:	6a03      	ldr	r3, [r0, #32]
 8000802:	0609      	lsls	r1, r1, #24
 8000804:	021b      	lsls	r3, r3, #8
 8000806:	0a1b      	lsrs	r3, r3, #8
 8000808:	430b      	orrs	r3, r1
 800080a:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800080c:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800080e:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000810:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000812:	3307      	adds	r3, #7
 8000814:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 8000816:	4770      	bx	lr
 8000818:	e000e010 	.word	0xe000e010
 800081c:	e000ed00 	.word	0xe000ed00

08000820 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000820:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000822:	46de      	mov	lr, fp
 8000824:	4657      	mov	r7, sl
 8000826:	464e      	mov	r6, r9
 8000828:	4645      	mov	r5, r8
 800082a:	b5e0      	push	{r5, r6, r7, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800082c:	680c      	ldr	r4, [r1, #0]
{
 800082e:	468b      	mov	fp, r1
  uint32_t position = 0x00u;
 8000830:	2300      	movs	r3, #0
{
 8000832:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000834:	2c00      	cmp	r4, #0
 8000836:	d068      	beq.n	800090a <HAL_GPIO_Init+0xea>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000838:	2201      	movs	r2, #1
 800083a:	409a      	lsls	r2, r3
 800083c:	4694      	mov	ip, r2
 800083e:	4022      	ands	r2, r4
 8000840:	4692      	mov	sl, r2

    if (iocurrent != 0x00u)
 8000842:	4662      	mov	r2, ip
 8000844:	4214      	tst	r4, r2
 8000846:	d05c      	beq.n	8000902 <HAL_GPIO_Init+0xe2>
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000848:	2103      	movs	r1, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800084a:	465a      	mov	r2, fp
 800084c:	005f      	lsls	r7, r3, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800084e:	40b9      	lsls	r1, r7
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000850:	6855      	ldr	r5, [r2, #4]
 8000852:	2203      	movs	r2, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000854:	43c9      	mvns	r1, r1
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000856:	402a      	ands	r2, r5
 8000858:	1e56      	subs	r6, r2, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800085a:	9100      	str	r1, [sp, #0]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800085c:	2e01      	cmp	r6, #1
 800085e:	d95b      	bls.n	8000918 <HAL_GPIO_Init+0xf8>
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
        GPIOx->OTYPER = temp;
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000860:	2a03      	cmp	r2, #3
 8000862:	d000      	beq.n	8000866 <HAL_GPIO_Init+0x46>
 8000864:	e0ad      	b.n	80009c2 <HAL_GPIO_Init+0x1a2>
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000866:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 8000868:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800086a:	9900      	ldr	r1, [sp, #0]
 800086c:	4031      	ands	r1, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800086e:	430a      	orrs	r2, r1
      GPIOx->MODER = temp;
 8000870:	6002      	str	r2, [r0, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000872:	22c0      	movs	r2, #192	@ 0xc0
 8000874:	0292      	lsls	r2, r2, #10
 8000876:	4215      	tst	r5, r2
 8000878:	d043      	beq.n	8000902 <HAL_GPIO_Init+0xe2>
      {
        temp = EXTI->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800087a:	2703      	movs	r7, #3
 800087c:	260f      	movs	r6, #15
 800087e:	495d      	ldr	r1, [pc, #372]	@ (80009f4 <HAL_GPIO_Init+0x1d4>)
 8000880:	401f      	ands	r7, r3
 8000882:	468c      	mov	ip, r1
 8000884:	00ff      	lsls	r7, r7, #3
 8000886:	40be      	lsls	r6, r7
        temp = EXTI->EXTICR[position >> 2u];
 8000888:	089a      	lsrs	r2, r3, #2
 800088a:	0092      	lsls	r2, r2, #2
 800088c:	4462      	add	r2, ip
 800088e:	6e11      	ldr	r1, [r2, #96]	@ 0x60
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000890:	43b1      	bics	r1, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000892:	26a0      	movs	r6, #160	@ 0xa0
 8000894:	05f6      	lsls	r6, r6, #23
 8000896:	42b0      	cmp	r0, r6
 8000898:	d00e      	beq.n	80008b8 <HAL_GPIO_Init+0x98>
 800089a:	4e57      	ldr	r6, [pc, #348]	@ (80009f8 <HAL_GPIO_Init+0x1d8>)
 800089c:	42b0      	cmp	r0, r6
 800089e:	d100      	bne.n	80008a2 <HAL_GPIO_Init+0x82>
 80008a0:	e0a0      	b.n	80009e4 <HAL_GPIO_Init+0x1c4>
 80008a2:	4e56      	ldr	r6, [pc, #344]	@ (80009fc <HAL_GPIO_Init+0x1dc>)
 80008a4:	42b0      	cmp	r0, r6
 80008a6:	d100      	bne.n	80008aa <HAL_GPIO_Init+0x8a>
 80008a8:	e0a0      	b.n	80009ec <HAL_GPIO_Init+0x1cc>
 80008aa:	4e55      	ldr	r6, [pc, #340]	@ (8000a00 <HAL_GPIO_Init+0x1e0>)
 80008ac:	42b0      	cmp	r0, r6
 80008ae:	d100      	bne.n	80008b2 <HAL_GPIO_Init+0x92>
 80008b0:	e094      	b.n	80009dc <HAL_GPIO_Init+0x1bc>
 80008b2:	2605      	movs	r6, #5
 80008b4:	40be      	lsls	r6, r7
 80008b6:	4331      	orrs	r1, r6
        EXTI->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80008b8:	2680      	movs	r6, #128	@ 0x80
        EXTI->EXTICR[position >> 2u] = temp;
 80008ba:	6611      	str	r1, [r2, #96]	@ 0x60
        temp &= ~(iocurrent);
 80008bc:	4651      	mov	r1, sl
        temp = EXTI->RTSR1;
 80008be:	4a4d      	ldr	r2, [pc, #308]	@ (80009f4 <HAL_GPIO_Init+0x1d4>)
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80008c0:	0376      	lsls	r6, r6, #13
        temp &= ~(iocurrent);
 80008c2:	43c9      	mvns	r1, r1
        temp = EXTI->RTSR1;
 80008c4:	6812      	ldr	r2, [r2, #0]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80008c6:	4235      	tst	r5, r6
 80008c8:	d000      	beq.n	80008cc <HAL_GPIO_Init+0xac>
 80008ca:	e077      	b.n	80009bc <HAL_GPIO_Init+0x19c>
        temp &= ~(iocurrent);
 80008cc:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 80008ce:	4e49      	ldr	r6, [pc, #292]	@ (80009f4 <HAL_GPIO_Init+0x1d4>)
 80008d0:	6032      	str	r2, [r6, #0]

        temp = EXTI->FTSR1;
 80008d2:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80008d4:	2680      	movs	r6, #128	@ 0x80
 80008d6:	03b6      	lsls	r6, r6, #14
 80008d8:	4235      	tst	r5, r6
 80008da:	d16c      	bne.n	80009b6 <HAL_GPIO_Init+0x196>
        temp &= ~(iocurrent);
 80008dc:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 80008de:	4e45      	ldr	r6, [pc, #276]	@ (80009f4 <HAL_GPIO_Init+0x1d4>)
 80008e0:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80008e2:	2284      	movs	r2, #132	@ 0x84
 80008e4:	58b2      	ldr	r2, [r6, r2]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80008e6:	03af      	lsls	r7, r5, #14
 80008e8:	d462      	bmi.n	80009b0 <HAL_GPIO_Init+0x190>
        temp &= ~(iocurrent);
 80008ea:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 80008ec:	2784      	movs	r7, #132	@ 0x84
 80008ee:	4e41      	ldr	r6, [pc, #260]	@ (80009f4 <HAL_GPIO_Init+0x1d4>)
 80008f0:	51f2      	str	r2, [r6, r7]

        temp = EXTI->IMR1;
 80008f2:	2280      	movs	r2, #128	@ 0x80
 80008f4:	58b2      	ldr	r2, [r6, r2]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80008f6:	03ed      	lsls	r5, r5, #15
 80008f8:	d456      	bmi.n	80009a8 <HAL_GPIO_Init+0x188>
        temp &= ~(iocurrent);
 80008fa:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 80008fc:	2180      	movs	r1, #128	@ 0x80
 80008fe:	4d3d      	ldr	r5, [pc, #244]	@ (80009f4 <HAL_GPIO_Init+0x1d4>)
 8000900:	506a      	str	r2, [r5, r1]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000902:	0022      	movs	r2, r4
      }
    }

    position++;
 8000904:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000906:	40da      	lsrs	r2, r3
 8000908:	d196      	bne.n	8000838 <HAL_GPIO_Init+0x18>
  }
}
 800090a:	b003      	add	sp, #12
 800090c:	bcf0      	pop	{r4, r5, r6, r7}
 800090e:	46bb      	mov	fp, r7
 8000910:	46b2      	mov	sl, r6
 8000912:	46a9      	mov	r9, r5
 8000914:	46a0      	mov	r8, r4
 8000916:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp = GPIOx->OSPEEDR;
 8000918:	6881      	ldr	r1, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800091a:	000e      	movs	r6, r1
 800091c:	9900      	ldr	r1, [sp, #0]
 800091e:	400e      	ands	r6, r1
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000920:	4659      	mov	r1, fp
 8000922:	68c9      	ldr	r1, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000924:	46b1      	mov	r9, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000926:	000e      	movs	r6, r1
 8000928:	40be      	lsls	r6, r7
 800092a:	46b0      	mov	r8, r6
 800092c:	464e      	mov	r6, r9
 800092e:	4641      	mov	r1, r8
 8000930:	430e      	orrs	r6, r1
        GPIOx->OSPEEDR = temp;
 8000932:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000934:	6841      	ldr	r1, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000936:	000e      	movs	r6, r1
 8000938:	4661      	mov	r1, ip
 800093a:	438e      	bics	r6, r1
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800093c:	0929      	lsrs	r1, r5, #4
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800093e:	46b0      	mov	r8, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000940:	000e      	movs	r6, r1
 8000942:	2101      	movs	r1, #1
 8000944:	400e      	ands	r6, r1
 8000946:	409e      	lsls	r6, r3
 8000948:	46b4      	mov	ip, r6
 800094a:	4646      	mov	r6, r8
 800094c:	4661      	mov	r1, ip
 800094e:	430e      	orrs	r6, r1
        GPIOx->OTYPER = temp;
 8000950:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 8000952:	68c1      	ldr	r1, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000954:	000e      	movs	r6, r1
 8000956:	9900      	ldr	r1, [sp, #0]
 8000958:	400e      	ands	r6, r1
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800095a:	4659      	mov	r1, fp
 800095c:	6889      	ldr	r1, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800095e:	46b0      	mov	r8, r6
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000960:	000e      	movs	r6, r1
 8000962:	40be      	lsls	r6, r7
 8000964:	46b4      	mov	ip, r6
 8000966:	4646      	mov	r6, r8
 8000968:	4661      	mov	r1, ip
 800096a:	430e      	orrs	r6, r1
        GPIOx->PUPDR = temp;
 800096c:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800096e:	2a02      	cmp	r2, #2
 8000970:	d000      	beq.n	8000974 <HAL_GPIO_Init+0x154>
 8000972:	e778      	b.n	8000866 <HAL_GPIO_Init+0x46>
        temp = GPIOx->AFR[position >> 3u];
 8000974:	08d9      	lsrs	r1, r3, #3
 8000976:	0089      	lsls	r1, r1, #2
 8000978:	468c      	mov	ip, r1
 800097a:	4484      	add	ip, r0
 800097c:	4661      	mov	r1, ip
 800097e:	6a0e      	ldr	r6, [r1, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000980:	2107      	movs	r1, #7
 8000982:	4019      	ands	r1, r3
 8000984:	0089      	lsls	r1, r1, #2
 8000986:	4688      	mov	r8, r1
        temp = GPIOx->AFR[position >> 3u];
 8000988:	9601      	str	r6, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800098a:	210f      	movs	r1, #15
 800098c:	4646      	mov	r6, r8
 800098e:	40b1      	lsls	r1, r6
 8000990:	9e01      	ldr	r6, [sp, #4]
 8000992:	438e      	bics	r6, r1
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000994:	4659      	mov	r1, fp
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000996:	9601      	str	r6, [sp, #4]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000998:	4646      	mov	r6, r8
 800099a:	6909      	ldr	r1, [r1, #16]
 800099c:	40b1      	lsls	r1, r6
 800099e:	9e01      	ldr	r6, [sp, #4]
 80009a0:	430e      	orrs	r6, r1
        GPIOx->AFR[position >> 3u] = temp;
 80009a2:	4661      	mov	r1, ip
 80009a4:	620e      	str	r6, [r1, #32]
 80009a6:	e75e      	b.n	8000866 <HAL_GPIO_Init+0x46>
          temp |= iocurrent;
 80009a8:	4651      	mov	r1, sl
 80009aa:	4311      	orrs	r1, r2
 80009ac:	000a      	movs	r2, r1
 80009ae:	e7a5      	b.n	80008fc <HAL_GPIO_Init+0xdc>
          temp |= iocurrent;
 80009b0:	4656      	mov	r6, sl
 80009b2:	4332      	orrs	r2, r6
 80009b4:	e79a      	b.n	80008ec <HAL_GPIO_Init+0xcc>
          temp |= iocurrent;
 80009b6:	4656      	mov	r6, sl
 80009b8:	4332      	orrs	r2, r6
 80009ba:	e790      	b.n	80008de <HAL_GPIO_Init+0xbe>
          temp |= iocurrent;
 80009bc:	4656      	mov	r6, sl
 80009be:	4332      	orrs	r2, r6
 80009c0:	e785      	b.n	80008ce <HAL_GPIO_Init+0xae>
        temp = GPIOx->PUPDR;
 80009c2:	68c1      	ldr	r1, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80009c4:	9e00      	ldr	r6, [sp, #0]
 80009c6:	4031      	ands	r1, r6
 80009c8:	4688      	mov	r8, r1
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80009ca:	4659      	mov	r1, fp
 80009cc:	6889      	ldr	r1, [r1, #8]
 80009ce:	40b9      	lsls	r1, r7
 80009d0:	468c      	mov	ip, r1
 80009d2:	4641      	mov	r1, r8
 80009d4:	4666      	mov	r6, ip
 80009d6:	4331      	orrs	r1, r6
        GPIOx->PUPDR = temp;
 80009d8:	60c1      	str	r1, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80009da:	e744      	b.n	8000866 <HAL_GPIO_Init+0x46>
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80009dc:	2603      	movs	r6, #3
 80009de:	40be      	lsls	r6, r7
 80009e0:	4331      	orrs	r1, r6
 80009e2:	e769      	b.n	80008b8 <HAL_GPIO_Init+0x98>
 80009e4:	2601      	movs	r6, #1
 80009e6:	40be      	lsls	r6, r7
 80009e8:	4331      	orrs	r1, r6
 80009ea:	e765      	b.n	80008b8 <HAL_GPIO_Init+0x98>
 80009ec:	2602      	movs	r6, #2
 80009ee:	40be      	lsls	r6, r7
 80009f0:	4331      	orrs	r1, r6
 80009f2:	e761      	b.n	80008b8 <HAL_GPIO_Init+0x98>
 80009f4:	40021800 	.word	0x40021800
 80009f8:	50000400 	.word	0x50000400
 80009fc:	50000800 	.word	0x50000800
 8000a00:	50000c00 	.word	0x50000c00

08000a04 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000a04:	6900      	ldr	r0, [r0, #16]
 8000a06:	4008      	ands	r0, r1
 8000a08:	1e43      	subs	r3, r0, #1
 8000a0a:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8000a0c:	b2c0      	uxtb	r0, r0
}
 8000a0e:	4770      	bx	lr

08000a10 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000a10:	2a00      	cmp	r2, #0
 8000a12:	d001      	beq.n	8000a18 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000a14:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000a16:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000a18:	6281      	str	r1, [r0, #40]	@ 0x28
}
 8000a1a:	e7fc      	b.n	8000a16 <HAL_GPIO_WritePin+0x6>

08000a1c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8000a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a1e:	0016      	movs	r6, r2
  uint32_t error_code = 0;
  uint32_t tickstart = Tickstart;
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8000a20:	2210      	movs	r2, #16
{
 8000a22:	46c6      	mov	lr, r8
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8000a24:	0015      	movs	r5, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 8000a26:	6803      	ldr	r3, [r0, #0]
{
 8000a28:	000f      	movs	r7, r1
  uint32_t itflag   = hi2c->Instance->ISR;
 8000a2a:	6999      	ldr	r1, [r3, #24]
{
 8000a2c:	0004      	movs	r4, r0
 8000a2e:	b500      	push	{lr}
  HAL_StatusTypeDef status = HAL_OK;
 8000a30:	2000      	movs	r0, #0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8000a32:	400d      	ands	r5, r1
 8000a34:	420a      	tst	r2, r1
 8000a36:	d012      	beq.n	8000a5e <I2C_IsErrorOccurred+0x42>
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8000a38:	2520      	movs	r5, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000a3a:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8000a3c:	0028      	movs	r0, r5
 8000a3e:	699a      	ldr	r2, [r3, #24]
 8000a40:	4010      	ands	r0, r2
 8000a42:	4215      	tst	r5, r2
 8000a44:	d000      	beq.n	8000a48 <I2C_IsErrorOccurred+0x2c>
 8000a46:	e073      	b.n	8000b30 <I2C_IsErrorOccurred+0x114>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8000a48:	1c7a      	adds	r2, r7, #1
 8000a4a:	d145      	bne.n	8000ad8 <I2C_IsErrorOccurred+0xbc>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8000a4c:	2120      	movs	r1, #32
 8000a4e:	699a      	ldr	r2, [r3, #24]
 8000a50:	4211      	tst	r1, r2
 8000a52:	d0fc      	beq.n	8000a4e <I2C_IsErrorOccurred+0x32>

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000a54:	2220      	movs	r2, #32
 8000a56:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8000a58:	2504      	movs	r5, #4
 8000a5a:	4305      	orrs	r5, r0

    status = HAL_ERROR;
 8000a5c:	2001      	movs	r0, #1
  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8000a5e:	2180      	movs	r1, #128	@ 0x80
  itflag = hi2c->Instance->ISR;
 8000a60:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8000a62:	0049      	lsls	r1, r1, #1
 8000a64:	420a      	tst	r2, r1
 8000a66:	d02c      	beq.n	8000ac2 <I2C_IsErrorOccurred+0xa6>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8000a68:	2001      	movs	r0, #1

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8000a6a:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 8000a6c:	4305      	orrs	r5, r0

    status = HAL_ERROR;
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8000a6e:	0551      	lsls	r1, r2, #21
 8000a70:	d504      	bpl.n	8000a7c <I2C_IsErrorOccurred+0x60>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8000a72:	2108      	movs	r1, #8
 8000a74:	430d      	orrs	r5, r1

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8000a76:	2180      	movs	r1, #128	@ 0x80
 8000a78:	00c9      	lsls	r1, r1, #3
 8000a7a:	61d9      	str	r1, [r3, #28]

    status = HAL_ERROR;
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8000a7c:	0592      	lsls	r2, r2, #22
 8000a7e:	d504      	bpl.n	8000a8a <I2C_IsErrorOccurred+0x6e>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8000a80:	2202      	movs	r2, #2
 8000a82:	4315      	orrs	r5, r2

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8000a84:	32ff      	adds	r2, #255	@ 0xff
 8000a86:	32ff      	adds	r2, #255	@ 0xff
 8000a88:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000a8a:	699a      	ldr	r2, [r3, #24]
 8000a8c:	0792      	lsls	r2, r2, #30
 8000a8e:	d501      	bpl.n	8000a94 <I2C_IsErrorOccurred+0x78>
    hi2c->Instance->TXDR = 0x00U;
 8000a90:	2200      	movs	r2, #0
 8000a92:	629a      	str	r2, [r3, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000a94:	2201      	movs	r2, #1
 8000a96:	6999      	ldr	r1, [r3, #24]
 8000a98:	420a      	tst	r2, r1
 8000a9a:	d019      	beq.n	8000ad0 <I2C_IsErrorOccurred+0xb4>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8000a9c:	685a      	ldr	r2, [r3, #4]
 8000a9e:	4925      	ldr	r1, [pc, #148]	@ (8000b34 <I2C_IsErrorOccurred+0x118>)
    hi2c->ErrorCode |= error_code;
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000aa0:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8000aa2:	400a      	ands	r2, r1
 8000aa4:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
 8000aa6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8000aa8:	2220      	movs	r2, #32
    hi2c->ErrorCode |= error_code;
 8000aaa:	432b      	orrs	r3, r5
 8000aac:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8000aae:	2341      	movs	r3, #65	@ 0x41
 8000ab0:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	3222      	adds	r2, #34	@ 0x22
 8000ab6:	54a3      	strb	r3, [r4, r2]
    __HAL_UNLOCK(hi2c);
 8000ab8:	3a02      	subs	r2, #2
 8000aba:	54a3      	strb	r3, [r4, r2]
  }

  return status;
}
 8000abc:	bc80      	pop	{r7}
 8000abe:	46b8      	mov	r8, r7
 8000ac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8000ac2:	0551      	lsls	r1, r2, #21
 8000ac4:	d4d5      	bmi.n	8000a72 <I2C_IsErrorOccurred+0x56>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8000ac6:	0592      	lsls	r2, r2, #22
 8000ac8:	d4da      	bmi.n	8000a80 <I2C_IsErrorOccurred+0x64>
  if (status != HAL_OK)
 8000aca:	2800      	cmp	r0, #0
 8000acc:	d0f6      	beq.n	8000abc <I2C_IsErrorOccurred+0xa0>
 8000ace:	e7dc      	b.n	8000a8a <I2C_IsErrorOccurred+0x6e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000ad0:	6999      	ldr	r1, [r3, #24]
 8000ad2:	430a      	orrs	r2, r1
 8000ad4:	619a      	str	r2, [r3, #24]
 8000ad6:	e7e1      	b.n	8000a9c <I2C_IsErrorOccurred+0x80>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8000ad8:	f7ff fe3a 	bl	8000750 <HAL_GetTick>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8000adc:	6823      	ldr	r3, [r4, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8000ade:	1b80      	subs	r0, r0, r6
 8000ae0:	42b8      	cmp	r0, r7
 8000ae2:	d801      	bhi.n	8000ae8 <I2C_IsErrorOccurred+0xcc>
 8000ae4:	2f00      	cmp	r7, #0
 8000ae6:	d1a9      	bne.n	8000a3c <I2C_IsErrorOccurred+0x20>
          tmp2 = hi2c->Mode;
 8000ae8:	2242      	movs	r2, #66	@ 0x42
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8000aea:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 8000aec:	5ca2      	ldrb	r2, [r4, r2]
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8000aee:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
 8000af0:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8000af2:	0409      	lsls	r1, r1, #16
 8000af4:	d503      	bpl.n	8000afe <I2C_IsErrorOccurred+0xe2>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8000af6:	2180      	movs	r1, #128	@ 0x80
 8000af8:	01c9      	lsls	r1, r1, #7
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8000afa:	4208      	tst	r0, r1
 8000afc:	d00e      	beq.n	8000b1c <I2C_IsErrorOccurred+0x100>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000afe:	2220      	movs	r2, #32
 8000b00:	4690      	mov	r8, r2
 8000b02:	4641      	mov	r1, r8
 8000b04:	699a      	ldr	r2, [r3, #24]
 8000b06:	4211      	tst	r1, r2
 8000b08:	d198      	bne.n	8000a3c <I2C_IsErrorOccurred+0x20>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8000b0a:	f7ff fe21 	bl	8000750 <HAL_GetTick>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8000b0e:	6823      	ldr	r3, [r4, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8000b10:	1b80      	subs	r0, r0, r6
 8000b12:	2819      	cmp	r0, #25
 8000b14:	d9f5      	bls.n	8000b02 <I2C_IsErrorOccurred+0xe6>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8000b16:	2020      	movs	r0, #32
 8000b18:	699a      	ldr	r2, [r3, #24]
 8000b1a:	e79d      	b.n	8000a58 <I2C_IsErrorOccurred+0x3c>
              (tmp1 != I2C_CR2_STOP) && \
 8000b1c:	2a20      	cmp	r2, #32
 8000b1e:	d0ee      	beq.n	8000afe <I2C_IsErrorOccurred+0xe2>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8000b20:	685a      	ldr	r2, [r3, #4]
 8000b22:	4311      	orrs	r1, r2
 8000b24:	6059      	str	r1, [r3, #4]
            tickstart = HAL_GetTick();
 8000b26:	f7ff fe13 	bl	8000750 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000b2a:	6823      	ldr	r3, [r4, #0]
            tickstart = HAL_GetTick();
 8000b2c:	0006      	movs	r6, r0
 8000b2e:	e7e6      	b.n	8000afe <I2C_IsErrorOccurred+0xe2>
 8000b30:	2000      	movs	r0, #0
 8000b32:	e78f      	b.n	8000a54 <I2C_IsErrorOccurred+0x38>
 8000b34:	fe00e800 	.word	0xfe00e800

08000b38 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8000b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b3a:	0004      	movs	r4, r0
 8000b3c:	000d      	movs	r5, r1
 8000b3e:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000b40:	2702      	movs	r7, #2
 8000b42:	6803      	ldr	r3, [r0, #0]
 8000b44:	e009      	b.n	8000b5a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8000b46:	0032      	movs	r2, r6
 8000b48:	0029      	movs	r1, r5
 8000b4a:	0020      	movs	r0, r4
 8000b4c:	f7ff ff66 	bl	8000a1c <I2C_IsErrorOccurred>
 8000b50:	2800      	cmp	r0, #0
 8000b52:	d11f      	bne.n	8000b94 <I2C_WaitOnTXISFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8000b54:	1c6b      	adds	r3, r5, #1
 8000b56:	d105      	bne.n	8000b64 <I2C_WaitOnTXISFlagUntilTimeout+0x2c>
 8000b58:	6823      	ldr	r3, [r4, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000b5a:	699b      	ldr	r3, [r3, #24]
 8000b5c:	421f      	tst	r7, r3
 8000b5e:	d0f2      	beq.n	8000b46 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
  return HAL_OK;
 8000b60:	2000      	movs	r0, #0
}
 8000b62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000b64:	f7ff fdf4 	bl	8000750 <HAL_GetTick>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8000b68:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000b6a:	1b80      	subs	r0, r0, r6
 8000b6c:	42a8      	cmp	r0, r5
 8000b6e:	d801      	bhi.n	8000b74 <I2C_WaitOnTXISFlagUntilTimeout+0x3c>
 8000b70:	2d00      	cmp	r5, #0
 8000b72:	d1f2      	bne.n	8000b5a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8000b74:	2102      	movs	r1, #2
 8000b76:	0008      	movs	r0, r1
 8000b78:	699a      	ldr	r2, [r3, #24]
 8000b7a:	4010      	ands	r0, r2
 8000b7c:	4211      	tst	r1, r2
 8000b7e:	d1ec      	bne.n	8000b5a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000b80:	2220      	movs	r2, #32
 8000b82:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8000b84:	4313      	orrs	r3, r2
 8000b86:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8000b88:	2341      	movs	r3, #65	@ 0x41
 8000b8a:	54e2      	strb	r2, [r4, r3]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	54e0      	strb	r0, [r4, r3]
          __HAL_UNLOCK(hi2c);
 8000b90:	3b02      	subs	r3, #2
 8000b92:	54e0      	strb	r0, [r4, r3]
      return HAL_ERROR;
 8000b94:	2001      	movs	r0, #1
 8000b96:	e7e4      	b.n	8000b62 <I2C_WaitOnTXISFlagUntilTimeout+0x2a>

08000b98 <I2C_WaitOnFlagUntilTimeout>:
{
 8000b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b9a:	4647      	mov	r7, r8
 8000b9c:	46ce      	mov	lr, r9
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	001f      	movs	r7, r3
 8000ba2:	9b08      	ldr	r3, [sp, #32]
 8000ba4:	0006      	movs	r6, r0
 8000ba6:	4699      	mov	r9, r3
 8000ba8:	000d      	movs	r5, r1
 8000baa:	4690      	mov	r8, r2
 8000bac:	6803      	ldr	r3, [r0, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000bae:	e009      	b.n	8000bc4 <I2C_WaitOnFlagUntilTimeout+0x2c>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8000bb0:	464a      	mov	r2, r9
 8000bb2:	0039      	movs	r1, r7
 8000bb4:	0030      	movs	r0, r6
 8000bb6:	f7ff ff31 	bl	8000a1c <I2C_IsErrorOccurred>
 8000bba:	2800      	cmp	r0, #0
 8000bbc:	d129      	bne.n	8000c12 <I2C_WaitOnFlagUntilTimeout+0x7a>
    if (Timeout != HAL_MAX_DELAY)
 8000bbe:	1c7b      	adds	r3, r7, #1
 8000bc0:	d10c      	bne.n	8000bdc <I2C_WaitOnFlagUntilTimeout+0x44>
 8000bc2:	6833      	ldr	r3, [r6, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000bc4:	699c      	ldr	r4, [r3, #24]
 8000bc6:	402c      	ands	r4, r5
 8000bc8:	1b64      	subs	r4, r4, r5
 8000bca:	4263      	negs	r3, r4
 8000bcc:	415c      	adcs	r4, r3
 8000bce:	4544      	cmp	r4, r8
 8000bd0:	d0ee      	beq.n	8000bb0 <I2C_WaitOnFlagUntilTimeout+0x18>
  return HAL_OK;
 8000bd2:	2000      	movs	r0, #0
}
 8000bd4:	bcc0      	pop	{r6, r7}
 8000bd6:	46b9      	mov	r9, r7
 8000bd8:	46b0      	mov	r8, r6
 8000bda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000bdc:	f7ff fdb8 	bl	8000750 <HAL_GetTick>
 8000be0:	464b      	mov	r3, r9
 8000be2:	1ac0      	subs	r0, r0, r3
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8000be4:	6833      	ldr	r3, [r6, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000be6:	42b8      	cmp	r0, r7
 8000be8:	d801      	bhi.n	8000bee <I2C_WaitOnFlagUntilTimeout+0x56>
 8000bea:	2f00      	cmp	r7, #0
 8000bec:	d1ea      	bne.n	8000bc4 <I2C_WaitOnFlagUntilTimeout+0x2c>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8000bee:	699a      	ldr	r2, [r3, #24]
 8000bf0:	402a      	ands	r2, r5
 8000bf2:	1b52      	subs	r2, r2, r5
 8000bf4:	4251      	negs	r1, r2
 8000bf6:	414a      	adcs	r2, r1
 8000bf8:	4542      	cmp	r2, r8
 8000bfa:	d1e3      	bne.n	8000bc4 <I2C_WaitOnFlagUntilTimeout+0x2c>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000bfc:	2220      	movs	r2, #32
 8000bfe:	6c73      	ldr	r3, [r6, #68]	@ 0x44
 8000c00:	4313      	orrs	r3, r2
 8000c02:	6473      	str	r3, [r6, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8000c04:	2341      	movs	r3, #65	@ 0x41
 8000c06:	54f2      	strb	r2, [r6, r3]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	3222      	adds	r2, #34	@ 0x22
 8000c0c:	54b3      	strb	r3, [r6, r2]
          __HAL_UNLOCK(hi2c);
 8000c0e:	3a02      	subs	r2, #2
 8000c10:	54b3      	strb	r3, [r6, r2]
      return HAL_ERROR;
 8000c12:	2001      	movs	r0, #1
 8000c14:	e7de      	b.n	8000bd4 <I2C_WaitOnFlagUntilTimeout+0x3c>
 8000c16:	46c0      	nop			@ (mov r8, r8)

08000c18 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8000c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000c1a:	6803      	ldr	r3, [r0, #0]
{
 8000c1c:	0006      	movs	r6, r0
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000c1e:	699b      	ldr	r3, [r3, #24]
{
 8000c20:	000c      	movs	r4, r1
 8000c22:	0017      	movs	r7, r2
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8000c24:	2520      	movs	r5, #32
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000c26:	069b      	lsls	r3, r3, #26
 8000c28:	d510      	bpl.n	8000c4c <I2C_WaitOnSTOPFlagUntilTimeout+0x34>
 8000c2a:	e018      	b.n	8000c5e <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000c2c:	f7ff fd90 	bl	8000750 <HAL_GetTick>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8000c30:	6833      	ldr	r3, [r6, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000c32:	1bc0      	subs	r0, r0, r7
 8000c34:	42a0      	cmp	r0, r4
 8000c36:	d801      	bhi.n	8000c3c <I2C_WaitOnSTOPFlagUntilTimeout+0x24>
 8000c38:	2c00      	cmp	r4, #0
 8000c3a:	d104      	bne.n	8000c46 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8000c3c:	0029      	movs	r1, r5
 8000c3e:	699a      	ldr	r2, [r3, #24]
 8000c40:	4011      	ands	r1, r2
 8000c42:	4215      	tst	r5, r2
 8000c44:	d00d      	beq.n	8000c62 <I2C_WaitOnSTOPFlagUntilTimeout+0x4a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000c46:	699b      	ldr	r3, [r3, #24]
 8000c48:	421d      	tst	r5, r3
 8000c4a:	d108      	bne.n	8000c5e <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8000c4c:	003a      	movs	r2, r7
 8000c4e:	0021      	movs	r1, r4
 8000c50:	0030      	movs	r0, r6
 8000c52:	f7ff fee3 	bl	8000a1c <I2C_IsErrorOccurred>
 8000c56:	2800      	cmp	r0, #0
 8000c58:	d0e8      	beq.n	8000c2c <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
      return HAL_ERROR;
 8000c5a:	2001      	movs	r0, #1
}
 8000c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 8000c5e:	2000      	movs	r0, #0
 8000c60:	e7fc      	b.n	8000c5c <I2C_WaitOnSTOPFlagUntilTimeout+0x44>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000c62:	6c73      	ldr	r3, [r6, #68]	@ 0x44
 8000c64:	432b      	orrs	r3, r5
 8000c66:	6473      	str	r3, [r6, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8000c68:	2341      	movs	r3, #65	@ 0x41
 8000c6a:	54f5      	strb	r5, [r6, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	54f1      	strb	r1, [r6, r3]
        __HAL_UNLOCK(hi2c);
 8000c70:	3b02      	subs	r3, #2
 8000c72:	54f1      	strb	r1, [r6, r3]
        return HAL_ERROR;
 8000c74:	e7f1      	b.n	8000c5a <I2C_WaitOnSTOPFlagUntilTimeout+0x42>
 8000c76:	46c0      	nop			@ (mov r8, r8)

08000c78 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8000c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c7a:	46ce      	mov	lr, r9
 8000c7c:	4647      	mov	r7, r8
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8000c7e:	6803      	ldr	r3, [r0, #0]
{
 8000c80:	0004      	movs	r4, r0
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8000c82:	699b      	ldr	r3, [r3, #24]
{
 8000c84:	000d      	movs	r5, r1
 8000c86:	0016      	movs	r6, r2
 8000c88:	b580      	push	{r7, lr}
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8000c8a:	075b      	lsls	r3, r3, #29
 8000c8c:	d444      	bmi.n	8000d18 <I2C_WaitOnRXNEFlagUntilTimeout+0xa0>
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8000c8e:	2320      	movs	r3, #32
 8000c90:	4698      	mov	r8, r3
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000c92:	3b10      	subs	r3, #16
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8000c94:	2704      	movs	r7, #4
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000c96:	4699      	mov	r9, r3
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8000c98:	0032      	movs	r2, r6
 8000c9a:	0029      	movs	r1, r5
 8000c9c:	0020      	movs	r0, r4
 8000c9e:	f7ff febd 	bl	8000a1c <I2C_IsErrorOccurred>
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8000ca2:	6823      	ldr	r3, [r4, #0]
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8000ca4:	2800      	cmp	r0, #0
 8000ca6:	d121      	bne.n	8000cec <I2C_WaitOnRXNEFlagUntilTimeout+0x74>
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8000ca8:	4641      	mov	r1, r8
 8000caa:	699a      	ldr	r2, [r3, #24]
 8000cac:	4211      	tst	r1, r2
 8000cae:	d028      	beq.n	8000d02 <I2C_WaitOnRXNEFlagUntilTimeout+0x8a>
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000cb0:	4649      	mov	r1, r9
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8000cb2:	699a      	ldr	r2, [r3, #24]
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000cb4:	699a      	ldr	r2, [r3, #24]
 8000cb6:	4011      	ands	r1, r2
 8000cb8:	468c      	mov	ip, r1
 8000cba:	4649      	mov	r1, r9
 8000cbc:	4211      	tst	r1, r2
 8000cbe:	d01e      	beq.n	8000cfe <I2C_WaitOnRXNEFlagUntilTimeout+0x86>
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000cc0:	2204      	movs	r2, #4
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000cc2:	61d9      	str	r1, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000cc4:	6462      	str	r2, [r4, #68]	@ 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000cc6:	4642      	mov	r2, r8
 8000cc8:	61da      	str	r2, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8000cca:	685a      	ldr	r2, [r3, #4]
 8000ccc:	491f      	ldr	r1, [pc, #124]	@ (8000d4c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8000cce:	400a      	ands	r2, r1
 8000cd0:	605a      	str	r2, [r3, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 8000cd2:	2341      	movs	r3, #65	@ 0x41
 8000cd4:	4642      	mov	r2, r8
 8000cd6:	54e2      	strb	r2, [r4, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000cd8:	3301      	adds	r3, #1
 8000cda:	54e0      	strb	r0, [r4, r3]
        __HAL_UNLOCK(hi2c);
 8000cdc:	3b02      	subs	r3, #2
 8000cde:	54e0      	strb	r0, [r4, r3]
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8000ce0:	f7ff fd36 	bl	8000750 <HAL_GetTick>
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8000ce4:	6823      	ldr	r3, [r4, #0]
      status = HAL_ERROR;
 8000ce6:	2001      	movs	r0, #1
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8000ce8:	699b      	ldr	r3, [r3, #24]
 8000cea:	e016      	b.n	8000d1a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8000cec:	699b      	ldr	r3, [r3, #24]
 8000cee:	069b      	lsls	r3, r3, #26
 8000cf0:	d4f6      	bmi.n	8000ce0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8000cf2:	f7ff fd2d 	bl	8000750 <HAL_GetTick>
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8000cf6:	6823      	ldr	r3, [r4, #0]
      status = HAL_ERROR;
 8000cf8:	2001      	movs	r0, #1
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8000cfa:	699b      	ldr	r3, [r3, #24]
 8000cfc:	e00d      	b.n	8000d1a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000cfe:	4663      	mov	r3, ip
 8000d00:	6463      	str	r3, [r4, #68]	@ 0x44
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8000d02:	f7ff fd25 	bl	8000750 <HAL_GetTick>
 8000d06:	6823      	ldr	r3, [r4, #0]
 8000d08:	1b80      	subs	r0, r0, r6
 8000d0a:	4285      	cmp	r5, r0
 8000d0c:	d309      	bcc.n	8000d22 <I2C_WaitOnRXNEFlagUntilTimeout+0xaa>
 8000d0e:	2d00      	cmp	r5, #0
 8000d10:	d007      	beq.n	8000d22 <I2C_WaitOnRXNEFlagUntilTimeout+0xaa>
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	075b      	lsls	r3, r3, #29
 8000d16:	d5bf      	bpl.n	8000c98 <I2C_WaitOnRXNEFlagUntilTimeout+0x20>
  HAL_StatusTypeDef status = HAL_OK;
 8000d18:	2000      	movs	r0, #0
}
 8000d1a:	bcc0      	pop	{r6, r7}
 8000d1c:	46b9      	mov	r9, r7
 8000d1e:	46b0      	mov	r8, r6
 8000d20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8000d22:	0039      	movs	r1, r7
 8000d24:	699a      	ldr	r2, [r3, #24]
 8000d26:	4011      	ands	r1, r2
 8000d28:	4217      	tst	r7, r2
 8000d2a:	d10a      	bne.n	8000d42 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000d2c:	2020      	movs	r0, #32
 8000d2e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8000d30:	4302      	orrs	r2, r0
 8000d32:	6462      	str	r2, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8000d34:	2241      	movs	r2, #65	@ 0x41
 8000d36:	54a0      	strb	r0, [r4, r2]
        __HAL_UNLOCK(hi2c);
 8000d38:	3a01      	subs	r2, #1
 8000d3a:	54a1      	strb	r1, [r4, r2]
      status = HAL_ERROR;
 8000d3c:	2001      	movs	r0, #1
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8000d3e:	699b      	ldr	r3, [r3, #24]
 8000d40:	e7eb      	b.n	8000d1a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
 8000d42:	699b      	ldr	r3, [r3, #24]
 8000d44:	421f      	tst	r7, r3
 8000d46:	d0a7      	beq.n	8000c98 <I2C_WaitOnRXNEFlagUntilTimeout+0x20>
 8000d48:	e7e6      	b.n	8000d18 <I2C_WaitOnRXNEFlagUntilTimeout+0xa0>
 8000d4a:	46c0      	nop			@ (mov r8, r8)
 8000d4c:	fe00e800 	.word	0xfe00e800

08000d50 <HAL_I2C_Init>:
{
 8000d50:	b510      	push	{r4, lr}
 8000d52:	1e04      	subs	r4, r0, #0
  if (hi2c == NULL)
 8000d54:	d052      	beq.n	8000dfc <HAL_I2C_Init+0xac>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000d56:	2341      	movs	r3, #65	@ 0x41
 8000d58:	5cc3      	ldrb	r3, [r0, r3]
 8000d5a:	b2da      	uxtb	r2, r3
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d048      	beq.n	8000df2 <HAL_I2C_Init+0xa2>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000d60:	2341      	movs	r3, #65	@ 0x41
 8000d62:	2224      	movs	r2, #36	@ 0x24
  __HAL_I2C_DISABLE(hi2c);
 8000d64:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000d66:	54e2      	strb	r2, [r4, r3]
  __HAL_I2C_DISABLE(hi2c);
 8000d68:	6823      	ldr	r3, [r4, #0]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000d6a:	68a0      	ldr	r0, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	438a      	bics	r2, r1
 8000d70:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000d72:	4923      	ldr	r1, [pc, #140]	@ (8000e00 <HAL_I2C_Init+0xb0>)
 8000d74:	6862      	ldr	r2, [r4, #4]
 8000d76:	400a      	ands	r2, r1
 8000d78:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000d7a:	689a      	ldr	r2, [r3, #8]
 8000d7c:	4921      	ldr	r1, [pc, #132]	@ (8000e04 <HAL_I2C_Init+0xb4>)
 8000d7e:	400a      	ands	r2, r1
 8000d80:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000d82:	68e2      	ldr	r2, [r4, #12]
 8000d84:	2a01      	cmp	r2, #1
 8000d86:	d00b      	beq.n	8000da0 <HAL_I2C_Init+0x50>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000d88:	2184      	movs	r1, #132	@ 0x84
 8000d8a:	0209      	lsls	r1, r1, #8
 8000d8c:	4301      	orrs	r1, r0
 8000d8e:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000d90:	2a02      	cmp	r2, #2
 8000d92:	d109      	bne.n	8000da8 <HAL_I2C_Init+0x58>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000d94:	2280      	movs	r2, #128	@ 0x80
 8000d96:	6859      	ldr	r1, [r3, #4]
 8000d98:	0112      	lsls	r2, r2, #4
 8000d9a:	430a      	orrs	r2, r1
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	e007      	b.n	8000db0 <HAL_I2C_Init+0x60>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000da0:	2280      	movs	r2, #128	@ 0x80
 8000da2:	0212      	lsls	r2, r2, #8
 8000da4:	4302      	orrs	r2, r0
 8000da6:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000da8:	685a      	ldr	r2, [r3, #4]
 8000daa:	4917      	ldr	r1, [pc, #92]	@ (8000e08 <HAL_I2C_Init+0xb8>)
 8000dac:	400a      	ands	r2, r1
 8000dae:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000db0:	6859      	ldr	r1, [r3, #4]
 8000db2:	4a16      	ldr	r2, [pc, #88]	@ (8000e0c <HAL_I2C_Init+0xbc>)
  return HAL_OK;
 8000db4:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000db6:	430a      	orrs	r2, r1
 8000db8:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000dba:	68da      	ldr	r2, [r3, #12]
 8000dbc:	4911      	ldr	r1, [pc, #68]	@ (8000e04 <HAL_I2C_Init+0xb4>)
 8000dbe:	400a      	ands	r2, r1
 8000dc0:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000dc2:	6961      	ldr	r1, [r4, #20]
 8000dc4:	6922      	ldr	r2, [r4, #16]
 8000dc6:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000dc8:	69a1      	ldr	r1, [r4, #24]
 8000dca:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000dcc:	430a      	orrs	r2, r1
 8000dce:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000dd0:	6a21      	ldr	r1, [r4, #32]
 8000dd2:	69e2      	ldr	r2, [r4, #28]
 8000dd4:	430a      	orrs	r2, r1
  __HAL_I2C_ENABLE(hi2c);
 8000dd6:	2101      	movs	r1, #1
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000dd8:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	430a      	orrs	r2, r1
 8000dde:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000de0:	2300      	movs	r3, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8000de2:	2241      	movs	r2, #65	@ 0x41
 8000de4:	311f      	adds	r1, #31
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000de6:	6463      	str	r3, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000de8:	54a1      	strb	r1, [r4, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000dea:	3201      	adds	r2, #1
  hi2c->PreviousState = I2C_STATE_NONE;
 8000dec:	6323      	str	r3, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000dee:	54a3      	strb	r3, [r4, r2]
}
 8000df0:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8000df2:	3340      	adds	r3, #64	@ 0x40
 8000df4:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_MspInit(hi2c);
 8000df6:	f7ff fb55 	bl	80004a4 <HAL_I2C_MspInit>
 8000dfa:	e7b1      	b.n	8000d60 <HAL_I2C_Init+0x10>
    return HAL_ERROR;
 8000dfc:	2001      	movs	r0, #1
 8000dfe:	e7f7      	b.n	8000df0 <HAL_I2C_Init+0xa0>
 8000e00:	f0ffffff 	.word	0xf0ffffff
 8000e04:	ffff7fff 	.word	0xffff7fff
 8000e08:	fffff7ff 	.word	0xfffff7ff
 8000e0c:	02008000 	.word	0x02008000

08000e10 <HAL_I2C_Master_Transmit>:
{
 8000e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e12:	464f      	mov	r7, r9
 8000e14:	46d6      	mov	lr, sl
 8000e16:	4646      	mov	r6, r8
 8000e18:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e1a:	2341      	movs	r3, #65	@ 0x41
{
 8000e1c:	b5c0      	push	{r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e1e:	469a      	mov	sl, r3
 8000e20:	5cc3      	ldrb	r3, [r0, r3]
{
 8000e22:	b082      	sub	sp, #8
 8000e24:	0004      	movs	r4, r0
 8000e26:	000f      	movs	r7, r1
 8000e28:	4690      	mov	r8, r2
 8000e2a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e2c:	2b20      	cmp	r3, #32
 8000e2e:	d000      	beq.n	8000e32 <HAL_I2C_Master_Transmit+0x22>
 8000e30:	e084      	b.n	8000f3c <HAL_I2C_Master_Transmit+0x12c>
    __HAL_LOCK(hi2c);
 8000e32:	3320      	adds	r3, #32
 8000e34:	5cc2      	ldrb	r2, [r0, r3]
 8000e36:	2a01      	cmp	r2, #1
 8000e38:	d100      	bne.n	8000e3c <HAL_I2C_Master_Transmit+0x2c>
 8000e3a:	e07f      	b.n	8000f3c <HAL_I2C_Master_Transmit+0x12c>
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	54c2      	strb	r2, [r0, r3]
    tickstart = HAL_GetTick();
 8000e40:	f7ff fc86 	bl	8000750 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000e44:	2180      	movs	r1, #128	@ 0x80
    tickstart = HAL_GetTick();
 8000e46:	0006      	movs	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000e48:	9000      	str	r0, [sp, #0]
 8000e4a:	2319      	movs	r3, #25
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	0020      	movs	r0, r4
 8000e50:	0209      	lsls	r1, r1, #8
 8000e52:	f7ff fea1 	bl	8000b98 <I2C_WaitOnFlagUntilTimeout>
 8000e56:	2800      	cmp	r0, #0
 8000e58:	d169      	bne.n	8000f2e <HAL_I2C_Master_Transmit+0x11e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000e5a:	2321      	movs	r3, #33	@ 0x21
 8000e5c:	4652      	mov	r2, sl
 8000e5e:	54a3      	strb	r3, [r4, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000e60:	2210      	movs	r2, #16
 8000e62:	3321      	adds	r3, #33	@ 0x21
 8000e64:	54e2      	strb	r2, [r4, r3]
    hi2c->pBuffPtr  = pData;
 8000e66:	4643      	mov	r3, r8
 8000e68:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 8000e6a:	464b      	mov	r3, r9
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e6c:	6460      	str	r0, [r4, #68]	@ 0x44
    hi2c->XferCount = Size;
 8000e6e:	8563      	strh	r3, [r4, #42]	@ 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000e70:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8000e72:	05bf      	lsls	r7, r7, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8000e74:	6822      	ldr	r2, [r4, #0]
    hi2c->XferISR   = NULL;
 8000e76:	6360      	str	r0, [r4, #52]	@ 0x34
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8000e78:	0dbf      	lsrs	r7, r7, #22
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000e7a:	2bff      	cmp	r3, #255	@ 0xff
 8000e7c:	d860      	bhi.n	8000f40 <HAL_I2C_Master_Transmit+0x130>
      hi2c->XferSize = hi2c->XferCount;
 8000e7e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8000e80:	b29b      	uxth	r3, r3
      xfermode = I2C_AUTOEND_MODE;
 8000e82:	8523      	strh	r3, [r4, #40]	@ 0x28
    if (hi2c->XferSize > 0U)
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d000      	beq.n	8000e8a <HAL_I2C_Master_Transmit+0x7a>
 8000e88:	e08a      	b.n	8000fa0 <HAL_I2C_Master_Transmit+0x190>
  MODIFY_REG(hi2c->Instance->CR2, \
 8000e8a:	6853      	ldr	r3, [r2, #4]
 8000e8c:	4949      	ldr	r1, [pc, #292]	@ (8000fb4 <HAL_I2C_Master_Transmit+0x1a4>)
 8000e8e:	400b      	ands	r3, r1
 8000e90:	4949      	ldr	r1, [pc, #292]	@ (8000fb8 <HAL_I2C_Master_Transmit+0x1a8>)
 8000e92:	433b      	orrs	r3, r7
 8000e94:	430b      	orrs	r3, r1
 8000e96:	6053      	str	r3, [r2, #4]
    while (hi2c->XferCount > 0U)
 8000e98:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000e9a:	0032      	movs	r2, r6
 8000e9c:	0029      	movs	r1, r5
 8000e9e:	0020      	movs	r0, r4
    while (hi2c->XferCount > 0U)
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d032      	beq.n	8000f0a <HAL_I2C_Master_Transmit+0xfa>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000ea4:	f7ff fe48 	bl	8000b38 <I2C_WaitOnTXISFlagUntilTimeout>
 8000ea8:	2800      	cmp	r0, #0
 8000eaa:	d140      	bne.n	8000f2e <HAL_I2C_Master_Transmit+0x11e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000eac:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8000eae:	6822      	ldr	r2, [r4, #0]
 8000eb0:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8000eb2:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000eb4:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8000eb6:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8000eb8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8000eba:	3b01      	subs	r3, #1
 8000ebc:	b29b      	uxth	r3, r3
 8000ebe:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8000ec0:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000ec2:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8000ec4:	3b01      	subs	r3, #1
 8000ec6:	b29b      	uxth	r3, r3
 8000ec8:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000eca:	2a00      	cmp	r2, #0
 8000ecc:	d0e4      	beq.n	8000e98 <HAL_I2C_Master_Transmit+0x88>
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d1e2      	bne.n	8000e98 <HAL_I2C_Master_Transmit+0x88>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000ed2:	002b      	movs	r3, r5
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	2180      	movs	r1, #128	@ 0x80
 8000ed8:	0020      	movs	r0, r4
 8000eda:	9600      	str	r6, [sp, #0]
 8000edc:	f7ff fe5c 	bl	8000b98 <I2C_WaitOnFlagUntilTimeout>
 8000ee0:	2800      	cmp	r0, #0
 8000ee2:	d124      	bne.n	8000f2e <HAL_I2C_Master_Transmit+0x11e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000ee4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8000ee6:	6822      	ldr	r2, [r4, #0]
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000ee8:	2bff      	cmp	r3, #255	@ 0xff
 8000eea:	d94a      	bls.n	8000f82 <HAL_I2C_Master_Transmit+0x172>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000eec:	23ff      	movs	r3, #255	@ 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 8000eee:	4933      	ldr	r1, [pc, #204]	@ (8000fbc <HAL_I2C_Master_Transmit+0x1ac>)
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000ef0:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8000ef2:	6853      	ldr	r3, [r2, #4]
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000ef4:	0020      	movs	r0, r4
  MODIFY_REG(hi2c->Instance->CR2, \
 8000ef6:	400b      	ands	r3, r1
 8000ef8:	4931      	ldr	r1, [pc, #196]	@ (8000fc0 <HAL_I2C_Master_Transmit+0x1b0>)
 8000efa:	433b      	orrs	r3, r7
 8000efc:	430b      	orrs	r3, r1
 8000efe:	6053      	str	r3, [r2, #4]
    while (hi2c->XferCount > 0U)
 8000f00:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f02:	0032      	movs	r2, r6
 8000f04:	0029      	movs	r1, r5
    while (hi2c->XferCount > 0U)
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d1cc      	bne.n	8000ea4 <HAL_I2C_Master_Transmit+0x94>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f0a:	f7ff fe85 	bl	8000c18 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000f0e:	2800      	cmp	r0, #0
 8000f10:	d10d      	bne.n	8000f2e <HAL_I2C_Master_Transmit+0x11e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000f12:	2120      	movs	r1, #32
 8000f14:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8000f16:	4d2b      	ldr	r5, [pc, #172]	@ (8000fc4 <HAL_I2C_Master_Transmit+0x1b4>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000f18:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8000f1a:	685a      	ldr	r2, [r3, #4]
 8000f1c:	402a      	ands	r2, r5
 8000f1e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8000f20:	2341      	movs	r3, #65	@ 0x41
 8000f22:	54e1      	strb	r1, [r4, r3]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000f24:	3301      	adds	r3, #1
 8000f26:	54e0      	strb	r0, [r4, r3]
    __HAL_UNLOCK(hi2c);
 8000f28:	3b02      	subs	r3, #2
 8000f2a:	54e0      	strb	r0, [r4, r3]
    return HAL_OK;
 8000f2c:	e000      	b.n	8000f30 <HAL_I2C_Master_Transmit+0x120>
      return HAL_ERROR;
 8000f2e:	2001      	movs	r0, #1
}
 8000f30:	b002      	add	sp, #8
 8000f32:	bce0      	pop	{r5, r6, r7}
 8000f34:	46ba      	mov	sl, r7
 8000f36:	46b1      	mov	r9, r6
 8000f38:	46a8      	mov	r8, r5
 8000f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 8000f3c:	2002      	movs	r0, #2
 8000f3e:	e7f7      	b.n	8000f30 <HAL_I2C_Master_Transmit+0x120>
 8000f40:	23ff      	movs	r3, #255	@ 0xff
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000f42:	21fe      	movs	r1, #254	@ 0xfe
      xfermode = I2C_RELOAD_MODE;
 8000f44:	2080      	movs	r0, #128	@ 0x80
 8000f46:	8523      	strh	r3, [r4, #40]	@ 0x28
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000f48:	23ff      	movs	r3, #255	@ 0xff
 8000f4a:	468c      	mov	ip, r1
 8000f4c:	041b      	lsls	r3, r3, #16
      xfermode = I2C_RELOAD_MODE;
 8000f4e:	0440      	lsls	r0, r0, #17
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000f50:	4641      	mov	r1, r8
 8000f52:	7809      	ldrb	r1, [r1, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8000f54:	433b      	orrs	r3, r7
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000f56:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8000f58:	4641      	mov	r1, r8
 8000f5a:	3101      	adds	r1, #1
 8000f5c:	6261      	str	r1, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8000f5e:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8000f60:	4698      	mov	r8, r3
      hi2c->XferCount--;
 8000f62:	3901      	subs	r1, #1
 8000f64:	b289      	uxth	r1, r1
 8000f66:	8561      	strh	r1, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8000f68:	4661      	mov	r1, ip
  MODIFY_REG(hi2c->Instance->CR2, \
 8000f6a:	4b12      	ldr	r3, [pc, #72]	@ (8000fb4 <HAL_I2C_Master_Transmit+0x1a4>)
      hi2c->XferSize--;
 8000f6c:	8521      	strh	r1, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8000f6e:	6851      	ldr	r1, [r2, #4]
 8000f70:	4019      	ands	r1, r3
 8000f72:	4643      	mov	r3, r8
 8000f74:	430b      	orrs	r3, r1
 8000f76:	2180      	movs	r1, #128	@ 0x80
 8000f78:	4303      	orrs	r3, r0
 8000f7a:	0189      	lsls	r1, r1, #6
 8000f7c:	430b      	orrs	r3, r1
 8000f7e:	6053      	str	r3, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8000f80:	e78a      	b.n	8000e98 <HAL_I2C_Master_Transmit+0x88>
          hi2c->XferSize = hi2c->XferCount;
 8000f82:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8000f84:	480d      	ldr	r0, [pc, #52]	@ (8000fbc <HAL_I2C_Master_Transmit+0x1ac>)
          hi2c->XferSize = hi2c->XferCount;
 8000f86:	b29b      	uxth	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 8000f88:	6851      	ldr	r1, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 8000f8a:	8523      	strh	r3, [r4, #40]	@ 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	041b      	lsls	r3, r3, #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8000f90:	4001      	ands	r1, r0
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8000f92:	433b      	orrs	r3, r7
  MODIFY_REG(hi2c->Instance->CR2, \
 8000f94:	430b      	orrs	r3, r1
 8000f96:	2180      	movs	r1, #128	@ 0x80
 8000f98:	0489      	lsls	r1, r1, #18
 8000f9a:	430b      	orrs	r3, r1
 8000f9c:	6053      	str	r3, [r2, #4]
}
 8000f9e:	e77b      	b.n	8000e98 <HAL_I2C_Master_Transmit+0x88>
      xfermode = I2C_AUTOEND_MODE;
 8000fa0:	2080      	movs	r0, #128	@ 0x80
      hi2c->XferSize--;
 8000fa2:	3b01      	subs	r3, #1
 8000fa4:	b29b      	uxth	r3, r3
 8000fa6:	469c      	mov	ip, r3
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8000fa8:	3301      	adds	r3, #1
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	041b      	lsls	r3, r3, #16
      xfermode = I2C_AUTOEND_MODE;
 8000fae:	0480      	lsls	r0, r0, #18
 8000fb0:	e7ce      	b.n	8000f50 <HAL_I2C_Master_Transmit+0x140>
 8000fb2:	46c0      	nop			@ (mov r8, r8)
 8000fb4:	fc009800 	.word	0xfc009800
 8000fb8:	02002000 	.word	0x02002000
 8000fbc:	fc009c00 	.word	0xfc009c00
 8000fc0:	01ff0000 	.word	0x01ff0000
 8000fc4:	fe00e800 	.word	0xfe00e800

08000fc8 <HAL_I2C_Master_Receive>:
{
 8000fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fca:	464f      	mov	r7, r9
 8000fcc:	46d6      	mov	lr, sl
 8000fce:	4646      	mov	r6, r8
 8000fd0:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000fd2:	2341      	movs	r3, #65	@ 0x41
{
 8000fd4:	b5c0      	push	{r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000fd6:	469a      	mov	sl, r3
 8000fd8:	5cc3      	ldrb	r3, [r0, r3]
{
 8000fda:	b082      	sub	sp, #8
 8000fdc:	0004      	movs	r4, r0
 8000fde:	000f      	movs	r7, r1
 8000fe0:	4691      	mov	r9, r2
 8000fe2:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000fe4:	2b20      	cmp	r3, #32
 8000fe6:	d000      	beq.n	8000fea <HAL_I2C_Master_Receive+0x22>
 8000fe8:	e085      	b.n	80010f6 <HAL_I2C_Master_Receive+0x12e>
    __HAL_LOCK(hi2c);
 8000fea:	3320      	adds	r3, #32
 8000fec:	5cc2      	ldrb	r2, [r0, r3]
 8000fee:	2a01      	cmp	r2, #1
 8000ff0:	d100      	bne.n	8000ff4 <HAL_I2C_Master_Receive+0x2c>
 8000ff2:	e080      	b.n	80010f6 <HAL_I2C_Master_Receive+0x12e>
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	54c2      	strb	r2, [r0, r3]
    tickstart = HAL_GetTick();
 8000ff8:	f7ff fbaa 	bl	8000750 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000ffc:	2180      	movs	r1, #128	@ 0x80
    tickstart = HAL_GetTick();
 8000ffe:	0006      	movs	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001000:	9000      	str	r0, [sp, #0]
 8001002:	2319      	movs	r3, #25
 8001004:	2201      	movs	r2, #1
 8001006:	0020      	movs	r0, r4
 8001008:	0209      	lsls	r1, r1, #8
 800100a:	f7ff fdc5 	bl	8000b98 <I2C_WaitOnFlagUntilTimeout>
 800100e:	2800      	cmp	r0, #0
 8001010:	d16a      	bne.n	80010e8 <HAL_I2C_Master_Receive+0x120>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001012:	2322      	movs	r3, #34	@ 0x22
 8001014:	4652      	mov	r2, sl
 8001016:	54a3      	strb	r3, [r4, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001018:	2210      	movs	r2, #16
 800101a:	3320      	adds	r3, #32
 800101c:	54e2      	strb	r2, [r4, r3]
    hi2c->pBuffPtr  = pData;
 800101e:	464b      	mov	r3, r9
 8001020:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001022:	4643      	mov	r3, r8
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001024:	6460      	str	r0, [r4, #68]	@ 0x44
    hi2c->XferCount = Size;
 8001026:	8563      	strh	r3, [r4, #42]	@ 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001028:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800102a:	05bf      	lsls	r7, r7, #22
  MODIFY_REG(hi2c->Instance->CR2, \
 800102c:	6822      	ldr	r2, [r4, #0]
    hi2c->XferISR   = NULL;
 800102e:	6360      	str	r0, [r4, #52]	@ 0x34
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001030:	0dbf      	lsrs	r7, r7, #22
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001032:	2bff      	cmp	r3, #255	@ 0xff
 8001034:	d861      	bhi.n	80010fa <HAL_I2C_Master_Receive+0x132>
      hi2c->XferSize = hi2c->XferCount;
 8001036:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8001038:	483c      	ldr	r0, [pc, #240]	@ (800112c <HAL_I2C_Master_Receive+0x164>)
      hi2c->XferSize = hi2c->XferCount;
 800103a:	b29b      	uxth	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 800103c:	6851      	ldr	r1, [r2, #4]
      hi2c->XferSize = hi2c->XferCount;
 800103e:	8523      	strh	r3, [r4, #40]	@ 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001040:	b2db      	uxtb	r3, r3
 8001042:	041b      	lsls	r3, r3, #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8001044:	4001      	ands	r1, r0
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001046:	433b      	orrs	r3, r7
  MODIFY_REG(hi2c->Instance->CR2, \
 8001048:	430b      	orrs	r3, r1
 800104a:	4939      	ldr	r1, [pc, #228]	@ (8001130 <HAL_I2C_Master_Receive+0x168>)
 800104c:	430b      	orrs	r3, r1
 800104e:	6053      	str	r3, [r2, #4]
    while (hi2c->XferCount > 0U)
 8001050:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001052:	0032      	movs	r2, r6
 8001054:	0029      	movs	r1, r5
 8001056:	0020      	movs	r0, r4
    while (hi2c->XferCount > 0U)
 8001058:	2b00      	cmp	r3, #0
 800105a:	d033      	beq.n	80010c4 <HAL_I2C_Master_Receive+0xfc>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800105c:	f7ff fe0c 	bl	8000c78 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001060:	2800      	cmp	r0, #0
 8001062:	d141      	bne.n	80010e8 <HAL_I2C_Master_Receive+0x120>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001064:	6823      	ldr	r3, [r4, #0]
 8001066:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001068:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800106a:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 800106c:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
      hi2c->pBuffPtr++;
 800106e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8001070:	3901      	subs	r1, #1
      hi2c->pBuffPtr++;
 8001072:	3301      	adds	r3, #1
 8001074:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8001076:	b289      	uxth	r1, r1
      hi2c->XferSize--;
 8001078:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 800107a:	8561      	strh	r1, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800107c:	3b01      	subs	r3, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800107e:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8001080:	b29b      	uxth	r3, r3
 8001082:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001084:	2a00      	cmp	r2, #0
 8001086:	d0e3      	beq.n	8001050 <HAL_I2C_Master_Receive+0x88>
 8001088:	2b00      	cmp	r3, #0
 800108a:	d1e1      	bne.n	8001050 <HAL_I2C_Master_Receive+0x88>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800108c:	002b      	movs	r3, r5
 800108e:	2200      	movs	r2, #0
 8001090:	2180      	movs	r1, #128	@ 0x80
 8001092:	0020      	movs	r0, r4
 8001094:	9600      	str	r6, [sp, #0]
 8001096:	f7ff fd7f 	bl	8000b98 <I2C_WaitOnFlagUntilTimeout>
 800109a:	2800      	cmp	r0, #0
 800109c:	d124      	bne.n	80010e8 <HAL_I2C_Master_Receive+0x120>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800109e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 80010a0:	6822      	ldr	r2, [r4, #0]
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80010a2:	2bff      	cmp	r3, #255	@ 0xff
 80010a4:	d933      	bls.n	800110e <HAL_I2C_Master_Receive+0x146>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80010a6:	23ff      	movs	r3, #255	@ 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 80010a8:	4922      	ldr	r1, [pc, #136]	@ (8001134 <HAL_I2C_Master_Receive+0x16c>)
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80010aa:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 80010ac:	6853      	ldr	r3, [r2, #4]
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80010ae:	0020      	movs	r0, r4
  MODIFY_REG(hi2c->Instance->CR2, \
 80010b0:	400b      	ands	r3, r1
 80010b2:	4921      	ldr	r1, [pc, #132]	@ (8001138 <HAL_I2C_Master_Receive+0x170>)
 80010b4:	433b      	orrs	r3, r7
 80010b6:	430b      	orrs	r3, r1
 80010b8:	6053      	str	r3, [r2, #4]
    while (hi2c->XferCount > 0U)
 80010ba:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80010bc:	0032      	movs	r2, r6
 80010be:	0029      	movs	r1, r5
    while (hi2c->XferCount > 0U)
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d1cb      	bne.n	800105c <HAL_I2C_Master_Receive+0x94>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80010c4:	f7ff fda8 	bl	8000c18 <I2C_WaitOnSTOPFlagUntilTimeout>
 80010c8:	2800      	cmp	r0, #0
 80010ca:	d10d      	bne.n	80010e8 <HAL_I2C_Master_Receive+0x120>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80010cc:	2120      	movs	r1, #32
 80010ce:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 80010d0:	4d1a      	ldr	r5, [pc, #104]	@ (800113c <HAL_I2C_Master_Receive+0x174>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80010d2:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80010d4:	685a      	ldr	r2, [r3, #4]
 80010d6:	402a      	ands	r2, r5
 80010d8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80010da:	2341      	movs	r3, #65	@ 0x41
 80010dc:	54e1      	strb	r1, [r4, r3]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80010de:	3301      	adds	r3, #1
 80010e0:	54e0      	strb	r0, [r4, r3]
    __HAL_UNLOCK(hi2c);
 80010e2:	3b02      	subs	r3, #2
 80010e4:	54e0      	strb	r0, [r4, r3]
    return HAL_OK;
 80010e6:	e000      	b.n	80010ea <HAL_I2C_Master_Receive+0x122>
      return HAL_ERROR;
 80010e8:	2001      	movs	r0, #1
}
 80010ea:	b002      	add	sp, #8
 80010ec:	bce0      	pop	{r5, r6, r7}
 80010ee:	46ba      	mov	sl, r7
 80010f0:	46b1      	mov	r9, r6
 80010f2:	46a8      	mov	r8, r5
 80010f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 80010f6:	2002      	movs	r0, #2
 80010f8:	e7f7      	b.n	80010ea <HAL_I2C_Master_Receive+0x122>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80010fa:	23ff      	movs	r3, #255	@ 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 80010fc:	490b      	ldr	r1, [pc, #44]	@ (800112c <HAL_I2C_Master_Receive+0x164>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80010fe:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8001100:	6853      	ldr	r3, [r2, #4]
 8001102:	400b      	ands	r3, r1
 8001104:	490e      	ldr	r1, [pc, #56]	@ (8001140 <HAL_I2C_Master_Receive+0x178>)
 8001106:	433b      	orrs	r3, r7
 8001108:	430b      	orrs	r3, r1
 800110a:	6053      	str	r3, [r2, #4]
}
 800110c:	e7a0      	b.n	8001050 <HAL_I2C_Master_Receive+0x88>
          hi2c->XferSize = hi2c->XferCount;
 800110e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8001110:	4808      	ldr	r0, [pc, #32]	@ (8001134 <HAL_I2C_Master_Receive+0x16c>)
          hi2c->XferSize = hi2c->XferCount;
 8001112:	b29b      	uxth	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 8001114:	6851      	ldr	r1, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 8001116:	8523      	strh	r3, [r4, #40]	@ 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001118:	b2db      	uxtb	r3, r3
 800111a:	041b      	lsls	r3, r3, #16
  MODIFY_REG(hi2c->Instance->CR2, \
 800111c:	4001      	ands	r1, r0
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800111e:	433b      	orrs	r3, r7
  MODIFY_REG(hi2c->Instance->CR2, \
 8001120:	430b      	orrs	r3, r1
 8001122:	2180      	movs	r1, #128	@ 0x80
 8001124:	0489      	lsls	r1, r1, #18
 8001126:	430b      	orrs	r3, r1
 8001128:	6053      	str	r3, [r2, #4]
}
 800112a:	e791      	b.n	8001050 <HAL_I2C_Master_Receive+0x88>
 800112c:	fc009800 	.word	0xfc009800
 8001130:	02002400 	.word	0x02002400
 8001134:	fc009c00 	.word	0xfc009c00
 8001138:	01ff0000 	.word	0x01ff0000
 800113c:	fe00e800 	.word	0xfe00e800
 8001140:	01ff2400 	.word	0x01ff2400

08001144 <HAL_I2C_Mem_Write>:
{
 8001144:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001146:	4657      	mov	r7, sl
 8001148:	464e      	mov	r6, r9
 800114a:	46de      	mov	lr, fp
 800114c:	4645      	mov	r5, r8
 800114e:	b5e0      	push	{r5, r6, r7, lr}
 8001150:	b083      	sub	sp, #12
 8001152:	001f      	movs	r7, r3
 8001154:	ab0c      	add	r3, sp, #48	@ 0x30
 8001156:	0016      	movs	r6, r2
 8001158:	cb04      	ldmia	r3!, {r2}
 800115a:	0004      	movs	r4, r0
 800115c:	881b      	ldrh	r3, [r3, #0]
 800115e:	000d      	movs	r5, r1
 8001160:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001162:	2341      	movs	r3, #65	@ 0x41
 8001164:	4699      	mov	r9, r3
 8001166:	5cc3      	ldrb	r3, [r0, r3]
{
 8001168:	4692      	mov	sl, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800116a:	2b20      	cmp	r3, #32
 800116c:	d123      	bne.n	80011b6 <HAL_I2C_Mem_Write+0x72>
    if ((pData == NULL) || (Size == 0U))
 800116e:	2a00      	cmp	r2, #0
 8001170:	d01d      	beq.n	80011ae <HAL_I2C_Mem_Write+0x6a>
 8001172:	465b      	mov	r3, fp
 8001174:	2b00      	cmp	r3, #0
 8001176:	d01a      	beq.n	80011ae <HAL_I2C_Mem_Write+0x6a>
    __HAL_LOCK(hi2c);
 8001178:	2240      	movs	r2, #64	@ 0x40
 800117a:	5c83      	ldrb	r3, [r0, r2]
 800117c:	2b01      	cmp	r3, #1
 800117e:	d01a      	beq.n	80011b6 <HAL_I2C_Mem_Write+0x72>
 8001180:	2301      	movs	r3, #1
 8001182:	5483      	strb	r3, [r0, r2]
    tickstart = HAL_GetTick();
 8001184:	f7ff fae4 	bl	8000750 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001188:	2180      	movs	r1, #128	@ 0x80
    tickstart = HAL_GetTick();
 800118a:	4680      	mov	r8, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800118c:	9000      	str	r0, [sp, #0]
 800118e:	2319      	movs	r3, #25
 8001190:	2201      	movs	r2, #1
 8001192:	0020      	movs	r0, r4
 8001194:	0209      	lsls	r1, r1, #8
 8001196:	f7ff fcff 	bl	8000b98 <I2C_WaitOnFlagUntilTimeout>
 800119a:	2800      	cmp	r0, #0
 800119c:	d00d      	beq.n	80011ba <HAL_I2C_Mem_Write+0x76>
      return  HAL_ERROR;
 800119e:	2001      	movs	r0, #1
}
 80011a0:	b003      	add	sp, #12
 80011a2:	bcf0      	pop	{r4, r5, r6, r7}
 80011a4:	46bb      	mov	fp, r7
 80011a6:	46b2      	mov	sl, r6
 80011a8:	46a9      	mov	r9, r5
 80011aa:	46a0      	mov	r8, r4
 80011ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80011ae:	2380      	movs	r3, #128	@ 0x80
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 80011b4:	e7f3      	b.n	800119e <HAL_I2C_Mem_Write+0x5a>
    __HAL_LOCK(hi2c);
 80011b6:	2002      	movs	r0, #2
 80011b8:	e7f2      	b.n	80011a0 <HAL_I2C_Mem_Write+0x5c>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80011ba:	2321      	movs	r3, #33	@ 0x21
 80011bc:	464a      	mov	r2, r9
 80011be:	54a3      	strb	r3, [r4, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80011c0:	2240      	movs	r2, #64	@ 0x40
 80011c2:	3321      	adds	r3, #33	@ 0x21
 80011c4:	54e2      	strb	r2, [r4, r3]
    hi2c->pBuffPtr  = pData;
 80011c6:	4653      	mov	r3, sl
 80011c8:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 80011ca:	465b      	mov	r3, fp
  MODIFY_REG(hi2c->Instance->CR2, \
 80011cc:	6821      	ldr	r1, [r4, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011ce:	6460      	str	r0, [r4, #68]	@ 0x44
    hi2c->XferCount = Size;
 80011d0:	8563      	strh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 80011d2:	684a      	ldr	r2, [r1, #4]
    hi2c->XferISR   = NULL;
 80011d4:	6360      	str	r0, [r4, #52]	@ 0x34
  MODIFY_REG(hi2c->Instance->CR2, \
 80011d6:	4854      	ldr	r0, [pc, #336]	@ (8001328 <HAL_I2C_Mem_Write+0x1e4>)
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80011d8:	b2fb      	uxtb	r3, r7
  MODIFY_REG(hi2c->Instance->CR2, \
 80011da:	4002      	ands	r2, r0
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80011dc:	05ad      	lsls	r5, r5, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80011de:	041b      	lsls	r3, r3, #16
  MODIFY_REG(hi2c->Instance->CR2, \
 80011e0:	4313      	orrs	r3, r2
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80011e2:	0dad      	lsrs	r5, r5, #22
  MODIFY_REG(hi2c->Instance->CR2, \
 80011e4:	4a51      	ldr	r2, [pc, #324]	@ (800132c <HAL_I2C_Mem_Write+0x1e8>)
 80011e6:	432b      	orrs	r3, r5
 80011e8:	4313      	orrs	r3, r2
 80011ea:	604b      	str	r3, [r1, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80011ec:	4642      	mov	r2, r8
 80011ee:	0020      	movs	r0, r4
 80011f0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80011f2:	f7ff fca1 	bl	8000b38 <I2C_WaitOnTXISFlagUntilTimeout>
 80011f6:	2800      	cmp	r0, #0
 80011f8:	d157      	bne.n	80012aa <HAL_I2C_Mem_Write+0x166>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80011fa:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80011fc:	2f01      	cmp	r7, #1
 80011fe:	d163      	bne.n	80012c8 <HAL_I2C_Mem_Write+0x184>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001200:	b2f6      	uxtb	r6, r6
 8001202:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001204:	4643      	mov	r3, r8
 8001206:	2200      	movs	r2, #0
 8001208:	9300      	str	r3, [sp, #0]
 800120a:	2180      	movs	r1, #128	@ 0x80
 800120c:	0020      	movs	r0, r4
 800120e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8001210:	f7ff fcc2 	bl	8000b98 <I2C_WaitOnFlagUntilTimeout>
 8001214:	2800      	cmp	r0, #0
 8001216:	d148      	bne.n	80012aa <HAL_I2C_Mem_Write+0x166>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001218:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 800121a:	6822      	ldr	r2, [r4, #0]
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800121c:	2bff      	cmp	r3, #255	@ 0xff
 800121e:	d848      	bhi.n	80012b2 <HAL_I2C_Mem_Write+0x16e>
      hi2c->XferSize = hi2c->XferCount;
 8001220:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8001222:	4843      	ldr	r0, [pc, #268]	@ (8001330 <HAL_I2C_Mem_Write+0x1ec>)
      hi2c->XferSize = hi2c->XferCount;
 8001224:	b29b      	uxth	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 8001226:	6851      	ldr	r1, [r2, #4]
      hi2c->XferSize = hi2c->XferCount;
 8001228:	8523      	strh	r3, [r4, #40]	@ 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800122a:	b2db      	uxtb	r3, r3
 800122c:	041b      	lsls	r3, r3, #16
  MODIFY_REG(hi2c->Instance->CR2, \
 800122e:	4001      	ands	r1, r0
 8001230:	432b      	orrs	r3, r5
 8001232:	430b      	orrs	r3, r1
 8001234:	2180      	movs	r1, #128	@ 0x80
 8001236:	0489      	lsls	r1, r1, #18
 8001238:	430b      	orrs	r3, r1
 800123a:	4646      	mov	r6, r8
 800123c:	6053      	str	r3, [r2, #4]
}
 800123e:	e002      	b.n	8001246 <HAL_I2C_Mem_Write+0x102>
    } while (hi2c->XferCount > 0U);
 8001240:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001242:	2b00      	cmp	r3, #0
 8001244:	d05a      	beq.n	80012fc <HAL_I2C_Mem_Write+0x1b8>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001246:	0032      	movs	r2, r6
 8001248:	0020      	movs	r0, r4
 800124a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800124c:	f7ff fc74 	bl	8000b38 <I2C_WaitOnTXISFlagUntilTimeout>
 8001250:	2800      	cmp	r0, #0
 8001252:	d1a4      	bne.n	800119e <HAL_I2C_Mem_Write+0x5a>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001254:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001256:	6822      	ldr	r2, [r4, #0]
 8001258:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 800125a:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800125c:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 800125e:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8001260:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001262:	3b01      	subs	r3, #1
 8001264:	b29b      	uxth	r3, r3
 8001266:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8001268:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800126a:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800126c:	3b01      	subs	r3, #1
 800126e:	b29b      	uxth	r3, r3
 8001270:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001272:	2a00      	cmp	r2, #0
 8001274:	d0e4      	beq.n	8001240 <HAL_I2C_Mem_Write+0xfc>
 8001276:	2b00      	cmp	r3, #0
 8001278:	d1e2      	bne.n	8001240 <HAL_I2C_Mem_Write+0xfc>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800127a:	2200      	movs	r2, #0
 800127c:	2180      	movs	r1, #128	@ 0x80
 800127e:	0020      	movs	r0, r4
 8001280:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8001282:	9600      	str	r6, [sp, #0]
 8001284:	f7ff fc88 	bl	8000b98 <I2C_WaitOnFlagUntilTimeout>
 8001288:	2800      	cmp	r0, #0
 800128a:	d000      	beq.n	800128e <HAL_I2C_Mem_Write+0x14a>
 800128c:	e787      	b.n	800119e <HAL_I2C_Mem_Write+0x5a>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800128e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8001290:	6822      	ldr	r2, [r4, #0]
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001292:	2bff      	cmp	r3, #255	@ 0xff
 8001294:	d923      	bls.n	80012de <HAL_I2C_Mem_Write+0x19a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001296:	23ff      	movs	r3, #255	@ 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 8001298:	4925      	ldr	r1, [pc, #148]	@ (8001330 <HAL_I2C_Mem_Write+0x1ec>)
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800129a:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 800129c:	6853      	ldr	r3, [r2, #4]
 800129e:	400b      	ands	r3, r1
 80012a0:	4924      	ldr	r1, [pc, #144]	@ (8001334 <HAL_I2C_Mem_Write+0x1f0>)
 80012a2:	432b      	orrs	r3, r5
 80012a4:	430b      	orrs	r3, r1
 80012a6:	6053      	str	r3, [r2, #4]
}
 80012a8:	e7ca      	b.n	8001240 <HAL_I2C_Mem_Write+0xfc>
      __HAL_UNLOCK(hi2c);
 80012aa:	2340      	movs	r3, #64	@ 0x40
 80012ac:	2200      	movs	r2, #0
 80012ae:	54e2      	strb	r2, [r4, r3]
      return HAL_ERROR;
 80012b0:	e775      	b.n	800119e <HAL_I2C_Mem_Write+0x5a>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80012b2:	23ff      	movs	r3, #255	@ 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 80012b4:	491e      	ldr	r1, [pc, #120]	@ (8001330 <HAL_I2C_Mem_Write+0x1ec>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80012b6:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 80012b8:	6853      	ldr	r3, [r2, #4]
 80012ba:	4646      	mov	r6, r8
 80012bc:	400b      	ands	r3, r1
 80012be:	491d      	ldr	r1, [pc, #116]	@ (8001334 <HAL_I2C_Mem_Write+0x1f0>)
 80012c0:	432b      	orrs	r3, r5
 80012c2:	430b      	orrs	r3, r1
 80012c4:	6053      	str	r3, [r2, #4]
}
 80012c6:	e7be      	b.n	8001246 <HAL_I2C_Mem_Write+0x102>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80012c8:	0a32      	lsrs	r2, r6, #8
 80012ca:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80012cc:	0020      	movs	r0, r4
 80012ce:	4642      	mov	r2, r8
 80012d0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80012d2:	f7ff fc31 	bl	8000b38 <I2C_WaitOnTXISFlagUntilTimeout>
 80012d6:	2800      	cmp	r0, #0
 80012d8:	d1e7      	bne.n	80012aa <HAL_I2C_Mem_Write+0x166>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80012da:	6823      	ldr	r3, [r4, #0]
 80012dc:	e790      	b.n	8001200 <HAL_I2C_Mem_Write+0xbc>
          hi2c->XferSize = hi2c->XferCount;
 80012de:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 80012e0:	4813      	ldr	r0, [pc, #76]	@ (8001330 <HAL_I2C_Mem_Write+0x1ec>)
          hi2c->XferSize = hi2c->XferCount;
 80012e2:	b29b      	uxth	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 80012e4:	6851      	ldr	r1, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 80012e6:	8523      	strh	r3, [r4, #40]	@ 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	041b      	lsls	r3, r3, #16
  MODIFY_REG(hi2c->Instance->CR2, \
 80012ec:	4001      	ands	r1, r0
 80012ee:	432b      	orrs	r3, r5
 80012f0:	430b      	orrs	r3, r1
 80012f2:	2180      	movs	r1, #128	@ 0x80
 80012f4:	0489      	lsls	r1, r1, #18
 80012f6:	430b      	orrs	r3, r1
 80012f8:	6053      	str	r3, [r2, #4]
}
 80012fa:	e7a1      	b.n	8001240 <HAL_I2C_Mem_Write+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012fc:	0032      	movs	r2, r6
 80012fe:	0020      	movs	r0, r4
 8001300:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8001302:	f7ff fc89 	bl	8000c18 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001306:	2800      	cmp	r0, #0
 8001308:	d000      	beq.n	800130c <HAL_I2C_Mem_Write+0x1c8>
 800130a:	e748      	b.n	800119e <HAL_I2C_Mem_Write+0x5a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800130c:	2120      	movs	r1, #32
 800130e:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8001310:	4d09      	ldr	r5, [pc, #36]	@ (8001338 <HAL_I2C_Mem_Write+0x1f4>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001312:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001314:	685a      	ldr	r2, [r3, #4]
 8001316:	402a      	ands	r2, r5
 8001318:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800131a:	2341      	movs	r3, #65	@ 0x41
 800131c:	54e1      	strb	r1, [r4, r3]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800131e:	3301      	adds	r3, #1
 8001320:	54e0      	strb	r0, [r4, r3]
    __HAL_UNLOCK(hi2c);
 8001322:	3b02      	subs	r3, #2
 8001324:	54e0      	strb	r0, [r4, r3]
    return HAL_OK;
 8001326:	e73b      	b.n	80011a0 <HAL_I2C_Mem_Write+0x5c>
 8001328:	fc009800 	.word	0xfc009800
 800132c:	01002000 	.word	0x01002000
 8001330:	fc009c00 	.word	0xfc009c00
 8001334:	01ff0000 	.word	0x01ff0000
 8001338:	fe00e800 	.word	0xfe00e800

0800133c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800133c:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800133e:	2441      	movs	r4, #65	@ 0x41
 8001340:	5d03      	ldrb	r3, [r0, r4]
{
 8001342:	468c      	mov	ip, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001344:	b2dd      	uxtb	r5, r3
 8001346:	2b20      	cmp	r3, #32
 8001348:	d11a      	bne.n	8001380 <HAL_I2CEx_ConfigAnalogFilter+0x44>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800134a:	2640      	movs	r6, #64	@ 0x40
 800134c:	5d83      	ldrb	r3, [r0, r6]
 800134e:	2b01      	cmp	r3, #1
 8001350:	d016      	beq.n	8001380 <HAL_I2CEx_ConfigAnalogFilter+0x44>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001352:	2324      	movs	r3, #36	@ 0x24

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001354:	2701      	movs	r7, #1
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001356:	5503      	strb	r3, [r0, r4]
    __HAL_I2C_DISABLE(hi2c);
 8001358:	6803      	ldr	r3, [r0, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800135a:	490a      	ldr	r1, [pc, #40]	@ (8001384 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
    __HAL_I2C_DISABLE(hi2c);
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	43ba      	bics	r2, r7
 8001360:	601a      	str	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	400a      	ands	r2, r1
 8001366:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001368:	4662      	mov	r2, ip
 800136a:	6819      	ldr	r1, [r3, #0]
 800136c:	4311      	orrs	r1, r2
 800136e:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	433a      	orrs	r2, r7
 8001374:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001376:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001378:	5505      	strb	r5, [r0, r4]
    __HAL_UNLOCK(hi2c);
 800137a:	5583      	strb	r3, [r0, r6]

    return HAL_OK;
 800137c:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 800137e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 8001380:	2002      	movs	r0, #2
 8001382:	e7fc      	b.n	800137e <HAL_I2CEx_ConfigAnalogFilter+0x42>
 8001384:	ffffefff 	.word	0xffffefff

08001388 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800138a:	46ce      	mov	lr, r9
 800138c:	4647      	mov	r7, r8

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800138e:	2441      	movs	r4, #65	@ 0x41
{
 8001390:	b580      	push	{r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001392:	5d03      	ldrb	r3, [r0, r4]
 8001394:	b2dd      	uxtb	r5, r3
 8001396:	2b20      	cmp	r3, #32
 8001398:	d11f      	bne.n	80013da <HAL_I2CEx_ConfigDigitalFilter+0x52>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800139a:	2640      	movs	r6, #64	@ 0x40
 800139c:	5d83      	ldrb	r3, [r0, r6]
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d01b      	beq.n	80013da <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80013a2:	2324      	movs	r3, #36	@ 0x24

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80013a4:	2701      	movs	r7, #1
    hi2c->State = HAL_I2C_STATE_BUSY;
 80013a6:	5503      	strb	r3, [r0, r4]
    __HAL_I2C_DISABLE(hi2c);
 80013a8:	6802      	ldr	r2, [r0, #0]
 80013aa:	46b9      	mov	r9, r7
 80013ac:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80013ae:	0209      	lsls	r1, r1, #8
    __HAL_I2C_DISABLE(hi2c);
 80013b0:	43bb      	bics	r3, r7
 80013b2:	6013      	str	r3, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
 80013b4:	6813      	ldr	r3, [r2, #0]
 80013b6:	4698      	mov	r8, r3
    tmpreg &= ~(I2C_CR1_DNF);
 80013b8:	4647      	mov	r7, r8
 80013ba:	4b09      	ldr	r3, [pc, #36]	@ (80013e0 <HAL_I2CEx_ConfigDigitalFilter+0x58>)
 80013bc:	401f      	ands	r7, r3
    tmpreg |= DigitalFilter << 8U;
 80013be:	4339      	orrs	r1, r7

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80013c0:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 80013c2:	4649      	mov	r1, r9
 80013c4:	6813      	ldr	r3, [r2, #0]
 80013c6:	430b      	orrs	r3, r1
 80013c8:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013ca:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80013cc:	5505      	strb	r5, [r0, r4]
    __HAL_UNLOCK(hi2c);
 80013ce:	5583      	strb	r3, [r0, r6]

    return HAL_OK;
 80013d0:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 80013d2:	bcc0      	pop	{r6, r7}
 80013d4:	46b9      	mov	r9, r7
 80013d6:	46b0      	mov	r8, r6
 80013d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 80013da:	2002      	movs	r0, #2
 80013dc:	e7f9      	b.n	80013d2 <HAL_I2CEx_ConfigDigitalFilter+0x4a>
 80013de:	46c0      	nop			@ (mov r8, r8)
 80013e0:	fffff0ff 	.word	0xfffff0ff

080013e4 <HAL_I2CEx_EnableFastModePlus>:
{
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013e4:	2301      	movs	r3, #1
 80013e6:	4a07      	ldr	r2, [pc, #28]	@ (8001404 <HAL_I2CEx_EnableFastModePlus+0x20>)
{
 80013e8:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ea:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 80013ec:	4319      	orrs	r1, r3
 80013ee:	6411      	str	r1, [r2, #64]	@ 0x40
 80013f0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80013f2:	4013      	ands	r3, r2

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 80013f4:	4a04      	ldr	r2, [pc, #16]	@ (8001408 <HAL_I2CEx_EnableFastModePlus+0x24>)
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f6:	9301      	str	r3, [sp, #4]
 80013f8:	9b01      	ldr	r3, [sp, #4]
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 80013fa:	6813      	ldr	r3, [r2, #0]
 80013fc:	4303      	orrs	r3, r0
 80013fe:	6013      	str	r3, [r2, #0]
}
 8001400:	b002      	add	sp, #8
 8001402:	4770      	bx	lr
 8001404:	40021000 	.word	0x40021000
 8001408:	40010000 	.word	0x40010000

0800140c <HAL_PWR_EnableBkUpAccess>:
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800140c:	2380      	movs	r3, #128	@ 0x80
 800140e:	4a03      	ldr	r2, [pc, #12]	@ (800141c <HAL_PWR_EnableBkUpAccess+0x10>)
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	6811      	ldr	r1, [r2, #0]
 8001414:	430b      	orrs	r3, r1
 8001416:	6013      	str	r3, [r2, #0]
}
 8001418:	4770      	bx	lr
 800141a:	46c0      	nop			@ (mov r8, r8)
 800141c:	40007000 	.word	0x40007000

08001420 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001420:	b570      	push	{r4, r5, r6, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001422:	4c13      	ldr	r4, [pc, #76]	@ (8001470 <HAL_PWREx_ControlVoltageScaling+0x50>)
 8001424:	4a13      	ldr	r2, [pc, #76]	@ (8001474 <HAL_PWREx_ControlVoltageScaling+0x54>)
 8001426:	6823      	ldr	r3, [r4, #0]
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8001428:	2500      	movs	r5, #0
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800142a:	4013      	ands	r3, r2
 800142c:	4303      	orrs	r3, r0
 800142e:	6023      	str	r3, [r4, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001430:	2380      	movs	r3, #128	@ 0x80
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	4298      	cmp	r0, r3
 8001436:	d001      	beq.n	800143c <HAL_PWREx_ControlVoltageScaling+0x1c>
}
 8001438:	0028      	movs	r0, r5
 800143a:	bd70      	pop	{r4, r5, r6, pc}
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800143c:	4b0e      	ldr	r3, [pc, #56]	@ (8001478 <HAL_PWREx_ControlVoltageScaling+0x58>)
 800143e:	490f      	ldr	r1, [pc, #60]	@ (800147c <HAL_PWREx_ControlVoltageScaling+0x5c>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	0058      	lsls	r0, r3, #1
 8001444:	18c0      	adds	r0, r0, r3
 8001446:	0040      	lsls	r0, r0, #1
 8001448:	f7fe fe6c 	bl	8000124 <__udivsi3>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800144c:	2280      	movs	r2, #128	@ 0x80
 800144e:	6963      	ldr	r3, [r4, #20]
 8001450:	00d2      	lsls	r2, r2, #3
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001452:	3001      	adds	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001454:	4213      	tst	r3, r2
 8001456:	d102      	bne.n	800145e <HAL_PWREx_ControlVoltageScaling+0x3e>
 8001458:	e7ee      	b.n	8001438 <HAL_PWREx_ControlVoltageScaling+0x18>
      if (wait_loop_index != 0U)
 800145a:	2800      	cmp	r0, #0
 800145c:	d005      	beq.n	800146a <HAL_PWREx_ControlVoltageScaling+0x4a>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800145e:	6963      	ldr	r3, [r4, #20]
        wait_loop_index--;
 8001460:	3801      	subs	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001462:	4213      	tst	r3, r2
 8001464:	d1f9      	bne.n	800145a <HAL_PWREx_ControlVoltageScaling+0x3a>
  return HAL_OK;
 8001466:	2500      	movs	r5, #0
 8001468:	e7e6      	b.n	8001438 <HAL_PWREx_ControlVoltageScaling+0x18>
        return HAL_TIMEOUT;
 800146a:	2503      	movs	r5, #3
 800146c:	e7e4      	b.n	8001438 <HAL_PWREx_ControlVoltageScaling+0x18>
 800146e:	46c0      	nop			@ (mov r8, r8)
 8001470:	40007000 	.word	0x40007000
 8001474:	fffff9ff 	.word	0xfffff9ff
 8001478:	20000000 	.word	0x20000000
 800147c:	000f4240 	.word	0x000f4240

08001480 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001482:	46ce      	mov	lr, r9
 8001484:	4647      	mov	r7, r8
 8001486:	b580      	push	{r7, lr}
 8001488:	0004      	movs	r4, r0
 800148a:	b083      	sub	sp, #12
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800148c:	2800      	cmp	r0, #0
 800148e:	d027      	beq.n	80014e0 <HAL_RCC_OscConfig+0x60>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001490:	6803      	ldr	r3, [r0, #0]
 8001492:	07da      	lsls	r2, r3, #31
 8001494:	d511      	bpl.n	80014ba <HAL_RCC_OscConfig+0x3a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001496:	2238      	movs	r2, #56	@ 0x38
 8001498:	49c0      	ldr	r1, [pc, #768]	@ (800179c <HAL_RCC_OscConfig+0x31c>)
 800149a:	6888      	ldr	r0, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800149c:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800149e:	4002      	ands	r2, r0

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80014a0:	2a10      	cmp	r2, #16
 80014a2:	d100      	bne.n	80014a6 <HAL_RCC_OscConfig+0x26>
 80014a4:	e0cc      	b.n	8001640 <HAL_RCC_OscConfig+0x1c0>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80014a6:	2a08      	cmp	r2, #8
 80014a8:	d000      	beq.n	80014ac <HAL_RCC_OscConfig+0x2c>
 80014aa:	e0cd      	b.n	8001648 <HAL_RCC_OscConfig+0x1c8>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014ac:	4abb      	ldr	r2, [pc, #748]	@ (800179c <HAL_RCC_OscConfig+0x31c>)
 80014ae:	6812      	ldr	r2, [r2, #0]
 80014b0:	0392      	lsls	r2, r2, #14
 80014b2:	d502      	bpl.n	80014ba <HAL_RCC_OscConfig+0x3a>
 80014b4:	6862      	ldr	r2, [r4, #4]
 80014b6:	2a00      	cmp	r2, #0
 80014b8:	d012      	beq.n	80014e0 <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014ba:	079a      	lsls	r2, r3, #30
 80014bc:	d532      	bpl.n	8001524 <HAL_RCC_OscConfig+0xa4>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014be:	2338      	movs	r3, #56	@ 0x38
 80014c0:	4ab6      	ldr	r2, [pc, #728]	@ (800179c <HAL_RCC_OscConfig+0x31c>)
 80014c2:	6891      	ldr	r1, [r2, #8]
 80014c4:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014c6:	68d1      	ldr	r1, [r2, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80014c8:	2b10      	cmp	r3, #16
 80014ca:	d100      	bne.n	80014ce <HAL_RCC_OscConfig+0x4e>
 80014cc:	e10b      	b.n	80016e6 <HAL_RCC_OscConfig+0x266>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d000      	beq.n	80014d4 <HAL_RCC_OscConfig+0x54>
 80014d2:	e10d      	b.n	80016f0 <HAL_RCC_OscConfig+0x270>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014d4:	6813      	ldr	r3, [r2, #0]
 80014d6:	055b      	lsls	r3, r3, #21
 80014d8:	d508      	bpl.n	80014ec <HAL_RCC_OscConfig+0x6c>
 80014da:	68e3      	ldr	r3, [r4, #12]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d105      	bne.n	80014ec <HAL_RCC_OscConfig+0x6c>
    return HAL_ERROR;
 80014e0:	2001      	movs	r0, #1
        }
      }
    }
  }
  return HAL_OK;
}
 80014e2:	b003      	add	sp, #12
 80014e4:	bcc0      	pop	{r6, r7}
 80014e6:	46b9      	mov	r9, r7
 80014e8:	46b0      	mov	r8, r6
 80014ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ec:	6851      	ldr	r1, [r2, #4]
 80014ee:	6963      	ldr	r3, [r4, #20]
 80014f0:	48ab      	ldr	r0, [pc, #684]	@ (80017a0 <HAL_RCC_OscConfig+0x320>)
 80014f2:	021b      	lsls	r3, r3, #8
 80014f4:	4001      	ands	r1, r0
 80014f6:	430b      	orrs	r3, r1
 80014f8:	6053      	str	r3, [r2, #4]
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80014fa:	4aa8      	ldr	r2, [pc, #672]	@ (800179c <HAL_RCC_OscConfig+0x31c>)
 80014fc:	49a9      	ldr	r1, [pc, #676]	@ (80017a4 <HAL_RCC_OscConfig+0x324>)
 80014fe:	6813      	ldr	r3, [r2, #0]
 8001500:	400b      	ands	r3, r1
 8001502:	6921      	ldr	r1, [r4, #16]
 8001504:	430b      	orrs	r3, r1
 8001506:	6013      	str	r3, [r2, #0]
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001508:	6813      	ldr	r3, [r2, #0]
 800150a:	4aa7      	ldr	r2, [pc, #668]	@ (80017a8 <HAL_RCC_OscConfig+0x328>)
 800150c:	049b      	lsls	r3, r3, #18
 800150e:	0f5b      	lsrs	r3, r3, #29
 8001510:	40da      	lsrs	r2, r3
 8001512:	49a6      	ldr	r1, [pc, #664]	@ (80017ac <HAL_RCC_OscConfig+0x32c>)
 8001514:	600a      	str	r2, [r1, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001516:	4ba6      	ldr	r3, [pc, #664]	@ (80017b0 <HAL_RCC_OscConfig+0x330>)
 8001518:	6818      	ldr	r0, [r3, #0]
 800151a:	f7ff f8d3 	bl	80006c4 <HAL_InitTick>
 800151e:	2800      	cmp	r0, #0
 8001520:	d1de      	bne.n	80014e0 <HAL_RCC_OscConfig+0x60>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001522:	6823      	ldr	r3, [r4, #0]
 8001524:	071a      	lsls	r2, r3, #28
 8001526:	d46d      	bmi.n	8001604 <HAL_RCC_OscConfig+0x184>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001528:	075b      	lsls	r3, r3, #29
 800152a:	d545      	bpl.n	80015b8 <HAL_RCC_OscConfig+0x138>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800152c:	2338      	movs	r3, #56	@ 0x38
 800152e:	4a9b      	ldr	r2, [pc, #620]	@ (800179c <HAL_RCC_OscConfig+0x31c>)
 8001530:	6891      	ldr	r1, [r2, #8]
 8001532:	400b      	ands	r3, r1
 8001534:	2b20      	cmp	r3, #32
 8001536:	d100      	bne.n	800153a <HAL_RCC_OscConfig+0xba>
 8001538:	e0cc      	b.n	80016d4 <HAL_RCC_OscConfig+0x254>
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800153a:	2380      	movs	r3, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 800153c:	2000      	movs	r0, #0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800153e:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001540:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8001542:	4681      	mov	r9, r0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001544:	4219      	tst	r1, r3
 8001546:	d108      	bne.n	800155a <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_PWR_CLK_ENABLE();
 8001548:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800154a:	4319      	orrs	r1, r3
 800154c:	63d1      	str	r1, [r2, #60]	@ 0x3c
 800154e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001550:	4013      	ands	r3, r2
 8001552:	9301      	str	r3, [sp, #4]
 8001554:	9b01      	ldr	r3, [sp, #4]
        pwrclkchanged = SET;
 8001556:	2301      	movs	r3, #1
 8001558:	4699      	mov	r9, r3
      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800155a:	2780      	movs	r7, #128	@ 0x80
 800155c:	4e95      	ldr	r6, [pc, #596]	@ (80017b4 <HAL_RCC_OscConfig+0x334>)
 800155e:	007f      	lsls	r7, r7, #1
 8001560:	6833      	ldr	r3, [r6, #0]
 8001562:	423b      	tst	r3, r7
 8001564:	d100      	bne.n	8001568 <HAL_RCC_OscConfig+0xe8>
 8001566:	e0ff      	b.n	8001768 <HAL_RCC_OscConfig+0x2e8>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001568:	68a3      	ldr	r3, [r4, #8]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d100      	bne.n	8001570 <HAL_RCC_OscConfig+0xf0>
 800156e:	e0e5      	b.n	800173c <HAL_RCC_OscConfig+0x2bc>
 8001570:	2b05      	cmp	r3, #5
 8001572:	d100      	bne.n	8001576 <HAL_RCC_OscConfig+0xf6>
 8001574:	e1c8      	b.n	8001908 <HAL_RCC_OscConfig+0x488>
 8001576:	2101      	movs	r1, #1
 8001578:	4e88      	ldr	r6, [pc, #544]	@ (800179c <HAL_RCC_OscConfig+0x31c>)
 800157a:	6df2      	ldr	r2, [r6, #92]	@ 0x5c
 800157c:	438a      	bics	r2, r1
 800157e:	65f2      	str	r2, [r6, #92]	@ 0x5c
 8001580:	6df2      	ldr	r2, [r6, #92]	@ 0x5c
 8001582:	3103      	adds	r1, #3
 8001584:	438a      	bics	r2, r1
 8001586:	65f2      	str	r2, [r6, #92]	@ 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001588:	2b00      	cmp	r3, #0
 800158a:	d000      	beq.n	800158e <HAL_RCC_OscConfig+0x10e>
 800158c:	e0da      	b.n	8001744 <HAL_RCC_OscConfig+0x2c4>
        tickstart = HAL_GetTick();
 800158e:	f7ff f8df 	bl	8000750 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001592:	2302      	movs	r3, #2
        tickstart = HAL_GetTick();
 8001594:	0007      	movs	r7, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001596:	4698      	mov	r8, r3
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001598:	4d87      	ldr	r5, [pc, #540]	@ (80017b8 <HAL_RCC_OscConfig+0x338>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800159a:	e005      	b.n	80015a8 <HAL_RCC_OscConfig+0x128>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800159c:	f7ff f8d8 	bl	8000750 <HAL_GetTick>
 80015a0:	1bc0      	subs	r0, r0, r7
 80015a2:	42a8      	cmp	r0, r5
 80015a4:	d900      	bls.n	80015a8 <HAL_RCC_OscConfig+0x128>
 80015a6:	e0ee      	b.n	8001786 <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015a8:	4642      	mov	r2, r8
 80015aa:	6df3      	ldr	r3, [r6, #92]	@ 0x5c
 80015ac:	421a      	tst	r2, r3
 80015ae:	d1f5      	bne.n	800159c <HAL_RCC_OscConfig+0x11c>
      if (pwrclkchanged == SET)
 80015b0:	464b      	mov	r3, r9
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d100      	bne.n	80015b8 <HAL_RCC_OscConfig+0x138>
 80015b6:	e163      	b.n	8001880 <HAL_RCC_OscConfig+0x400>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80015b8:	69e3      	ldr	r3, [r4, #28]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d020      	beq.n	8001600 <HAL_RCC_OscConfig+0x180>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015be:	2238      	movs	r2, #56	@ 0x38
 80015c0:	4d76      	ldr	r5, [pc, #472]	@ (800179c <HAL_RCC_OscConfig+0x31c>)
 80015c2:	68a9      	ldr	r1, [r5, #8]
 80015c4:	400a      	ands	r2, r1
 80015c6:	2a10      	cmp	r2, #16
 80015c8:	d100      	bne.n	80015cc <HAL_RCC_OscConfig+0x14c>
 80015ca:	e11d      	b.n	8001808 <HAL_RCC_OscConfig+0x388>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d100      	bne.n	80015d2 <HAL_RCC_OscConfig+0x152>
 80015d0:	e15c      	b.n	800188c <HAL_RCC_OscConfig+0x40c>
        __HAL_RCC_PLL_DISABLE();
 80015d2:	682b      	ldr	r3, [r5, #0]
 80015d4:	4a79      	ldr	r2, [pc, #484]	@ (80017bc <HAL_RCC_OscConfig+0x33c>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015d6:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 80015d8:	4013      	ands	r3, r2
 80015da:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80015dc:	f7ff f8b8 	bl	8000750 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015e0:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 80015e2:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015e4:	e005      	b.n	80015f2 <HAL_RCC_OscConfig+0x172>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015e6:	f7ff f8b3 	bl	8000750 <HAL_GetTick>
 80015ea:	1b00      	subs	r0, r0, r4
 80015ec:	2802      	cmp	r0, #2
 80015ee:	d900      	bls.n	80015f2 <HAL_RCC_OscConfig+0x172>
 80015f0:	e0c9      	b.n	8001786 <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015f2:	682b      	ldr	r3, [r5, #0]
 80015f4:	4233      	tst	r3, r6
 80015f6:	d1f6      	bne.n	80015e6 <HAL_RCC_OscConfig+0x166>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80015f8:	68eb      	ldr	r3, [r5, #12]
 80015fa:	4a71      	ldr	r2, [pc, #452]	@ (80017c0 <HAL_RCC_OscConfig+0x340>)
 80015fc:	4013      	ands	r3, r2
 80015fe:	60eb      	str	r3, [r5, #12]
  return HAL_OK;
 8001600:	2000      	movs	r0, #0
 8001602:	e76e      	b.n	80014e2 <HAL_RCC_OscConfig+0x62>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001604:	2238      	movs	r2, #56	@ 0x38
 8001606:	4d65      	ldr	r5, [pc, #404]	@ (800179c <HAL_RCC_OscConfig+0x31c>)
 8001608:	68a9      	ldr	r1, [r5, #8]
 800160a:	400a      	ands	r2, r1
 800160c:	2a18      	cmp	r2, #24
 800160e:	d043      	beq.n	8001698 <HAL_RCC_OscConfig+0x218>
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001610:	69a3      	ldr	r3, [r4, #24]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d100      	bne.n	8001618 <HAL_RCC_OscConfig+0x198>
 8001616:	e0b8      	b.n	800178a <HAL_RCC_OscConfig+0x30a>
        __HAL_RCC_LSI_ENABLE();
 8001618:	2201      	movs	r2, #1
 800161a:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800161c:	2702      	movs	r7, #2
        __HAL_RCC_LSI_ENABLE();
 800161e:	4313      	orrs	r3, r2
 8001620:	662b      	str	r3, [r5, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001622:	f7ff f895 	bl	8000750 <HAL_GetTick>
 8001626:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001628:	e005      	b.n	8001636 <HAL_RCC_OscConfig+0x1b6>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800162a:	f7ff f891 	bl	8000750 <HAL_GetTick>
 800162e:	1b80      	subs	r0, r0, r6
 8001630:	2802      	cmp	r0, #2
 8001632:	d900      	bls.n	8001636 <HAL_RCC_OscConfig+0x1b6>
 8001634:	e0a7      	b.n	8001786 <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001636:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8001638:	421f      	tst	r7, r3
 800163a:	d0f6      	beq.n	800162a <HAL_RCC_OscConfig+0x1aa>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800163c:	6823      	ldr	r3, [r4, #0]
 800163e:	e773      	b.n	8001528 <HAL_RCC_OscConfig+0xa8>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001640:	43c9      	mvns	r1, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001642:	0789      	lsls	r1, r1, #30
 8001644:	d100      	bne.n	8001648 <HAL_RCC_OscConfig+0x1c8>
 8001646:	e731      	b.n	80014ac <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001648:	2280      	movs	r2, #128	@ 0x80
 800164a:	6863      	ldr	r3, [r4, #4]
 800164c:	0252      	lsls	r2, r2, #9
 800164e:	4293      	cmp	r3, r2
 8001650:	d02b      	beq.n	80016aa <HAL_RCC_OscConfig+0x22a>
 8001652:	21a0      	movs	r1, #160	@ 0xa0
 8001654:	02c9      	lsls	r1, r1, #11
 8001656:	428b      	cmp	r3, r1
 8001658:	d100      	bne.n	800165c <HAL_RCC_OscConfig+0x1dc>
 800165a:	e0fc      	b.n	8001856 <HAL_RCC_OscConfig+0x3d6>
 800165c:	4d4f      	ldr	r5, [pc, #316]	@ (800179c <HAL_RCC_OscConfig+0x31c>)
 800165e:	4959      	ldr	r1, [pc, #356]	@ (80017c4 <HAL_RCC_OscConfig+0x344>)
 8001660:	682a      	ldr	r2, [r5, #0]
 8001662:	400a      	ands	r2, r1
 8001664:	602a      	str	r2, [r5, #0]
 8001666:	682a      	ldr	r2, [r5, #0]
 8001668:	4957      	ldr	r1, [pc, #348]	@ (80017c8 <HAL_RCC_OscConfig+0x348>)
 800166a:	400a      	ands	r2, r1
 800166c:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800166e:	2b00      	cmp	r3, #0
 8001670:	d11f      	bne.n	80016b2 <HAL_RCC_OscConfig+0x232>
        tickstart = HAL_GetTick();
 8001672:	f7ff f86d 	bl	8000750 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001676:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 8001678:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800167a:	02bf      	lsls	r7, r7, #10
 800167c:	e004      	b.n	8001688 <HAL_RCC_OscConfig+0x208>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800167e:	f7ff f867 	bl	8000750 <HAL_GetTick>
 8001682:	1b80      	subs	r0, r0, r6
 8001684:	2864      	cmp	r0, #100	@ 0x64
 8001686:	d87e      	bhi.n	8001786 <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001688:	682b      	ldr	r3, [r5, #0]
 800168a:	423b      	tst	r3, r7
 800168c:	d1f7      	bne.n	800167e <HAL_RCC_OscConfig+0x1fe>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800168e:	6823      	ldr	r3, [r4, #0]
 8001690:	079a      	lsls	r2, r3, #30
 8001692:	d400      	bmi.n	8001696 <HAL_RCC_OscConfig+0x216>
 8001694:	e746      	b.n	8001524 <HAL_RCC_OscConfig+0xa4>
 8001696:	e712      	b.n	80014be <HAL_RCC_OscConfig+0x3e>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001698:	6e2a      	ldr	r2, [r5, #96]	@ 0x60
 800169a:	0792      	lsls	r2, r2, #30
 800169c:	d400      	bmi.n	80016a0 <HAL_RCC_OscConfig+0x220>
 800169e:	e743      	b.n	8001528 <HAL_RCC_OscConfig+0xa8>
 80016a0:	69a2      	ldr	r2, [r4, #24]
 80016a2:	2a00      	cmp	r2, #0
 80016a4:	d000      	beq.n	80016a8 <HAL_RCC_OscConfig+0x228>
 80016a6:	e73f      	b.n	8001528 <HAL_RCC_OscConfig+0xa8>
 80016a8:	e71a      	b.n	80014e0 <HAL_RCC_OscConfig+0x60>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016aa:	4a3c      	ldr	r2, [pc, #240]	@ (800179c <HAL_RCC_OscConfig+0x31c>)
 80016ac:	6811      	ldr	r1, [r2, #0]
 80016ae:	430b      	orrs	r3, r1
 80016b0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80016b2:	f7ff f84d 	bl	8000750 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016b6:	2680      	movs	r6, #128	@ 0x80
        tickstart = HAL_GetTick();
 80016b8:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016ba:	4f38      	ldr	r7, [pc, #224]	@ (800179c <HAL_RCC_OscConfig+0x31c>)
 80016bc:	02b6      	lsls	r6, r6, #10
 80016be:	e004      	b.n	80016ca <HAL_RCC_OscConfig+0x24a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016c0:	f7ff f846 	bl	8000750 <HAL_GetTick>
 80016c4:	1b40      	subs	r0, r0, r5
 80016c6:	2864      	cmp	r0, #100	@ 0x64
 80016c8:	d85d      	bhi.n	8001786 <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	4233      	tst	r3, r6
 80016ce:	d0f7      	beq.n	80016c0 <HAL_RCC_OscConfig+0x240>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016d0:	6823      	ldr	r3, [r4, #0]
 80016d2:	e7dd      	b.n	8001690 <HAL_RCC_OscConfig+0x210>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80016d4:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 80016d6:	079b      	lsls	r3, r3, #30
 80016d8:	d400      	bmi.n	80016dc <HAL_RCC_OscConfig+0x25c>
 80016da:	e76d      	b.n	80015b8 <HAL_RCC_OscConfig+0x138>
 80016dc:	68a3      	ldr	r3, [r4, #8]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d000      	beq.n	80016e4 <HAL_RCC_OscConfig+0x264>
 80016e2:	e769      	b.n	80015b8 <HAL_RCC_OscConfig+0x138>
 80016e4:	e6fc      	b.n	80014e0 <HAL_RCC_OscConfig+0x60>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016e6:	3b0d      	subs	r3, #13
 80016e8:	400b      	ands	r3, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d100      	bne.n	80016f0 <HAL_RCC_OscConfig+0x270>
 80016ee:	e0bc      	b.n	800186a <HAL_RCC_OscConfig+0x3ea>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016f0:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80016f2:	4d2a      	ldr	r5, [pc, #168]	@ (800179c <HAL_RCC_OscConfig+0x31c>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d073      	beq.n	80017e0 <HAL_RCC_OscConfig+0x360>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80016f8:	682b      	ldr	r3, [r5, #0]
 80016fa:	4a2a      	ldr	r2, [pc, #168]	@ (80017a4 <HAL_RCC_OscConfig+0x324>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016fc:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80016fe:	4013      	ands	r3, r2
 8001700:	6922      	ldr	r2, [r4, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001702:	00ff      	lsls	r7, r7, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001704:	4313      	orrs	r3, r2
 8001706:	602b      	str	r3, [r5, #0]
        __HAL_RCC_HSI_ENABLE();
 8001708:	2380      	movs	r3, #128	@ 0x80
 800170a:	682a      	ldr	r2, [r5, #0]
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	4313      	orrs	r3, r2
 8001710:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001712:	f7ff f81d 	bl	8000750 <HAL_GetTick>
 8001716:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001718:	e004      	b.n	8001724 <HAL_RCC_OscConfig+0x2a4>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800171a:	f7ff f819 	bl	8000750 <HAL_GetTick>
 800171e:	1b80      	subs	r0, r0, r6
 8001720:	2802      	cmp	r0, #2
 8001722:	d830      	bhi.n	8001786 <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001724:	682b      	ldr	r3, [r5, #0]
 8001726:	423b      	tst	r3, r7
 8001728:	d0f7      	beq.n	800171a <HAL_RCC_OscConfig+0x29a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800172a:	686a      	ldr	r2, [r5, #4]
 800172c:	6963      	ldr	r3, [r4, #20]
 800172e:	491c      	ldr	r1, [pc, #112]	@ (80017a0 <HAL_RCC_OscConfig+0x320>)
 8001730:	021b      	lsls	r3, r3, #8
 8001732:	400a      	ands	r2, r1
 8001734:	4313      	orrs	r3, r2
 8001736:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001738:	6823      	ldr	r3, [r4, #0]
 800173a:	e6f3      	b.n	8001524 <HAL_RCC_OscConfig+0xa4>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800173c:	4917      	ldr	r1, [pc, #92]	@ (800179c <HAL_RCC_OscConfig+0x31c>)
 800173e:	6dca      	ldr	r2, [r1, #92]	@ 0x5c
 8001740:	4313      	orrs	r3, r2
 8001742:	65cb      	str	r3, [r1, #92]	@ 0x5c
        tickstart = HAL_GetTick();
 8001744:	f7ff f804 	bl	8000750 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001748:	4b14      	ldr	r3, [pc, #80]	@ (800179c <HAL_RCC_OscConfig+0x31c>)
        tickstart = HAL_GetTick();
 800174a:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800174c:	4698      	mov	r8, r3
 800174e:	2702      	movs	r7, #2
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001750:	4d19      	ldr	r5, [pc, #100]	@ (80017b8 <HAL_RCC_OscConfig+0x338>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001752:	e004      	b.n	800175e <HAL_RCC_OscConfig+0x2de>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001754:	f7fe fffc 	bl	8000750 <HAL_GetTick>
 8001758:	1b80      	subs	r0, r0, r6
 800175a:	42a8      	cmp	r0, r5
 800175c:	d813      	bhi.n	8001786 <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800175e:	4643      	mov	r3, r8
 8001760:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001762:	421f      	tst	r7, r3
 8001764:	d0f6      	beq.n	8001754 <HAL_RCC_OscConfig+0x2d4>
 8001766:	e723      	b.n	80015b0 <HAL_RCC_OscConfig+0x130>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001768:	6833      	ldr	r3, [r6, #0]
 800176a:	433b      	orrs	r3, r7
 800176c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800176e:	f7fe ffef 	bl	8000750 <HAL_GetTick>
 8001772:	0005      	movs	r5, r0
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001774:	6833      	ldr	r3, [r6, #0]
 8001776:	423b      	tst	r3, r7
 8001778:	d000      	beq.n	800177c <HAL_RCC_OscConfig+0x2fc>
 800177a:	e6f5      	b.n	8001568 <HAL_RCC_OscConfig+0xe8>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800177c:	f7fe ffe8 	bl	8000750 <HAL_GetTick>
 8001780:	1b40      	subs	r0, r0, r5
 8001782:	2802      	cmp	r0, #2
 8001784:	d9f6      	bls.n	8001774 <HAL_RCC_OscConfig+0x2f4>
            return HAL_TIMEOUT;
 8001786:	2003      	movs	r0, #3
 8001788:	e6ab      	b.n	80014e2 <HAL_RCC_OscConfig+0x62>
        __HAL_RCC_LSI_DISABLE();
 800178a:	2201      	movs	r2, #1
 800178c:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800178e:	2702      	movs	r7, #2
        __HAL_RCC_LSI_DISABLE();
 8001790:	4393      	bics	r3, r2
 8001792:	662b      	str	r3, [r5, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001794:	f7fe ffdc 	bl	8000750 <HAL_GetTick>
 8001798:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800179a:	e01c      	b.n	80017d6 <HAL_RCC_OscConfig+0x356>
 800179c:	40021000 	.word	0x40021000
 80017a0:	ffff80ff 	.word	0xffff80ff
 80017a4:	ffffc7ff 	.word	0xffffc7ff
 80017a8:	00f42400 	.word	0x00f42400
 80017ac:	20000000 	.word	0x20000000
 80017b0:	20000008 	.word	0x20000008
 80017b4:	40007000 	.word	0x40007000
 80017b8:	00001388 	.word	0x00001388
 80017bc:	feffffff 	.word	0xfeffffff
 80017c0:	effefffc 	.word	0xeffefffc
 80017c4:	fffeffff 	.word	0xfffeffff
 80017c8:	fffbffff 	.word	0xfffbffff
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017cc:	f7fe ffc0 	bl	8000750 <HAL_GetTick>
 80017d0:	1b80      	subs	r0, r0, r6
 80017d2:	2802      	cmp	r0, #2
 80017d4:	d8d7      	bhi.n	8001786 <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017d6:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 80017d8:	421f      	tst	r7, r3
 80017da:	d1f7      	bne.n	80017cc <HAL_RCC_OscConfig+0x34c>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017dc:	6823      	ldr	r3, [r4, #0]
 80017de:	e6a3      	b.n	8001528 <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_HSI_DISABLE();
 80017e0:	682b      	ldr	r3, [r5, #0]
 80017e2:	4a50      	ldr	r2, [pc, #320]	@ (8001924 <HAL_RCC_OscConfig+0x4a4>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017e4:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI_DISABLE();
 80017e6:	4013      	ands	r3, r2
 80017e8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80017ea:	f7fe ffb1 	bl	8000750 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017ee:	00ff      	lsls	r7, r7, #3
        tickstart = HAL_GetTick();
 80017f0:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017f2:	e004      	b.n	80017fe <HAL_RCC_OscConfig+0x37e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017f4:	f7fe ffac 	bl	8000750 <HAL_GetTick>
 80017f8:	1b80      	subs	r0, r0, r6
 80017fa:	2802      	cmp	r0, #2
 80017fc:	d8c3      	bhi.n	8001786 <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017fe:	682b      	ldr	r3, [r5, #0]
 8001800:	423b      	tst	r3, r7
 8001802:	d1f7      	bne.n	80017f4 <HAL_RCC_OscConfig+0x374>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001804:	6823      	ldr	r3, [r4, #0]
 8001806:	e68d      	b.n	8001524 <HAL_RCC_OscConfig+0xa4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001808:	2b01      	cmp	r3, #1
 800180a:	d100      	bne.n	800180e <HAL_RCC_OscConfig+0x38e>
 800180c:	e668      	b.n	80014e0 <HAL_RCC_OscConfig+0x60>
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800180e:	2203      	movs	r2, #3
        temp_pllckcfg = RCC->PLLCFGR;
 8001810:	68e8      	ldr	r0, [r5, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001812:	6a21      	ldr	r1, [r4, #32]
 8001814:	4002      	ands	r2, r0
 8001816:	428a      	cmp	r2, r1
 8001818:	d000      	beq.n	800181c <HAL_RCC_OscConfig+0x39c>
 800181a:	e661      	b.n	80014e0 <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800181c:	2270      	movs	r2, #112	@ 0x70
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800181e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001820:	4002      	ands	r2, r0
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001822:	428a      	cmp	r2, r1
 8001824:	d000      	beq.n	8001828 <HAL_RCC_OscConfig+0x3a8>
 8001826:	e65b      	b.n	80014e0 <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001828:	21fe      	movs	r1, #254	@ 0xfe
 800182a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800182c:	01c9      	lsls	r1, r1, #7
 800182e:	4001      	ands	r1, r0
 8001830:	0212      	lsls	r2, r2, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001832:	4291      	cmp	r1, r2
 8001834:	d000      	beq.n	8001838 <HAL_RCC_OscConfig+0x3b8>
 8001836:	e653      	b.n	80014e0 <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001838:	22f8      	movs	r2, #248	@ 0xf8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800183a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800183c:	0392      	lsls	r2, r2, #14
 800183e:	4002      	ands	r2, r0
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001840:	428a      	cmp	r2, r1
 8001842:	d000      	beq.n	8001846 <HAL_RCC_OscConfig+0x3c6>
 8001844:	e64c      	b.n	80014e0 <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001846:	6b23      	ldr	r3, [r4, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001848:	0f40      	lsrs	r0, r0, #29
 800184a:	0740      	lsls	r0, r0, #29
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800184c:	1ac0      	subs	r0, r0, r3
 800184e:	1e43      	subs	r3, r0, #1
 8001850:	4198      	sbcs	r0, r3
 8001852:	b2c0      	uxtb	r0, r0
 8001854:	e645      	b.n	80014e2 <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001856:	2180      	movs	r1, #128	@ 0x80
 8001858:	4b33      	ldr	r3, [pc, #204]	@ (8001928 <HAL_RCC_OscConfig+0x4a8>)
 800185a:	02c9      	lsls	r1, r1, #11
 800185c:	6818      	ldr	r0, [r3, #0]
 800185e:	4301      	orrs	r1, r0
 8001860:	6019      	str	r1, [r3, #0]
 8001862:	6819      	ldr	r1, [r3, #0]
 8001864:	430a      	orrs	r2, r1
 8001866:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001868:	e723      	b.n	80016b2 <HAL_RCC_OscConfig+0x232>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800186a:	6813      	ldr	r3, [r2, #0]
 800186c:	055b      	lsls	r3, r3, #21
 800186e:	d455      	bmi.n	800191c <HAL_RCC_OscConfig+0x49c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001870:	6851      	ldr	r1, [r2, #4]
 8001872:	6963      	ldr	r3, [r4, #20]
 8001874:	482d      	ldr	r0, [pc, #180]	@ (800192c <HAL_RCC_OscConfig+0x4ac>)
 8001876:	021b      	lsls	r3, r3, #8
 8001878:	4001      	ands	r1, r0
 800187a:	430b      	orrs	r3, r1
 800187c:	6053      	str	r3, [r2, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800187e:	e64a      	b.n	8001516 <HAL_RCC_OscConfig+0x96>
        __HAL_RCC_PWR_CLK_DISABLE();
 8001880:	4a29      	ldr	r2, [pc, #164]	@ (8001928 <HAL_RCC_OscConfig+0x4a8>)
 8001882:	492b      	ldr	r1, [pc, #172]	@ (8001930 <HAL_RCC_OscConfig+0x4b0>)
 8001884:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8001886:	400b      	ands	r3, r1
 8001888:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800188a:	e695      	b.n	80015b8 <HAL_RCC_OscConfig+0x138>
        __HAL_RCC_PLL_DISABLE();
 800188c:	682b      	ldr	r3, [r5, #0]
 800188e:	4a29      	ldr	r2, [pc, #164]	@ (8001934 <HAL_RCC_OscConfig+0x4b4>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001890:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8001892:	4013      	ands	r3, r2
 8001894:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001896:	f7fe ff5b 	bl	8000750 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800189a:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 800189c:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800189e:	e005      	b.n	80018ac <HAL_RCC_OscConfig+0x42c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018a0:	f7fe ff56 	bl	8000750 <HAL_GetTick>
 80018a4:	1b80      	subs	r0, r0, r6
 80018a6:	2802      	cmp	r0, #2
 80018a8:	d900      	bls.n	80018ac <HAL_RCC_OscConfig+0x42c>
 80018aa:	e76c      	b.n	8001786 <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018ac:	682b      	ldr	r3, [r5, #0]
 80018ae:	423b      	tst	r3, r7
 80018b0:	d1f6      	bne.n	80018a0 <HAL_RCC_OscConfig+0x420>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018b2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80018b4:	6a23      	ldr	r3, [r4, #32]
 80018b6:	68ea      	ldr	r2, [r5, #12]
 80018b8:	430b      	orrs	r3, r1
 80018ba:	491f      	ldr	r1, [pc, #124]	@ (8001938 <HAL_RCC_OscConfig+0x4b8>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018bc:	4e1a      	ldr	r6, [pc, #104]	@ (8001928 <HAL_RCC_OscConfig+0x4a8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018be:	400a      	ands	r2, r1
 80018c0:	4313      	orrs	r3, r2
 80018c2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80018c4:	4313      	orrs	r3, r2
 80018c6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80018c8:	4313      	orrs	r3, r2
 80018ca:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80018cc:	0212      	lsls	r2, r2, #8
 80018ce:	4313      	orrs	r3, r2
 80018d0:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 80018d2:	2380      	movs	r3, #128	@ 0x80
 80018d4:	682a      	ldr	r2, [r5, #0]
 80018d6:	045b      	lsls	r3, r3, #17
 80018d8:	4313      	orrs	r3, r2
 80018da:	602b      	str	r3, [r5, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80018dc:	2380      	movs	r3, #128	@ 0x80
 80018de:	68ea      	ldr	r2, [r5, #12]
 80018e0:	055b      	lsls	r3, r3, #21
 80018e2:	4313      	orrs	r3, r2
 80018e4:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 80018e6:	f7fe ff33 	bl	8000750 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018ea:	2580      	movs	r5, #128	@ 0x80
        tickstart = HAL_GetTick();
 80018ec:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018ee:	04ad      	lsls	r5, r5, #18
 80018f0:	e005      	b.n	80018fe <HAL_RCC_OscConfig+0x47e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018f2:	f7fe ff2d 	bl	8000750 <HAL_GetTick>
 80018f6:	1b00      	subs	r0, r0, r4
 80018f8:	2802      	cmp	r0, #2
 80018fa:	d900      	bls.n	80018fe <HAL_RCC_OscConfig+0x47e>
 80018fc:	e743      	b.n	8001786 <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018fe:	6833      	ldr	r3, [r6, #0]
 8001900:	422b      	tst	r3, r5
 8001902:	d0f6      	beq.n	80018f2 <HAL_RCC_OscConfig+0x472>
  return HAL_OK;
 8001904:	2000      	movs	r0, #0
 8001906:	e5ec      	b.n	80014e2 <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001908:	2104      	movs	r1, #4
 800190a:	4b07      	ldr	r3, [pc, #28]	@ (8001928 <HAL_RCC_OscConfig+0x4a8>)
 800190c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800190e:	430a      	orrs	r2, r1
 8001910:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001912:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001914:	3903      	subs	r1, #3
 8001916:	430a      	orrs	r2, r1
 8001918:	65da      	str	r2, [r3, #92]	@ 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800191a:	e713      	b.n	8001744 <HAL_RCC_OscConfig+0x2c4>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800191c:	68e3      	ldr	r3, [r4, #12]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d1a6      	bne.n	8001870 <HAL_RCC_OscConfig+0x3f0>
 8001922:	e5dd      	b.n	80014e0 <HAL_RCC_OscConfig+0x60>
 8001924:	fffffeff 	.word	0xfffffeff
 8001928:	40021000 	.word	0x40021000
 800192c:	ffff80ff 	.word	0xffff80ff
 8001930:	efffffff 	.word	0xefffffff
 8001934:	feffffff 	.word	0xfeffffff
 8001938:	1fc1808c 	.word	0x1fc1808c

0800193c <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800193c:	2338      	movs	r3, #56	@ 0x38
 800193e:	4a22      	ldr	r2, [pc, #136]	@ (80019c8 <HAL_RCC_GetSysClockFreq+0x8c>)
{
 8001940:	b510      	push	{r4, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001942:	6891      	ldr	r1, [r2, #8]
 8001944:	420b      	tst	r3, r1
 8001946:	d105      	bne.n	8001954 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001948:	6813      	ldr	r3, [r2, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800194a:	4820      	ldr	r0, [pc, #128]	@ (80019cc <HAL_RCC_GetSysClockFreq+0x90>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800194c:	049b      	lsls	r3, r3, #18
 800194e:	0f5b      	lsrs	r3, r3, #29
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001950:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 8001952:	bd10      	pop	{r4, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001954:	6891      	ldr	r1, [r2, #8]
 8001956:	4019      	ands	r1, r3
 8001958:	2908      	cmp	r1, #8
 800195a:	d014      	beq.n	8001986 <HAL_RCC_GetSysClockFreq+0x4a>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800195c:	6891      	ldr	r1, [r2, #8]
 800195e:	4019      	ands	r1, r3
 8001960:	2910      	cmp	r1, #16
 8001962:	d012      	beq.n	800198a <HAL_RCC_GetSysClockFreq+0x4e>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001964:	6891      	ldr	r1, [r2, #8]
 8001966:	4019      	ands	r1, r3
 8001968:	2920      	cmp	r1, #32
 800196a:	d024      	beq.n	80019b6 <HAL_RCC_GetSysClockFreq+0x7a>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800196c:	6890      	ldr	r0, [r2, #8]
 800196e:	4018      	ands	r0, r3
    sysclockfreq = LSI_VALUE;
 8001970:	3818      	subs	r0, #24
 8001972:	1e43      	subs	r3, r0, #1
 8001974:	4198      	sbcs	r0, r3
 8001976:	4b16      	ldr	r3, [pc, #88]	@ (80019d0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001978:	4240      	negs	r0, r0
 800197a:	4018      	ands	r0, r3
 800197c:	23fa      	movs	r3, #250	@ 0xfa
 800197e:	01db      	lsls	r3, r3, #7
 8001980:	469c      	mov	ip, r3
 8001982:	4460      	add	r0, ip
 8001984:	e7e5      	b.n	8001952 <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = HSE_VALUE;
 8001986:	4813      	ldr	r0, [pc, #76]	@ (80019d4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001988:	e7e3      	b.n	8001952 <HAL_RCC_GetSysClockFreq+0x16>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800198a:	68d3      	ldr	r3, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800198c:	68d1      	ldr	r1, [r2, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800198e:	43db      	mvns	r3, r3
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001990:	68d4      	ldr	r4, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001992:	0649      	lsls	r1, r1, #25
 8001994:	0f49      	lsrs	r1, r1, #29
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001996:	0464      	lsls	r4, r4, #17
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001998:	3101      	adds	r1, #1
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800199a:	0e64      	lsrs	r4, r4, #25
    switch (pllsource)
 800199c:	079b      	lsls	r3, r3, #30
 800199e:	d00d      	beq.n	80019bc <HAL_RCC_GetSysClockFreq+0x80>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80019a0:	480a      	ldr	r0, [pc, #40]	@ (80019cc <HAL_RCC_GetSysClockFreq+0x90>)
 80019a2:	f7fe fbbf 	bl	8000124 <__udivsi3>
 80019a6:	4360      	muls	r0, r4
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80019a8:	4b07      	ldr	r3, [pc, #28]	@ (80019c8 <HAL_RCC_GetSysClockFreq+0x8c>)
 80019aa:	68d9      	ldr	r1, [r3, #12]
 80019ac:	0f49      	lsrs	r1, r1, #29
 80019ae:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 80019b0:	f7fe fbb8 	bl	8000124 <__udivsi3>
 80019b4:	e7cd      	b.n	8001952 <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = LSE_VALUE;
 80019b6:	2080      	movs	r0, #128	@ 0x80
 80019b8:	0200      	lsls	r0, r0, #8
 80019ba:	e7ca      	b.n	8001952 <HAL_RCC_GetSysClockFreq+0x16>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80019bc:	4805      	ldr	r0, [pc, #20]	@ (80019d4 <HAL_RCC_GetSysClockFreq+0x98>)
 80019be:	f7fe fbb1 	bl	8000124 <__udivsi3>
 80019c2:	4360      	muls	r0, r4
        break;
 80019c4:	e7f0      	b.n	80019a8 <HAL_RCC_GetSysClockFreq+0x6c>
 80019c6:	46c0      	nop			@ (mov r8, r8)
 80019c8:	40021000 	.word	0x40021000
 80019cc:	00f42400 	.word	0x00f42400
 80019d0:	ffff8300 	.word	0xffff8300
 80019d4:	007a1200 	.word	0x007a1200

080019d8 <HAL_RCC_ClockConfig>:
{
 80019d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019da:	46ce      	mov	lr, r9
 80019dc:	4647      	mov	r7, r8
 80019de:	0005      	movs	r5, r0
 80019e0:	000c      	movs	r4, r1
 80019e2:	b580      	push	{r7, lr}
  if (RCC_ClkInitStruct == NULL)
 80019e4:	2800      	cmp	r0, #0
 80019e6:	d026      	beq.n	8001a36 <HAL_RCC_ClockConfig+0x5e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019e8:	2207      	movs	r2, #7
 80019ea:	4e57      	ldr	r6, [pc, #348]	@ (8001b48 <HAL_RCC_ClockConfig+0x170>)
 80019ec:	6833      	ldr	r3, [r6, #0]
 80019ee:	4013      	ands	r3, r2
 80019f0:	428b      	cmp	r3, r1
 80019f2:	d35e      	bcc.n	8001ab2 <HAL_RCC_ClockConfig+0xda>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019f4:	682b      	ldr	r3, [r5, #0]
 80019f6:	079a      	lsls	r2, r3, #30
 80019f8:	d50e      	bpl.n	8001a18 <HAL_RCC_ClockConfig+0x40>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019fa:	075a      	lsls	r2, r3, #29
 80019fc:	d505      	bpl.n	8001a0a <HAL_RCC_ClockConfig+0x32>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80019fe:	22e0      	movs	r2, #224	@ 0xe0
 8001a00:	4952      	ldr	r1, [pc, #328]	@ (8001b4c <HAL_RCC_ClockConfig+0x174>)
 8001a02:	01d2      	lsls	r2, r2, #7
 8001a04:	6888      	ldr	r0, [r1, #8]
 8001a06:	4302      	orrs	r2, r0
 8001a08:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a0a:	4950      	ldr	r1, [pc, #320]	@ (8001b4c <HAL_RCC_ClockConfig+0x174>)
 8001a0c:	4850      	ldr	r0, [pc, #320]	@ (8001b50 <HAL_RCC_ClockConfig+0x178>)
 8001a0e:	688a      	ldr	r2, [r1, #8]
 8001a10:	4002      	ands	r2, r0
 8001a12:	68a8      	ldr	r0, [r5, #8]
 8001a14:	4302      	orrs	r2, r0
 8001a16:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a18:	07db      	lsls	r3, r3, #31
 8001a1a:	d52b      	bpl.n	8001a74 <HAL_RCC_ClockConfig+0x9c>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a1c:	686b      	ldr	r3, [r5, #4]
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a1e:	4a4b      	ldr	r2, [pc, #300]	@ (8001b4c <HAL_RCC_ClockConfig+0x174>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d100      	bne.n	8001a26 <HAL_RCC_ClockConfig+0x4e>
 8001a24:	e07c      	b.n	8001b20 <HAL_RCC_ClockConfig+0x148>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d007      	beq.n	8001a3a <HAL_RCC_ClockConfig+0x62>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d000      	beq.n	8001a30 <HAL_RCC_ClockConfig+0x58>
 8001a2e:	e07d      	b.n	8001b2c <HAL_RCC_ClockConfig+0x154>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a30:	6812      	ldr	r2, [r2, #0]
 8001a32:	0552      	lsls	r2, r2, #21
 8001a34:	d404      	bmi.n	8001a40 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 8001a36:	2001      	movs	r0, #1
 8001a38:	e037      	b.n	8001aaa <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a3a:	6812      	ldr	r2, [r2, #0]
 8001a3c:	0192      	lsls	r2, r2, #6
 8001a3e:	d5fa      	bpl.n	8001a36 <HAL_RCC_ClockConfig+0x5e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a40:	2107      	movs	r1, #7
 8001a42:	4e42      	ldr	r6, [pc, #264]	@ (8001b4c <HAL_RCC_ClockConfig+0x174>)
 8001a44:	68b2      	ldr	r2, [r6, #8]
 8001a46:	438a      	bics	r2, r1
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001a4c:	f7fe fe80 	bl	8000750 <HAL_GetTick>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a50:	2338      	movs	r3, #56	@ 0x38
 8001a52:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a54:	4b3f      	ldr	r3, [pc, #252]	@ (8001b54 <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 8001a56:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a58:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a5a:	e004      	b.n	8001a66 <HAL_RCC_ClockConfig+0x8e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a5c:	f7fe fe78 	bl	8000750 <HAL_GetTick>
 8001a60:	1bc0      	subs	r0, r0, r7
 8001a62:	4548      	cmp	r0, r9
 8001a64:	d83b      	bhi.n	8001ade <HAL_RCC_ClockConfig+0x106>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a66:	4643      	mov	r3, r8
 8001a68:	68b2      	ldr	r2, [r6, #8]
 8001a6a:	401a      	ands	r2, r3
 8001a6c:	686b      	ldr	r3, [r5, #4]
 8001a6e:	00db      	lsls	r3, r3, #3
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d1f3      	bne.n	8001a5c <HAL_RCC_ClockConfig+0x84>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a74:	2207      	movs	r2, #7
 8001a76:	4e34      	ldr	r6, [pc, #208]	@ (8001b48 <HAL_RCC_ClockConfig+0x170>)
 8001a78:	6833      	ldr	r3, [r6, #0]
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	42a3      	cmp	r3, r4
 8001a7e:	d838      	bhi.n	8001af2 <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a80:	682b      	ldr	r3, [r5, #0]
 8001a82:	075b      	lsls	r3, r3, #29
 8001a84:	d42d      	bmi.n	8001ae2 <HAL_RCC_ClockConfig+0x10a>
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001a86:	f7ff ff59 	bl	800193c <HAL_RCC_GetSysClockFreq>
 8001a8a:	4b30      	ldr	r3, [pc, #192]	@ (8001b4c <HAL_RCC_ClockConfig+0x174>)
 8001a8c:	4a32      	ldr	r2, [pc, #200]	@ (8001b58 <HAL_RCC_ClockConfig+0x180>)
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	4932      	ldr	r1, [pc, #200]	@ (8001b5c <HAL_RCC_ClockConfig+0x184>)
 8001a92:	051b      	lsls	r3, r3, #20
 8001a94:	0f1b      	lsrs	r3, r3, #28
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	589b      	ldr	r3, [r3, r2]
 8001a9a:	221f      	movs	r2, #31
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	40d8      	lsrs	r0, r3
  return HAL_InitTick(uwTickPrio);
 8001aa0:	4b2f      	ldr	r3, [pc, #188]	@ (8001b60 <HAL_RCC_ClockConfig+0x188>)
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001aa2:	6008      	str	r0, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 8001aa4:	6818      	ldr	r0, [r3, #0]
 8001aa6:	f7fe fe0d 	bl	80006c4 <HAL_InitTick>
}
 8001aaa:	bcc0      	pop	{r6, r7}
 8001aac:	46b9      	mov	r9, r7
 8001aae:	46b0      	mov	r8, r6
 8001ab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ab2:	6833      	ldr	r3, [r6, #0]
 8001ab4:	4393      	bics	r3, r2
 8001ab6:	430b      	orrs	r3, r1
 8001ab8:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001aba:	f7fe fe49 	bl	8000750 <HAL_GetTick>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001abe:	2307      	movs	r3, #7
 8001ac0:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ac2:	4b24      	ldr	r3, [pc, #144]	@ (8001b54 <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 8001ac4:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ac6:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ac8:	4642      	mov	r2, r8
 8001aca:	6833      	ldr	r3, [r6, #0]
 8001acc:	4013      	ands	r3, r2
 8001ace:	42a3      	cmp	r3, r4
 8001ad0:	d100      	bne.n	8001ad4 <HAL_RCC_ClockConfig+0xfc>
 8001ad2:	e78f      	b.n	80019f4 <HAL_RCC_ClockConfig+0x1c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ad4:	f7fe fe3c 	bl	8000750 <HAL_GetTick>
 8001ad8:	1bc0      	subs	r0, r0, r7
 8001ada:	4548      	cmp	r0, r9
 8001adc:	d9f4      	bls.n	8001ac8 <HAL_RCC_ClockConfig+0xf0>
        return HAL_TIMEOUT;
 8001ade:	2003      	movs	r0, #3
 8001ae0:	e7e3      	b.n	8001aaa <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001ae2:	4a1a      	ldr	r2, [pc, #104]	@ (8001b4c <HAL_RCC_ClockConfig+0x174>)
 8001ae4:	491f      	ldr	r1, [pc, #124]	@ (8001b64 <HAL_RCC_ClockConfig+0x18c>)
 8001ae6:	6893      	ldr	r3, [r2, #8]
 8001ae8:	400b      	ands	r3, r1
 8001aea:	68e9      	ldr	r1, [r5, #12]
 8001aec:	430b      	orrs	r3, r1
 8001aee:	6093      	str	r3, [r2, #8]
 8001af0:	e7c9      	b.n	8001a86 <HAL_RCC_ClockConfig+0xae>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001af2:	6833      	ldr	r3, [r6, #0]
 8001af4:	4393      	bics	r3, r2
 8001af6:	4323      	orrs	r3, r4
 8001af8:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001afa:	f7fe fe29 	bl	8000750 <HAL_GetTick>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001afe:	2307      	movs	r3, #7
 8001b00:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b02:	4b14      	ldr	r3, [pc, #80]	@ (8001b54 <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 8001b04:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b06:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b08:	4642      	mov	r2, r8
 8001b0a:	6833      	ldr	r3, [r6, #0]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	42a3      	cmp	r3, r4
 8001b10:	d0b6      	beq.n	8001a80 <HAL_RCC_ClockConfig+0xa8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b12:	f7fe fe1d 	bl	8000750 <HAL_GetTick>
 8001b16:	1bc0      	subs	r0, r0, r7
 8001b18:	4548      	cmp	r0, r9
 8001b1a:	d9f5      	bls.n	8001b08 <HAL_RCC_ClockConfig+0x130>
        return HAL_TIMEOUT;
 8001b1c:	2003      	movs	r0, #3
 8001b1e:	e7c4      	b.n	8001aaa <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b20:	6812      	ldr	r2, [r2, #0]
 8001b22:	0392      	lsls	r2, r2, #14
 8001b24:	d500      	bpl.n	8001b28 <HAL_RCC_ClockConfig+0x150>
 8001b26:	e78b      	b.n	8001a40 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 8001b28:	2001      	movs	r0, #1
 8001b2a:	e7be      	b.n	8001aaa <HAL_RCC_ClockConfig+0xd2>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001b2c:	2b03      	cmp	r3, #3
 8001b2e:	d005      	beq.n	8001b3c <HAL_RCC_ClockConfig+0x164>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b30:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001b32:	0792      	lsls	r2, r2, #30
 8001b34:	d500      	bpl.n	8001b38 <HAL_RCC_ClockConfig+0x160>
 8001b36:	e783      	b.n	8001a40 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 8001b38:	2001      	movs	r0, #1
 8001b3a:	e7b6      	b.n	8001aaa <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b3c:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 8001b3e:	0792      	lsls	r2, r2, #30
 8001b40:	d500      	bpl.n	8001b44 <HAL_RCC_ClockConfig+0x16c>
 8001b42:	e77d      	b.n	8001a40 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 8001b44:	2001      	movs	r0, #1
 8001b46:	e7b0      	b.n	8001aaa <HAL_RCC_ClockConfig+0xd2>
 8001b48:	40022000 	.word	0x40022000
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	fffff0ff 	.word	0xfffff0ff
 8001b54:	00001388 	.word	0x00001388
 8001b58:	08003ac0 	.word	0x08003ac0
 8001b5c:	20000000 	.word	0x20000000
 8001b60:	20000008 	.word	0x20000008
 8001b64:	ffff8fff 	.word	0xffff8fff

08001b68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b6a:	46d6      	mov	lr, sl
 8001b6c:	464f      	mov	r7, r9
 8001b6e:	4646      	mov	r6, r8
 8001b70:	b5c0      	push	{r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001b72:	6803      	ldr	r3, [r0, #0]
{
 8001b74:	0004      	movs	r4, r0
 8001b76:	b082      	sub	sp, #8
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001b78:	2000      	movs	r0, #0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001b7a:	039a      	lsls	r2, r3, #14
 8001b7c:	d551      	bpl.n	8001c22 <HAL_RCCEx_PeriphCLKConfig+0xba>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b7e:	2280      	movs	r2, #128	@ 0x80
 8001b80:	4b51      	ldr	r3, [pc, #324]	@ (8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b82:	0552      	lsls	r2, r2, #21
 8001b84:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
    FlagStatus       pwrclkchanged = RESET;
 8001b86:	4682      	mov	sl, r0
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b88:	4211      	tst	r1, r2
 8001b8a:	d100      	bne.n	8001b8e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001b8c:	e07b      	b.n	8001c86 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b8e:	2780      	movs	r7, #128	@ 0x80
 8001b90:	4d4e      	ldr	r5, [pc, #312]	@ (8001ccc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001b92:	007f      	lsls	r7, r7, #1
 8001b94:	682b      	ldr	r3, [r5, #0]
 8001b96:	433b      	orrs	r3, r7
 8001b98:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001b9a:	f7fe fdd9 	bl	8000750 <HAL_GetTick>
 8001b9e:	0006      	movs	r6, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ba0:	e005      	b.n	8001bae <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ba2:	f7fe fdd5 	bl	8000750 <HAL_GetTick>
 8001ba6:	1b80      	subs	r0, r0, r6
 8001ba8:	2802      	cmp	r0, #2
 8001baa:	d900      	bls.n	8001bae <HAL_RCCEx_PeriphCLKConfig+0x46>
 8001bac:	e075      	b.n	8001c9a <HAL_RCCEx_PeriphCLKConfig+0x132>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001bae:	682b      	ldr	r3, [r5, #0]
 8001bb0:	423b      	tst	r3, r7
 8001bb2:	d0f6      	beq.n	8001ba2 <HAL_RCCEx_PeriphCLKConfig+0x3a>
    }

    if (ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001bb4:	4d44      	ldr	r5, [pc, #272]	@ (8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bb6:	23c0      	movs	r3, #192	@ 0xc0
 8001bb8:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	0010      	movs	r0, r2

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001bbe:	6961      	ldr	r1, [r4, #20]
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001bc0:	4018      	ands	r0, r3
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001bc2:	421a      	tst	r2, r3
 8001bc4:	d022      	beq.n	8001c0c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8001bc6:	4288      	cmp	r0, r1
 8001bc8:	d020      	beq.n	8001c0c <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001bca:	2080      	movs	r0, #128	@ 0x80
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001bcc:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_FORCE();
 8001bce:	6dee      	ldr	r6, [r5, #92]	@ 0x5c
 8001bd0:	0240      	lsls	r0, r0, #9
 8001bd2:	4330      	orrs	r0, r6
 8001bd4:	65e8      	str	r0, [r5, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001bd6:	6de8      	ldr	r0, [r5, #92]	@ 0x5c
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001bd8:	4a3d      	ldr	r2, [pc, #244]	@ (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001bda:	4e3e      	ldr	r6, [pc, #248]	@ (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001bdc:	401a      	ands	r2, r3
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001bde:	4030      	ands	r0, r6
 8001be0:	65e8      	str	r0, [r5, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001be2:	65ea      	str	r2, [r5, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001be4:	07db      	lsls	r3, r3, #31
 8001be6:	d511      	bpl.n	8001c0c <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be8:	f7fe fdb2 	bl	8000750 <HAL_GetTick>

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bec:	2302      	movs	r3, #2
 8001bee:	4698      	mov	r8, r3
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bf0:	4b39      	ldr	r3, [pc, #228]	@ (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x170>)
        tickstart = HAL_GetTick();
 8001bf2:	0006      	movs	r6, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bf4:	4699      	mov	r9, r3
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bf6:	e004      	b.n	8001c02 <HAL_RCCEx_PeriphCLKConfig+0x9a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bf8:	f7fe fdaa 	bl	8000750 <HAL_GetTick>
 8001bfc:	1b80      	subs	r0, r0, r6
 8001bfe:	4548      	cmp	r0, r9
 8001c00:	d84b      	bhi.n	8001c9a <HAL_RCCEx_PeriphCLKConfig+0x132>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c02:	4642      	mov	r2, r8
 8001c04:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 8001c06:	421a      	tst	r2, r3
 8001c08:	d0f6      	beq.n	8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x90>
      }

      if (ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c0a:	6961      	ldr	r1, [r4, #20]
 8001c0c:	4a2e      	ldr	r2, [pc, #184]	@ (8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c0e:	4830      	ldr	r0, [pc, #192]	@ (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001c10:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 8001c12:	4003      	ands	r3, r0
 8001c14:	430b      	orrs	r3, r1
 8001c16:	65d3      	str	r3, [r2, #92]	@ 0x5c
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c18:	4652      	mov	r2, sl
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001c1a:	2000      	movs	r0, #0
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001c1c:	6823      	ldr	r3, [r4, #0]
    if (pwrclkchanged == SET)
 8001c1e:	2a01      	cmp	r2, #1
 8001c20:	d040      	beq.n	8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001c22:	07da      	lsls	r2, r3, #31
 8001c24:	d506      	bpl.n	8001c34 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001c26:	2503      	movs	r5, #3
 8001c28:	4927      	ldr	r1, [pc, #156]	@ (8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c2a:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 8001c2c:	43aa      	bics	r2, r5
 8001c2e:	6865      	ldr	r5, [r4, #4]
 8001c30:	432a      	orrs	r2, r5
 8001c32:	654a      	str	r2, [r1, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001c34:	069a      	lsls	r2, r3, #26
 8001c36:	d506      	bpl.n	8001c46 <HAL_RCCEx_PeriphCLKConfig+0xde>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001c38:	4923      	ldr	r1, [pc, #140]	@ (8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c3a:	4d28      	ldr	r5, [pc, #160]	@ (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x174>)
 8001c3c:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 8001c3e:	402a      	ands	r2, r5
 8001c40:	68a5      	ldr	r5, [r4, #8]
 8001c42:	432a      	orrs	r2, r5
 8001c44:	654a      	str	r2, [r1, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001c46:	045a      	lsls	r2, r3, #17
 8001c48:	d50a      	bpl.n	8001c60 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001c4a:	491f      	ldr	r1, [pc, #124]	@ (8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c4c:	6925      	ldr	r5, [r4, #16]
 8001c4e:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 8001c50:	0092      	lsls	r2, r2, #2
 8001c52:	0892      	lsrs	r2, r2, #2
 8001c54:	432a      	orrs	r2, r5
 8001c56:	654a      	str	r2, [r1, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001c58:	2280      	movs	r2, #128	@ 0x80
 8001c5a:	05d2      	lsls	r2, r2, #23
 8001c5c:	4295      	cmp	r5, r2
 8001c5e:	d027      	beq.n	8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x148>
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001c60:	051b      	lsls	r3, r3, #20
 8001c62:	d50a      	bpl.n	8001c7a <HAL_RCCEx_PeriphCLKConfig+0x112>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001c64:	4a18      	ldr	r2, [pc, #96]	@ (8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c66:	68e1      	ldr	r1, [r4, #12]
 8001c68:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8001c6a:	4c1d      	ldr	r4, [pc, #116]	@ (8001ce0 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8001c6c:	4023      	ands	r3, r4
 8001c6e:	430b      	orrs	r3, r1
 8001c70:	6553      	str	r3, [r2, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001c72:	2380      	movs	r3, #128	@ 0x80
 8001c74:	01db      	lsls	r3, r3, #7
 8001c76:	4299      	cmp	r1, r3
 8001c78:	d020      	beq.n	8001cbc <HAL_RCCEx_PeriphCLKConfig+0x154>
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
}
 8001c7a:	b002      	add	sp, #8
 8001c7c:	bce0      	pop	{r5, r6, r7}
 8001c7e:	46ba      	mov	sl, r7
 8001c80:	46b1      	mov	r9, r6
 8001c82:	46a8      	mov	r8, r5
 8001c84:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c86:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8001c88:	4311      	orrs	r1, r2
 8001c8a:	63d9      	str	r1, [r3, #60]	@ 0x3c
 8001c8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c8e:	4013      	ands	r3, r2
 8001c90:	9301      	str	r3, [sp, #4]
 8001c92:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001c94:	2301      	movs	r3, #1
 8001c96:	469a      	mov	sl, r3
 8001c98:	e779      	b.n	8001b8e <HAL_RCCEx_PeriphCLKConfig+0x26>
    if (pwrclkchanged == SET)
 8001c9a:	4652      	mov	r2, sl
        status = ret;
 8001c9c:	2003      	movs	r0, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001c9e:	6823      	ldr	r3, [r4, #0]
    if (pwrclkchanged == SET)
 8001ca0:	2a01      	cmp	r2, #1
 8001ca2:	d1be      	bne.n	8001c22 <HAL_RCCEx_PeriphCLKConfig+0xba>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ca4:	4908      	ldr	r1, [pc, #32]	@ (8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ca6:	4d0f      	ldr	r5, [pc, #60]	@ (8001ce4 <HAL_RCCEx_PeriphCLKConfig+0x17c>)
 8001ca8:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
 8001caa:	402a      	ands	r2, r5
 8001cac:	63ca      	str	r2, [r1, #60]	@ 0x3c
 8001cae:	e7b8      	b.n	8001c22 <HAL_RCCEx_PeriphCLKConfig+0xba>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001cb0:	2280      	movs	r2, #128	@ 0x80
 8001cb2:	68cd      	ldr	r5, [r1, #12]
 8001cb4:	0252      	lsls	r2, r2, #9
 8001cb6:	432a      	orrs	r2, r5
 8001cb8:	60ca      	str	r2, [r1, #12]
 8001cba:	e7d1      	b.n	8001c60 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001cbc:	2380      	movs	r3, #128	@ 0x80
 8001cbe:	68d1      	ldr	r1, [r2, #12]
 8001cc0:	025b      	lsls	r3, r3, #9
 8001cc2:	430b      	orrs	r3, r1
 8001cc4:	60d3      	str	r3, [r2, #12]
  return status;
 8001cc6:	e7d8      	b.n	8001c7a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	40007000 	.word	0x40007000
 8001cd0:	fffffcff 	.word	0xfffffcff
 8001cd4:	fffeffff 	.word	0xfffeffff
 8001cd8:	00001388 	.word	0x00001388
 8001cdc:	ffffcfff 	.word	0xffffcfff
 8001ce0:	ffff3fff 	.word	0xffff3fff
 8001ce4:	efffffff 	.word	0xefffffff

08001ce8 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001ce8:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8001cea:	253f      	movs	r5, #63	@ 0x3f
{
 8001cec:	46c6      	mov	lr, r8
 8001cee:	4690      	mov	r8, r2
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8001cf0:	6800      	ldr	r0, [r0, #0]
{
 8001cf2:	b500      	push	{lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8001cf4:	6883      	ldr	r3, [r0, #8]
 8001cf6:	604b      	str	r3, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8001cf8:	6903      	ldr	r3, [r0, #16]
 8001cfa:	045b      	lsls	r3, r3, #17
 8001cfc:	0c5b      	lsrs	r3, r3, #17
 8001cfe:	608b      	str	r3, [r1, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8001d00:	6803      	ldr	r3, [r0, #0]
 8001d02:	4816      	ldr	r0, [pc, #88]	@ (8001d5c <HAL_RTC_GetTime+0x74>)
 8001d04:	4003      	ands	r3, r0
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8001d06:	0a1c      	lsrs	r4, r3, #8
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8001d08:	0c1f      	lsrs	r7, r3, #16
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8001d0a:	b2e4      	uxtb	r4, r4
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8001d0c:	b2de      	uxtb	r6, r3
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8001d0e:	403d      	ands	r5, r7
 8001d10:	0220      	lsls	r0, r4, #8
 8001d12:	0432      	lsls	r2, r6, #16
 8001d14:	4328      	orrs	r0, r5
 8001d16:	0d9b      	lsrs	r3, r3, #22
 8001d18:	061b      	lsls	r3, r3, #24
 8001d1a:	4310      	orrs	r0, r2
 8001d1c:	4303      	orrs	r3, r0
 8001d1e:	600b      	str	r3, [r1, #0]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8001d20:	4643      	mov	r3, r8
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d115      	bne.n	8001d52 <HAL_RTC_GetTime+0x6a>
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8001d26:	220f      	movs	r2, #15
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8001d28:	092d      	lsrs	r5, r5, #4
 8001d2a:	00ab      	lsls	r3, r5, #2
 8001d2c:	195b      	adds	r3, r3, r5
 8001d2e:	0920      	lsrs	r0, r4, #4
 8001d30:	005b      	lsls	r3, r3, #1
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8001d32:	4017      	ands	r7, r2
 8001d34:	19df      	adds	r7, r3, r7
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8001d36:	0083      	lsls	r3, r0, #2
 8001d38:	181b      	adds	r3, r3, r0
 8001d3a:	005b      	lsls	r3, r3, #1
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8001d3c:	4014      	ands	r4, r2
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8001d3e:	0930      	lsrs	r0, r6, #4
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8001d40:	191c      	adds	r4, r3, r4
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8001d42:	0083      	lsls	r3, r0, #2
 8001d44:	181b      	adds	r3, r3, r0
 8001d46:	005b      	lsls	r3, r3, #1
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8001d48:	4032      	ands	r2, r6
 8001d4a:	189b      	adds	r3, r3, r2
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8001d4c:	700f      	strb	r7, [r1, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8001d4e:	704c      	strb	r4, [r1, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8001d50:	708b      	strb	r3, [r1, #2]
}
 8001d52:	2000      	movs	r0, #0
 8001d54:	bc80      	pop	{r7}
 8001d56:	46b8      	mov	r8, r7
 8001d58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d5a:	46c0      	nop			@ (mov r8, r8)
 8001d5c:	007f7f7f 	.word	0x007f7f7f

08001d60 <HAL_RTC_GetDate>:
{
 8001d60:	b570      	push	{r4, r5, r6, lr}
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8001d62:	241f      	movs	r4, #31
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8001d64:	6803      	ldr	r3, [r0, #0]
 8001d66:	4814      	ldr	r0, [pc, #80]	@ (8001db8 <HAL_RTC_GetDate+0x58>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	4003      	ands	r3, r0
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8001d6c:	0a18      	lsrs	r0, r3, #8
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8001d6e:	0c1e      	lsrs	r6, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8001d70:	b2c5      	uxtb	r5, r0
 8001d72:	4020      	ands	r0, r4
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8001d74:	b2dc      	uxtb	r4, r3
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8001d76:	041b      	lsls	r3, r3, #16
 8001d78:	0f5b      	lsrs	r3, r3, #29
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8001d7a:	70ce      	strb	r6, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8001d7c:	7048      	strb	r0, [r1, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8001d7e:	708c      	strb	r4, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8001d80:	700b      	strb	r3, [r1, #0]
  if(Format == RTC_FORMAT_BIN)
 8001d82:	2a00      	cmp	r2, #0
 8001d84:	d115      	bne.n	8001db2 <HAL_RTC_GetDate+0x52>
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8001d86:	0932      	lsrs	r2, r6, #4
 8001d88:	0093      	lsls	r3, r2, #2
 8001d8a:	189b      	adds	r3, r3, r2
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8001d8c:	220f      	movs	r2, #15
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8001d8e:	005b      	lsls	r3, r3, #1
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8001d90:	4016      	ands	r6, r2
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8001d92:	0900      	lsrs	r0, r0, #4
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8001d94:	199b      	adds	r3, r3, r6
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8001d96:	70cb      	strb	r3, [r1, #3]
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8001d98:	0083      	lsls	r3, r0, #2
 8001d9a:	181b      	adds	r3, r3, r0
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8001d9c:	4015      	ands	r5, r2
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8001d9e:	005b      	lsls	r3, r3, #1
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8001da0:	195b      	adds	r3, r3, r5
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8001da2:	0920      	lsrs	r0, r4, #4
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8001da4:	704b      	strb	r3, [r1, #1]
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8001da6:	0083      	lsls	r3, r0, #2
 8001da8:	181b      	adds	r3, r3, r0
 8001daa:	005b      	lsls	r3, r3, #1
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8001dac:	4022      	ands	r2, r4
 8001dae:	189b      	adds	r3, r3, r2
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8001db0:	708b      	strb	r3, [r1, #2]
}
 8001db2:	2000      	movs	r0, #0
 8001db4:	bd70      	pop	{r4, r5, r6, pc}
 8001db6:	46c0      	nop			@ (mov r8, r8)
 8001db8:	00ffff3f 	.word	0x00ffff3f

08001dbc <RTC_EnterInitMode>:
{
 8001dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dbe:	46c6      	mov	lr, r8
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8001dc0:	6802      	ldr	r2, [r0, #0]
{
 8001dc2:	0005      	movs	r5, r0
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8001dc4:	68d3      	ldr	r3, [r2, #12]
  HAL_StatusTypeDef status = HAL_OK;  
 8001dc6:	2400      	movs	r4, #0
{
 8001dc8:	b500      	push	{lr}
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8001dca:	065b      	lsls	r3, r3, #25
 8001dcc:	d503      	bpl.n	8001dd6 <RTC_EnterInitMode+0x1a>
}
 8001dce:	0020      	movs	r0, r4
 8001dd0:	bc80      	pop	{r7}
 8001dd2:	46b8      	mov	r8, r7
 8001dd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8001dd6:	2180      	movs	r1, #128	@ 0x80
 8001dd8:	68d3      	ldr	r3, [r2, #12]
 8001dda:	430b      	orrs	r3, r1
 8001ddc:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 8001dde:	f7fe fcb7 	bl	8000750 <HAL_GetTick>
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8001de2:	23fa      	movs	r3, #250	@ 0xfa
 8001de4:	009b      	lsls	r3, r3, #2
    tickstart = HAL_GetTick();
 8001de6:	0006      	movs	r6, r0
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8001de8:	4698      	mov	r8, r3
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8001dea:	2740      	movs	r7, #64	@ 0x40
 8001dec:	682b      	ldr	r3, [r5, #0]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	421f      	tst	r7, r3
 8001df2:	d1ec      	bne.n	8001dce <RTC_EnterInitMode+0x12>
 8001df4:	2c03      	cmp	r4, #3
 8001df6:	d0ea      	beq.n	8001dce <RTC_EnterInitMode+0x12>
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8001df8:	f7fe fcaa 	bl	8000750 <HAL_GetTick>
 8001dfc:	2400      	movs	r4, #0
 8001dfe:	1b80      	subs	r0, r0, r6
 8001e00:	4540      	cmp	r0, r8
 8001e02:	d9f3      	bls.n	8001dec <RTC_EnterInitMode+0x30>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001e04:	2329      	movs	r3, #41	@ 0x29
 8001e06:	2203      	movs	r2, #3
        status = HAL_TIMEOUT;
 8001e08:	3403      	adds	r4, #3
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001e0a:	54ea      	strb	r2, [r5, r3]
 8001e0c:	e7ed      	b.n	8001dea <RTC_EnterInitMode+0x2e>
 8001e0e:	46c0      	nop			@ (mov r8, r8)

08001e10 <RTC_ExitInitMode>:
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8001e10:	2180      	movs	r1, #128	@ 0x80
{
 8001e12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8001e14:	4b21      	ldr	r3, [pc, #132]	@ (8001e9c <RTC_ExitInitMode+0x8c>)
{
 8001e16:	0004      	movs	r4, r0
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8001e18:	68da      	ldr	r2, [r3, #12]
 8001e1a:	438a      	bics	r2, r1
 8001e1c:	60da      	str	r2, [r3, #12]
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8001e1e:	2220      	movs	r2, #32
 8001e20:	6998      	ldr	r0, [r3, #24]
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8001e22:	6821      	ldr	r1, [r4, #0]
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8001e24:	4202      	tst	r2, r0
 8001e26:	d113      	bne.n	8001e50 <RTC_ExitInitMode+0x40>
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8001e28:	4b1d      	ldr	r3, [pc, #116]	@ (8001ea0 <RTC_ExitInitMode+0x90>)
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8001e2a:	27fa      	movs	r7, #250	@ 0xfa
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8001e2c:	60cb      	str	r3, [r1, #12]
  tickstart = HAL_GetTick();
 8001e2e:	f7fe fc8f 	bl	8000750 <HAL_GetTick>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8001e32:	2620      	movs	r6, #32
  tickstart = HAL_GetTick();
 8001e34:	0005      	movs	r5, r0
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8001e36:	00bf      	lsls	r7, r7, #2
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8001e38:	e004      	b.n	8001e44 <RTC_ExitInitMode+0x34>
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8001e3a:	f7fe fc89 	bl	8000750 <HAL_GetTick>
 8001e3e:	1b40      	subs	r0, r0, r5
 8001e40:	42b8      	cmp	r0, r7
 8001e42:	d826      	bhi.n	8001e92 <RTC_ExitInitMode+0x82>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8001e44:	6823      	ldr	r3, [r4, #0]
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	421e      	tst	r6, r3
 8001e4a:	d0f6      	beq.n	8001e3a <RTC_ExitInitMode+0x2a>
  HAL_StatusTypeDef status = HAL_OK;
 8001e4c:	2000      	movs	r0, #0
 8001e4e:	e01a      	b.n	8001e86 <RTC_ExitInitMode+0x76>
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001e50:	6998      	ldr	r0, [r3, #24]
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8001e52:	27fa      	movs	r7, #250	@ 0xfa
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001e54:	4390      	bics	r0, r2
 8001e56:	6198      	str	r0, [r3, #24]
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8001e58:	4b11      	ldr	r3, [pc, #68]	@ (8001ea0 <RTC_ExitInitMode+0x90>)
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8001e5a:	2620      	movs	r6, #32
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8001e5c:	60cb      	str	r3, [r1, #12]
  tickstart = HAL_GetTick();
 8001e5e:	f7fe fc77 	bl	8000750 <HAL_GetTick>
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8001e62:	00bf      	lsls	r7, r7, #2
  tickstart = HAL_GetTick();
 8001e64:	0005      	movs	r5, r0
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8001e66:	e004      	b.n	8001e72 <RTC_ExitInitMode+0x62>
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8001e68:	f7fe fc72 	bl	8000750 <HAL_GetTick>
 8001e6c:	1b40      	subs	r0, r0, r5
 8001e6e:	42b8      	cmp	r0, r7
 8001e70:	d80a      	bhi.n	8001e88 <RTC_ExitInitMode+0x78>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8001e72:	6823      	ldr	r3, [r4, #0]
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	421e      	tst	r6, r3
 8001e78:	d0f6      	beq.n	8001e68 <RTC_ExitInitMode+0x58>
  HAL_StatusTypeDef status = HAL_OK;
 8001e7a:	2000      	movs	r0, #0
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001e7c:	2120      	movs	r1, #32
 8001e7e:	4a07      	ldr	r2, [pc, #28]	@ (8001e9c <RTC_ExitInitMode+0x8c>)
 8001e80:	6993      	ldr	r3, [r2, #24]
 8001e82:	430b      	orrs	r3, r1
 8001e84:	6193      	str	r3, [r2, #24]
}
 8001e86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001e88:	2329      	movs	r3, #41	@ 0x29
 8001e8a:	2203      	movs	r2, #3
      status = HAL_TIMEOUT;
 8001e8c:	2003      	movs	r0, #3
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001e8e:	54e2      	strb	r2, [r4, r3]
      status = HAL_TIMEOUT;
 8001e90:	e7f4      	b.n	8001e7c <RTC_ExitInitMode+0x6c>
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001e92:	2329      	movs	r3, #41	@ 0x29
 8001e94:	2203      	movs	r2, #3
      status = HAL_TIMEOUT;
 8001e96:	2003      	movs	r0, #3
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001e98:	54e2      	strb	r2, [r4, r3]
  return status;
 8001e9a:	e7f4      	b.n	8001e86 <RTC_ExitInitMode+0x76>
 8001e9c:	40002800 	.word	0x40002800
 8001ea0:	0001005f 	.word	0x0001005f

08001ea4 <HAL_RTC_Init>:
{
 8001ea4:	b510      	push	{r4, lr}
 8001ea6:	1e04      	subs	r4, r0, #0
  if(hrtc != NULL)
 8001ea8:	d02c      	beq.n	8001f04 <HAL_RTC_Init+0x60>
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8001eaa:	2329      	movs	r3, #41	@ 0x29
 8001eac:	5cc3      	ldrb	r3, [r0, r3]
 8001eae:	b2da      	uxtb	r2, r3
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d018      	beq.n	8001ee6 <HAL_RTC_Init+0x42>
    hrtc->State = HAL_RTC_STATE_BUSY;
 8001eb4:	2329      	movs	r3, #41	@ 0x29
 8001eb6:	2202      	movs	r2, #2
 8001eb8:	54e2      	strb	r2, [r4, r3]
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8001eba:	6822      	ldr	r2, [r4, #0]
 8001ebc:	68d3      	ldr	r3, [r2, #12]
 8001ebe:	06db      	lsls	r3, r3, #27
 8001ec0:	d504      	bpl.n	8001ecc <HAL_RTC_Init+0x28>
      hrtc->State = HAL_RTC_STATE_READY;
 8001ec2:	2329      	movs	r3, #41	@ 0x29
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	2000      	movs	r0, #0
 8001ec8:	54e2      	strb	r2, [r4, r3]
}
 8001eca:	bd10      	pop	{r4, pc}
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001ecc:	23ca      	movs	r3, #202	@ 0xca
 8001ece:	6253      	str	r3, [r2, #36]	@ 0x24
 8001ed0:	3b77      	subs	r3, #119	@ 0x77
 8001ed2:	6253      	str	r3, [r2, #36]	@ 0x24
      status = RTC_EnterInitMode(hrtc);
 8001ed4:	0020      	movs	r0, r4
 8001ed6:	f7ff ff71 	bl	8001dbc <RTC_EnterInitMode>
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8001eda:	6823      	ldr	r3, [r4, #0]
      if(status == HAL_OK)
 8001edc:	2800      	cmp	r0, #0
 8001ede:	d013      	beq.n	8001f08 <HAL_RTC_Init+0x64>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001ee0:	22ff      	movs	r2, #255	@ 0xff
 8001ee2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
 8001ee4:	e7f1      	b.n	8001eca <HAL_RTC_Init+0x26>
      hrtc->Lock = HAL_UNLOCKED;
 8001ee6:	3328      	adds	r3, #40	@ 0x28
 8001ee8:	54c2      	strb	r2, [r0, r3]
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8001eea:	2388      	movs	r3, #136	@ 0x88
 8001eec:	021b      	lsls	r3, r3, #8
 8001eee:	6043      	str	r3, [r0, #4]
      HAL_RTC_MspInit(hrtc);
 8001ef0:	f7fe fb4c 	bl	800058c <HAL_RTC_MspInit>
    hrtc->State = HAL_RTC_STATE_BUSY;
 8001ef4:	2329      	movs	r3, #41	@ 0x29
 8001ef6:	2202      	movs	r2, #2
 8001ef8:	54e2      	strb	r2, [r4, r3]
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8001efa:	6822      	ldr	r2, [r4, #0]
 8001efc:	68d3      	ldr	r3, [r2, #12]
 8001efe:	06db      	lsls	r3, r3, #27
 8001f00:	d4df      	bmi.n	8001ec2 <HAL_RTC_Init+0x1e>
 8001f02:	e7e3      	b.n	8001ecc <HAL_RTC_Init+0x28>
  HAL_StatusTypeDef status = HAL_ERROR;
 8001f04:	2001      	movs	r0, #1
 8001f06:	e7e0      	b.n	8001eca <HAL_RTC_Init+0x26>
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8001f08:	699a      	ldr	r2, [r3, #24]
 8001f0a:	4914      	ldr	r1, [pc, #80]	@ (8001f5c <HAL_RTC_Init+0xb8>)
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001f0c:	6960      	ldr	r0, [r4, #20]
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8001f0e:	400a      	ands	r2, r1
 8001f10:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001f12:	68a2      	ldr	r2, [r4, #8]
 8001f14:	6999      	ldr	r1, [r3, #24]
 8001f16:	4302      	orrs	r2, r0
 8001f18:	69e0      	ldr	r0, [r4, #28]
 8001f1a:	4302      	orrs	r2, r0
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	619a      	str	r2, [r3, #24]
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8001f20:	6922      	ldr	r2, [r4, #16]
        status = RTC_ExitInitMode(hrtc);
 8001f22:	0020      	movs	r0, r4
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8001f24:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8001f26:	68e2      	ldr	r2, [r4, #12]
 8001f28:	6919      	ldr	r1, [r3, #16]
 8001f2a:	0412      	lsls	r2, r2, #16
 8001f2c:	430a      	orrs	r2, r1
 8001f2e:	611a      	str	r2, [r3, #16]
        status = RTC_ExitInitMode(hrtc);
 8001f30:	f7ff ff6e 	bl	8001e10 <RTC_ExitInitMode>
      if (status == HAL_OK)
 8001f34:	2800      	cmp	r0, #0
 8001f36:	d10f      	bne.n	8001f58 <HAL_RTC_Init+0xb4>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8001f38:	6822      	ldr	r2, [r4, #0]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8001f3a:	6a20      	ldr	r0, [r4, #32]
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8001f3c:	6993      	ldr	r3, [r2, #24]
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	08db      	lsrs	r3, r3, #3
 8001f42:	6193      	str	r3, [r2, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8001f44:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001f46:	6991      	ldr	r1, [r2, #24]
 8001f48:	4303      	orrs	r3, r0
 8001f4a:	69a0      	ldr	r0, [r4, #24]
 8001f4c:	4303      	orrs	r3, r0
 8001f4e:	430b      	orrs	r3, r1
 8001f50:	6193      	str	r3, [r2, #24]
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001f52:	23ff      	movs	r3, #255	@ 0xff
 8001f54:	6253      	str	r3, [r2, #36]	@ 0x24
    if (status == HAL_OK)
 8001f56:	e7b4      	b.n	8001ec2 <HAL_RTC_Init+0x1e>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001f58:	6823      	ldr	r3, [r4, #0]
 8001f5a:	e7c1      	b.n	8001ee0 <HAL_RTC_Init+0x3c>
 8001f5c:	fb8fffbf 	.word	0xfb8fffbf

08001f60 <HAL_RTC_SetTime>:
{
 8001f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8001f62:	2328      	movs	r3, #40	@ 0x28
{
 8001f64:	0015      	movs	r5, r2
  __HAL_LOCK(hrtc);
 8001f66:	5cc2      	ldrb	r2, [r0, r3]
{
 8001f68:	0004      	movs	r4, r0
 8001f6a:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 8001f6c:	2a01      	cmp	r2, #1
 8001f6e:	d048      	beq.n	8002002 <HAL_RTC_SetTime+0xa2>
 8001f70:	2201      	movs	r2, #1
 8001f72:	54c2      	strb	r2, [r0, r3]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001f74:	3301      	adds	r3, #1
 8001f76:	3201      	adds	r2, #1
 8001f78:	54c2      	strb	r2, [r0, r3]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001f7a:	6803      	ldr	r3, [r0, #0]
 8001f7c:	32c8      	adds	r2, #200	@ 0xc8
 8001f7e:	625a      	str	r2, [r3, #36]	@ 0x24
 8001f80:	3a77      	subs	r2, #119	@ 0x77
 8001f82:	625a      	str	r2, [r3, #36]	@ 0x24
  status = RTC_EnterInitMode(hrtc);
 8001f84:	f7ff ff1a 	bl	8001dbc <RTC_EnterInitMode>
  if(status == HAL_OK)
 8001f88:	2800      	cmp	r0, #0
 8001f8a:	d006      	beq.n	8001f9a <HAL_RTC_SetTime+0x3a>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001f8c:	22ff      	movs	r2, #255	@ 0xff
 8001f8e:	6823      	ldr	r3, [r4, #0]
 8001f90:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_UNLOCK(hrtc);
 8001f92:	2328      	movs	r3, #40	@ 0x28
 8001f94:	2200      	movs	r2, #0
 8001f96:	54e2      	strb	r2, [r4, r3]
}
 8001f98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001f9a:	2040      	movs	r0, #64	@ 0x40
 8001f9c:	0001      	movs	r1, r0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001f9e:	6822      	ldr	r2, [r4, #0]
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001fa0:	6993      	ldr	r3, [r2, #24]
 8001fa2:	4019      	ands	r1, r3
    if(Format == RTC_FORMAT_BIN)
 8001fa4:	2d00      	cmp	r5, #0
 8001fa6:	d12e      	bne.n	8002006 <HAL_RTC_SetTime+0xa6>
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001fa8:	4218      	tst	r0, r3
 8001faa:	d051      	beq.n	8002050 <HAL_RTC_SetTime+0xf0>
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8001fac:	78f1      	ldrb	r1, [r6, #3]
 8001fae:	0589      	lsls	r1, r1, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8001fb0:	7833      	ldrb	r3, [r6, #0]
  while(Param >= 10U)
 8001fb2:	2b09      	cmp	r3, #9
 8001fb4:	d908      	bls.n	8001fc8 <HAL_RTC_SetTime+0x68>
  uint32_t bcdhigh = 0U;
 8001fb6:	2000      	movs	r0, #0
    Param -= 10U;
 8001fb8:	3b0a      	subs	r3, #10
 8001fba:	b2db      	uxtb	r3, r3
    bcdhigh++;
 8001fbc:	3001      	adds	r0, #1
  while(Param >= 10U)
 8001fbe:	2b09      	cmp	r3, #9
 8001fc0:	d8fa      	bhi.n	8001fb8 <HAL_RTC_SetTime+0x58>
  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8001fc2:	0100      	lsls	r0, r0, #4
 8001fc4:	4303      	orrs	r3, r0
 8001fc6:	b2db      	uxtb	r3, r3
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8001fc8:	041f      	lsls	r7, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001fca:	7873      	ldrb	r3, [r6, #1]
  while(Param >= 10U)
 8001fcc:	2b09      	cmp	r3, #9
 8001fce:	d908      	bls.n	8001fe2 <HAL_RTC_SetTime+0x82>
  uint32_t bcdhigh = 0U;
 8001fd0:	2000      	movs	r0, #0
    Param -= 10U;
 8001fd2:	3b0a      	subs	r3, #10
 8001fd4:	b2db      	uxtb	r3, r3
    bcdhigh++;
 8001fd6:	3001      	adds	r0, #1
  while(Param >= 10U)
 8001fd8:	2b09      	cmp	r3, #9
 8001fda:	d8fa      	bhi.n	8001fd2 <HAL_RTC_SetTime+0x72>
  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8001fdc:	0100      	lsls	r0, r0, #4
 8001fde:	4303      	orrs	r3, r0
 8001fe0:	b2db      	uxtb	r3, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8001fe2:	78b0      	ldrb	r0, [r6, #2]
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001fe4:	021b      	lsls	r3, r3, #8
  while(Param >= 10U)
 8001fe6:	2809      	cmp	r0, #9
 8001fe8:	d907      	bls.n	8001ffa <HAL_RTC_SetTime+0x9a>
    Param -= 10U;
 8001fea:	380a      	subs	r0, #10
 8001fec:	b2c0      	uxtb	r0, r0
    bcdhigh++;
 8001fee:	3501      	adds	r5, #1
  while(Param >= 10U)
 8001ff0:	2809      	cmp	r0, #9
 8001ff2:	d8fa      	bhi.n	8001fea <HAL_RTC_SetTime+0x8a>
  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8001ff4:	012d      	lsls	r5, r5, #4
 8001ff6:	4328      	orrs	r0, r5
 8001ff8:	b2c0      	uxtb	r0, r0
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8001ffa:	430f      	orrs	r7, r1
 8001ffc:	433b      	orrs	r3, r7
 8001ffe:	4303      	orrs	r3, r0
 8002000:	e00d      	b.n	800201e <HAL_RTC_SetTime+0xbe>
  __HAL_LOCK(hrtc);
 8002002:	2002      	movs	r0, #2
 8002004:	e7c8      	b.n	8001f98 <HAL_RTC_SetTime+0x38>
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002006:	4218      	tst	r0, r3
 8002008:	d024      	beq.n	8002054 <HAL_RTC_SetTime+0xf4>
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800200a:	78f1      	ldrb	r1, [r6, #3]
 800200c:	0589      	lsls	r1, r1, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800200e:	7833      	ldrb	r3, [r6, #0]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002010:	7870      	ldrb	r0, [r6, #1]
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002012:	041b      	lsls	r3, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002014:	0200      	lsls	r0, r0, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002016:	4303      	orrs	r3, r0
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002018:	78b0      	ldrb	r0, [r6, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800201a:	4303      	orrs	r3, r0
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800201c:	430b      	orrs	r3, r1
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800201e:	490e      	ldr	r1, [pc, #56]	@ (8002058 <HAL_RTC_SetTime+0xf8>)
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002020:	6930      	ldr	r0, [r6, #16]
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002022:	400b      	ands	r3, r1
 8002024:	6013      	str	r3, [r2, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002026:	6993      	ldr	r3, [r2, #24]
 8002028:	490c      	ldr	r1, [pc, #48]	@ (800205c <HAL_RTC_SetTime+0xfc>)
 800202a:	400b      	ands	r3, r1
 800202c:	6193      	str	r3, [r2, #24]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800202e:	68f3      	ldr	r3, [r6, #12]
 8002030:	6991      	ldr	r1, [r2, #24]
 8002032:	4303      	orrs	r3, r0
 8002034:	430b      	orrs	r3, r1
 8002036:	6193      	str	r3, [r2, #24]
    status = RTC_ExitInitMode(hrtc);
 8002038:	0020      	movs	r0, r4
 800203a:	f7ff fee9 	bl	8001e10 <RTC_ExitInitMode>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800203e:	22ff      	movs	r2, #255	@ 0xff
 8002040:	6823      	ldr	r3, [r4, #0]
 8002042:	625a      	str	r2, [r3, #36]	@ 0x24
  if (status == HAL_OK)
 8002044:	2800      	cmp	r0, #0
 8002046:	d1a4      	bne.n	8001f92 <HAL_RTC_SetTime+0x32>
   hrtc->State = HAL_RTC_STATE_READY;
 8002048:	2329      	movs	r3, #41	@ 0x29
 800204a:	3afe      	subs	r2, #254	@ 0xfe
 800204c:	54e2      	strb	r2, [r4, r3]
 800204e:	e7a0      	b.n	8001f92 <HAL_RTC_SetTime+0x32>
        sTime->TimeFormat = 0x00U;
 8002050:	70f1      	strb	r1, [r6, #3]
 8002052:	e7ad      	b.n	8001fb0 <HAL_RTC_SetTime+0x50>
        sTime->TimeFormat = 0x00U;
 8002054:	70f1      	strb	r1, [r6, #3]
 8002056:	e7da      	b.n	800200e <HAL_RTC_SetTime+0xae>
 8002058:	007f7f7f 	.word	0x007f7f7f
 800205c:	fffbffff 	.word	0xfffbffff

08002060 <HAL_RTC_SetDate>:
{
 8002060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 __HAL_LOCK(hrtc);
 8002062:	2328      	movs	r3, #40	@ 0x28
{
 8002064:	0005      	movs	r5, r0
 __HAL_LOCK(hrtc);
 8002066:	5cc0      	ldrb	r0, [r0, r3]
 8002068:	2801      	cmp	r0, #1
 800206a:	d060      	beq.n	800212e <HAL_RTC_SetDate+0xce>
 800206c:	2001      	movs	r0, #1
 800206e:	54e8      	strb	r0, [r5, r3]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002070:	3301      	adds	r3, #1
 8002072:	3001      	adds	r0, #1
 8002074:	54e8      	strb	r0, [r5, r3]
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002076:	780f      	ldrb	r7, [r1, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002078:	78cb      	ldrb	r3, [r1, #3]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800207a:	7848      	ldrb	r0, [r1, #1]
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 800207c:	788e      	ldrb	r6, [r1, #2]
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800207e:	037f      	lsls	r7, r7, #13
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002080:	2a00      	cmp	r2, #0
 8002082:	d015      	beq.n	80020b0 <HAL_RTC_SetDate+0x50>
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002084:	041c      	lsls	r4, r3, #16
 8002086:	433c      	orrs	r4, r7
 8002088:	4334      	orrs	r4, r6
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800208a:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800208c:	4304      	orrs	r4, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800208e:	22ca      	movs	r2, #202	@ 0xca
 8002090:	682b      	ldr	r3, [r5, #0]
  status = RTC_EnterInitMode(hrtc);
 8002092:	0028      	movs	r0, r5
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002094:	625a      	str	r2, [r3, #36]	@ 0x24
 8002096:	3a77      	subs	r2, #119	@ 0x77
 8002098:	625a      	str	r2, [r3, #36]	@ 0x24
  status = RTC_EnterInitMode(hrtc);
 800209a:	f7ff fe8f 	bl	8001dbc <RTC_EnterInitMode>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800209e:	682b      	ldr	r3, [r5, #0]
  if(status == HAL_OK)
 80020a0:	2800      	cmp	r0, #0
 80020a2:	d032      	beq.n	800210a <HAL_RTC_SetDate+0xaa>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80020a4:	22ff      	movs	r2, #255	@ 0xff
 80020a6:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_UNLOCK(hrtc);
 80020a8:	2328      	movs	r3, #40	@ 0x28
 80020aa:	2200      	movs	r2, #0
 80020ac:	54ea      	strb	r2, [r5, r3]
}
 80020ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80020b0:	2410      	movs	r4, #16
 80020b2:	4204      	tst	r4, r0
 80020b4:	d038      	beq.n	8002128 <HAL_RTC_SetDate+0xc8>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80020b6:	43a0      	bics	r0, r4
 80020b8:	300a      	adds	r0, #10
 80020ba:	b2c0      	uxtb	r0, r0
 80020bc:	7048      	strb	r0, [r1, #1]
  while(Param >= 10U)
 80020be:	2b09      	cmp	r3, #9
 80020c0:	d937      	bls.n	8002132 <HAL_RTC_SetDate+0xd2>
  uint32_t bcdhigh = 0U;
 80020c2:	2100      	movs	r1, #0
    Param -= 10U;
 80020c4:	3b0a      	subs	r3, #10
 80020c6:	b2db      	uxtb	r3, r3
    bcdhigh++;
 80020c8:	3101      	adds	r1, #1
  while(Param >= 10U)
 80020ca:	2b09      	cmp	r3, #9
 80020cc:	d8fa      	bhi.n	80020c4 <HAL_RTC_SetDate+0x64>
  return  ((uint8_t)(bcdhigh << 4U) | Param);
 80020ce:	0109      	lsls	r1, r1, #4
 80020d0:	430b      	orrs	r3, r1
 80020d2:	b2db      	uxtb	r3, r3
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80020d4:	041b      	lsls	r3, r3, #16
  while(Param >= 10U)
 80020d6:	2809      	cmp	r0, #9
 80020d8:	d908      	bls.n	80020ec <HAL_RTC_SetDate+0x8c>
  uint32_t bcdhigh = 0U;
 80020da:	2100      	movs	r1, #0
    Param -= 10U;
 80020dc:	380a      	subs	r0, #10
 80020de:	b2c0      	uxtb	r0, r0
    bcdhigh++;
 80020e0:	3101      	adds	r1, #1
  while(Param >= 10U)
 80020e2:	2809      	cmp	r0, #9
 80020e4:	d8fa      	bhi.n	80020dc <HAL_RTC_SetDate+0x7c>
  return  ((uint8_t)(bcdhigh << 4U) | Param);
 80020e6:	0109      	lsls	r1, r1, #4
 80020e8:	4308      	orrs	r0, r1
 80020ea:	b2c0      	uxtb	r0, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80020ec:	0204      	lsls	r4, r0, #8
  while(Param >= 10U)
 80020ee:	2e09      	cmp	r6, #9
 80020f0:	d907      	bls.n	8002102 <HAL_RTC_SetDate+0xa2>
    Param -= 10U;
 80020f2:	3e0a      	subs	r6, #10
 80020f4:	b2f6      	uxtb	r6, r6
    bcdhigh++;
 80020f6:	3201      	adds	r2, #1
  while(Param >= 10U)
 80020f8:	2e09      	cmp	r6, #9
 80020fa:	d8fa      	bhi.n	80020f2 <HAL_RTC_SetDate+0x92>
  return  ((uint8_t)(bcdhigh << 4U) | Param);
 80020fc:	0112      	lsls	r2, r2, #4
 80020fe:	4316      	orrs	r6, r2
 8002100:	b2f6      	uxtb	r6, r6
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002102:	433b      	orrs	r3, r7
 8002104:	431c      	orrs	r4, r3
 8002106:	4334      	orrs	r4, r6
 8002108:	e7c1      	b.n	800208e <HAL_RTC_SetDate+0x2e>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800210a:	4a0b      	ldr	r2, [pc, #44]	@ (8002138 <HAL_RTC_SetDate+0xd8>)
    status = RTC_ExitInitMode(hrtc);
 800210c:	0028      	movs	r0, r5
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800210e:	4014      	ands	r4, r2
 8002110:	605c      	str	r4, [r3, #4]
    status = RTC_ExitInitMode(hrtc);
 8002112:	f7ff fe7d 	bl	8001e10 <RTC_ExitInitMode>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002116:	22ff      	movs	r2, #255	@ 0xff
 8002118:	682b      	ldr	r3, [r5, #0]
 800211a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (status == HAL_OK)
 800211c:	2800      	cmp	r0, #0
 800211e:	d1c3      	bne.n	80020a8 <HAL_RTC_SetDate+0x48>
    hrtc->State = HAL_RTC_STATE_READY;
 8002120:	2329      	movs	r3, #41	@ 0x29
 8002122:	3afe      	subs	r2, #254	@ 0xfe
 8002124:	54ea      	strb	r2, [r5, r3]
 8002126:	e7bf      	b.n	80020a8 <HAL_RTC_SetDate+0x48>
  while(Param >= 10U)
 8002128:	2b09      	cmp	r3, #9
 800212a:	d8ca      	bhi.n	80020c2 <HAL_RTC_SetDate+0x62>
 800212c:	e7d2      	b.n	80020d4 <HAL_RTC_SetDate+0x74>
 __HAL_LOCK(hrtc);
 800212e:	2002      	movs	r0, #2
 8002130:	e7bd      	b.n	80020ae <HAL_RTC_SetDate+0x4e>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002132:	041b      	lsls	r3, r3, #16
  while(Param >= 10U)
 8002134:	e7d1      	b.n	80020da <HAL_RTC_SetDate+0x7a>
 8002136:	46c0      	nop			@ (mov r8, r8)
 8002138:	00ffff3f 	.word	0x00ffff3f

0800213c <_ZN7ssd130612UpdateScreenEv>:
void ssd1306::Fill(SSD1306_COLOR color) {
    memset(this->SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(this->SSD1306_Buffer));
}

/* Write the screenbuffer with changed to the screen */
void ssd1306::UpdateScreen(void) {
 800213c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800213e:	4657      	mov	r7, sl
 8002140:	464e      	mov	r6, r9
 8002142:	4645      	mov	r5, r8
 8002144:	46de      	mov	lr, fp
 8002146:	2380      	movs	r3, #128	@ 0x80
 8002148:	4683      	mov	fp, r0
 800214a:	b5e0      	push	{r5, r6, r7, lr}
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	b089      	sub	sp, #36	@ 0x24
 8002150:	445b      	add	r3, fp
 8002152:	9305      	str	r3, [sp, #20]
 8002154:	ab02      	add	r3, sp, #8
 8002156:	469c      	mov	ip, r3
 8002158:	4b26      	ldr	r3, [pc, #152]	@ (80021f4 <_ZN7ssd130612UpdateScreenEv+0xb8>)
 800215a:	2417      	movs	r4, #23
 800215c:	4698      	mov	r8, r3
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, this->PanelAddr, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800215e:	2301      	movs	r3, #1
 8002160:	2780      	movs	r7, #128	@ 0x80
 8002162:	2601      	movs	r6, #1
 8002164:	4681      	mov	r9, r0
void ssd1306::UpdateScreen(void) {
 8002166:	25b0      	movs	r5, #176	@ 0xb0
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, this->PanelAddr, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002168:	469a      	mov	sl, r3
 800216a:	4464      	add	r4, ip
 800216c:	00ff      	lsls	r7, r7, #3
 800216e:	4276      	negs	r6, r6
 8002170:	465b      	mov	r3, fp
 8002172:	7025      	strb	r5, [r4, #0]
 8002174:	5bd9      	ldrh	r1, [r3, r7]
 8002176:	4653      	mov	r3, sl
 8002178:	2200      	movs	r2, #0
 800217a:	9301      	str	r3, [sp, #4]
 800217c:	4640      	mov	r0, r8
 800217e:	2301      	movs	r3, #1
 8002180:	9602      	str	r6, [sp, #8]
 8002182:	9400      	str	r4, [sp, #0]
 8002184:	f7fe ffde 	bl	8001144 <HAL_I2C_Mem_Write>
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
        WriteCommand(0xB0 + i); // Set the current RAM page address.
        WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002188:	2300      	movs	r3, #0
 800218a:	7023      	strb	r3, [r4, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, this->PanelAddr, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800218c:	465b      	mov	r3, fp
 800218e:	5bd9      	ldrh	r1, [r3, r7]
 8002190:	4653      	mov	r3, sl
 8002192:	2200      	movs	r2, #0
 8002194:	9301      	str	r3, [sp, #4]
 8002196:	4640      	mov	r0, r8
 8002198:	2301      	movs	r3, #1
 800219a:	9602      	str	r6, [sp, #8]
 800219c:	9400      	str	r4, [sp, #0]
 800219e:	f7fe ffd1 	bl	8001144 <HAL_I2C_Mem_Write>
        WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80021a2:	2310      	movs	r3, #16
 80021a4:	7023      	strb	r3, [r4, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, this->PanelAddr, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80021a6:	465b      	mov	r3, fp
 80021a8:	5bd9      	ldrh	r1, [r3, r7]
 80021aa:	4653      	mov	r3, sl
 80021ac:	2200      	movs	r2, #0
 80021ae:	9301      	str	r3, [sp, #4]
 80021b0:	4640      	mov	r0, r8
 80021b2:	2301      	movs	r3, #1
 80021b4:	9602      	str	r6, [sp, #8]
 80021b6:	9400      	str	r4, [sp, #0]
 80021b8:	f7fe ffc4 	bl	8001144 <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, this->PanelAddr, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80021bc:	465b      	mov	r3, fp
 80021be:	5bd9      	ldrh	r1, [r3, r7]
 80021c0:	2380      	movs	r3, #128	@ 0x80
 80021c2:	9301      	str	r3, [sp, #4]
 80021c4:	464b      	mov	r3, r9
 80021c6:	2240      	movs	r2, #64	@ 0x40
 80021c8:	9300      	str	r3, [sp, #0]
 80021ca:	4640      	mov	r0, r8
 80021cc:	2301      	movs	r3, #1
 80021ce:	9602      	str	r6, [sp, #8]
 80021d0:	f7fe ffb8 	bl	8001144 <HAL_I2C_Mem_Write>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80021d4:	2380      	movs	r3, #128	@ 0x80
 80021d6:	469c      	mov	ip, r3
 80021d8:	9b05      	ldr	r3, [sp, #20]
 80021da:	3501      	adds	r5, #1
 80021dc:	44e1      	add	r9, ip
 80021de:	b2ed      	uxtb	r5, r5
 80021e0:	4599      	cmp	r9, r3
 80021e2:	d1c5      	bne.n	8002170 <_ZN7ssd130612UpdateScreenEv+0x34>
        WriteData(&this->SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
    }
}
 80021e4:	b009      	add	sp, #36	@ 0x24
 80021e6:	bcf0      	pop	{r4, r5, r6, r7}
 80021e8:	46bb      	mov	fp, r7
 80021ea:	46b2      	mov	sl, r6
 80021ec:	46a9      	mov	r9, r5
 80021ee:	46a0      	mov	r8, r4
 80021f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021f2:	46c0      	nop			@ (mov r8, r8)
 80021f4:	20000108 	.word	0x20000108

080021f8 <_ZN7ssd13064InitEv>:
void ssd1306::Init(void) {
 80021f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021fa:	46de      	mov	lr, fp
 80021fc:	4657      	mov	r7, sl
 80021fe:	464e      	mov	r6, r9
 8002200:	4645      	mov	r5, r8
 8002202:	b5e0      	push	{r5, r6, r7, lr}
 8002204:	0005      	movs	r5, r0
 8002206:	b087      	sub	sp, #28
    HAL_Delay(100);
 8002208:	2064      	movs	r0, #100	@ 0x64
 800220a:	f7fe faa7 	bl	800075c <HAL_Delay>
	this->IsDisplayOn = 1;
    WriteCommand(0xAF);
}

void ssd1306::DisplayOff(void) {
	this->IsDisplayOn = 0;
 800220e:	2300      	movs	r3, #0
 8002210:	469a      	mov	sl, r3
 8002212:	4652      	mov	r2, sl
 8002214:	4bc5      	ldr	r3, [pc, #788]	@ (800252c <_ZN7ssd13064InitEv+0x334>)
 8002216:	2417      	movs	r4, #23
 8002218:	54ea      	strb	r2, [r5, r3]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, this->PanelAddr, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800221a:	2780      	movs	r7, #128	@ 0x80
 800221c:	23ae      	movs	r3, #174	@ 0xae
 800221e:	446c      	add	r4, sp
 8002220:	4ec3      	ldr	r6, [pc, #780]	@ (8002530 <_ZN7ssd13064InitEv+0x338>)
 8002222:	00ff      	lsls	r7, r7, #3
 8002224:	7023      	strb	r3, [r4, #0]
 8002226:	3a01      	subs	r2, #1
 8002228:	4691      	mov	r9, r2
 800222a:	5be9      	ldrh	r1, [r5, r7]
 800222c:	9202      	str	r2, [sp, #8]
 800222e:	3202      	adds	r2, #2
 8002230:	4690      	mov	r8, r2
 8002232:	9201      	str	r2, [sp, #4]
 8002234:	0030      	movs	r0, r6
 8002236:	2200      	movs	r2, #0
 8002238:	9400      	str	r4, [sp, #0]
 800223a:	3bad      	subs	r3, #173	@ 0xad
 800223c:	f7fe ff82 	bl	8001144 <HAL_I2C_Mem_Write>
    WriteCommand(0x20); //Set Memory Addressing Mode
 8002240:	2220      	movs	r2, #32
 8002242:	7022      	strb	r2, [r4, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, this->PanelAddr, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002244:	4693      	mov	fp, r2
 8002246:	464a      	mov	r2, r9
 8002248:	5be9      	ldrh	r1, [r5, r7]
 800224a:	9202      	str	r2, [sp, #8]
 800224c:	4642      	mov	r2, r8
 800224e:	2301      	movs	r3, #1
 8002250:	9201      	str	r2, [sp, #4]
 8002252:	0030      	movs	r0, r6
 8002254:	2200      	movs	r2, #0
 8002256:	9400      	str	r4, [sp, #0]
 8002258:	f7fe ff74 	bl	8001144 <HAL_I2C_Mem_Write>
    WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800225c:	4652      	mov	r2, sl
 800225e:	7022      	strb	r2, [r4, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, this->PanelAddr, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002260:	464a      	mov	r2, r9
 8002262:	5be9      	ldrh	r1, [r5, r7]
 8002264:	9202      	str	r2, [sp, #8]
 8002266:	4642      	mov	r2, r8
 8002268:	2301      	movs	r3, #1
 800226a:	9201      	str	r2, [sp, #4]
 800226c:	0030      	movs	r0, r6
 800226e:	2200      	movs	r2, #0
 8002270:	9400      	str	r4, [sp, #0]
 8002272:	f7fe ff67 	bl	8001144 <HAL_I2C_Mem_Write>
    WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002276:	23b0      	movs	r3, #176	@ 0xb0
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, this->PanelAddr, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002278:	464a      	mov	r2, r9
 800227a:	7023      	strb	r3, [r4, #0]
 800227c:	5be9      	ldrh	r1, [r5, r7]
 800227e:	9202      	str	r2, [sp, #8]
 8002280:	4642      	mov	r2, r8
 8002282:	0030      	movs	r0, r6
 8002284:	9201      	str	r2, [sp, #4]
 8002286:	9400      	str	r4, [sp, #0]
 8002288:	2200      	movs	r2, #0
 800228a:	3baf      	subs	r3, #175	@ 0xaf
 800228c:	f7fe ff5a 	bl	8001144 <HAL_I2C_Mem_Write>
    WriteCommand(0xC8); //Set COM Output Scan Direction
 8002290:	23c8      	movs	r3, #200	@ 0xc8
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, this->PanelAddr, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002292:	464a      	mov	r2, r9
 8002294:	7023      	strb	r3, [r4, #0]
 8002296:	5be9      	ldrh	r1, [r5, r7]
 8002298:	9202      	str	r2, [sp, #8]
 800229a:	4642      	mov	r2, r8
 800229c:	0030      	movs	r0, r6
 800229e:	9201      	str	r2, [sp, #4]
 80022a0:	9400      	str	r4, [sp, #0]
 80022a2:	2200      	movs	r2, #0
 80022a4:	3bc7      	subs	r3, #199	@ 0xc7
 80022a6:	f7fe ff4d 	bl	8001144 <HAL_I2C_Mem_Write>
    WriteCommand(0x00); //---set low column address
 80022aa:	4652      	mov	r2, sl
 80022ac:	7022      	strb	r2, [r4, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, this->PanelAddr, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80022ae:	464a      	mov	r2, r9
 80022b0:	5be9      	ldrh	r1, [r5, r7]
 80022b2:	9202      	str	r2, [sp, #8]
 80022b4:	4642      	mov	r2, r8
 80022b6:	2301      	movs	r3, #1
 80022b8:	9201      	str	r2, [sp, #4]
 80022ba:	0030      	movs	r0, r6
 80022bc:	2200      	movs	r2, #0
 80022be:	9400      	str	r4, [sp, #0]
 80022c0:	f7fe ff40 	bl	8001144 <HAL_I2C_Mem_Write>
    WriteCommand(0x10); //---set high column address
 80022c4:	2310      	movs	r3, #16
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, this->PanelAddr, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80022c6:	464a      	mov	r2, r9
 80022c8:	7023      	strb	r3, [r4, #0]
 80022ca:	5be9      	ldrh	r1, [r5, r7]
 80022cc:	9202      	str	r2, [sp, #8]
 80022ce:	4642      	mov	r2, r8
 80022d0:	0030      	movs	r0, r6
 80022d2:	9201      	str	r2, [sp, #4]
 80022d4:	9400      	str	r4, [sp, #0]
 80022d6:	2200      	movs	r2, #0
 80022d8:	3b0f      	subs	r3, #15
 80022da:	f7fe ff33 	bl	8001144 <HAL_I2C_Mem_Write>
    WriteCommand(0x40); //--set start line address - CHECK
 80022de:	2340      	movs	r3, #64	@ 0x40
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, this->PanelAddr, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80022e0:	464a      	mov	r2, r9
 80022e2:	7023      	strb	r3, [r4, #0]
 80022e4:	5be9      	ldrh	r1, [r5, r7]
 80022e6:	9202      	str	r2, [sp, #8]
 80022e8:	4642      	mov	r2, r8
 80022ea:	0030      	movs	r0, r6
 80022ec:	9201      	str	r2, [sp, #4]
 80022ee:	9400      	str	r4, [sp, #0]
 80022f0:	2200      	movs	r2, #0
 80022f2:	3b3f      	subs	r3, #63	@ 0x3f
 80022f4:	f7fe ff26 	bl	8001144 <HAL_I2C_Mem_Write>
    WriteCommand(kSetContrastControlRegister);
 80022f8:	2381      	movs	r3, #129	@ 0x81
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, this->PanelAddr, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80022fa:	464a      	mov	r2, r9
 80022fc:	7023      	strb	r3, [r4, #0]
 80022fe:	5be9      	ldrh	r1, [r5, r7]
 8002300:	9202      	str	r2, [sp, #8]
 8002302:	4642      	mov	r2, r8
 8002304:	0030      	movs	r0, r6
 8002306:	9201      	str	r2, [sp, #4]
 8002308:	9400      	str	r4, [sp, #0]
 800230a:	2200      	movs	r2, #0
 800230c:	3b80      	subs	r3, #128	@ 0x80
 800230e:	f7fe ff19 	bl	8001144 <HAL_I2C_Mem_Write>
    WriteCommand(value);
 8002312:	464a      	mov	r2, r9
 8002314:	7022      	strb	r2, [r4, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, this->PanelAddr, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002316:	5be9      	ldrh	r1, [r5, r7]
 8002318:	9202      	str	r2, [sp, #8]
 800231a:	4642      	mov	r2, r8
 800231c:	2301      	movs	r3, #1
 800231e:	9201      	str	r2, [sp, #4]
 8002320:	0030      	movs	r0, r6
 8002322:	2200      	movs	r2, #0
 8002324:	9400      	str	r4, [sp, #0]
 8002326:	f7fe ff0d 	bl	8001144 <HAL_I2C_Mem_Write>
    WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 800232a:	23a1      	movs	r3, #161	@ 0xa1
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, this->PanelAddr, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800232c:	464a      	mov	r2, r9
 800232e:	7023      	strb	r3, [r4, #0]
 8002330:	5be9      	ldrh	r1, [r5, r7]
 8002332:	9202      	str	r2, [sp, #8]
 8002334:	4642      	mov	r2, r8
 8002336:	0030      	movs	r0, r6
 8002338:	9201      	str	r2, [sp, #4]
 800233a:	9400      	str	r4, [sp, #0]
 800233c:	2200      	movs	r2, #0
 800233e:	3ba0      	subs	r3, #160	@ 0xa0
 8002340:	f7fe ff00 	bl	8001144 <HAL_I2C_Mem_Write>
    WriteCommand(0xA6); //--set normal color
 8002344:	23a6      	movs	r3, #166	@ 0xa6
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, this->PanelAddr, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002346:	464a      	mov	r2, r9
 8002348:	7023      	strb	r3, [r4, #0]
 800234a:	5be9      	ldrh	r1, [r5, r7]
 800234c:	9202      	str	r2, [sp, #8]
 800234e:	4642      	mov	r2, r8
 8002350:	0030      	movs	r0, r6
 8002352:	9201      	str	r2, [sp, #4]
 8002354:	9400      	str	r4, [sp, #0]
 8002356:	2200      	movs	r2, #0
 8002358:	3ba5      	subs	r3, #165	@ 0xa5
 800235a:	f7fe fef3 	bl	8001144 <HAL_I2C_Mem_Write>
    WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800235e:	23a8      	movs	r3, #168	@ 0xa8
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, this->PanelAddr, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002360:	464a      	mov	r2, r9
 8002362:	7023      	strb	r3, [r4, #0]
 8002364:	5be9      	ldrh	r1, [r5, r7]
 8002366:	9202      	str	r2, [sp, #8]
 8002368:	4642      	mov	r2, r8
 800236a:	0030      	movs	r0, r6
 800236c:	9201      	str	r2, [sp, #4]
 800236e:	9400      	str	r4, [sp, #0]
 8002370:	2200      	movs	r2, #0
 8002372:	3ba7      	subs	r3, #167	@ 0xa7
 8002374:	f7fe fee6 	bl	8001144 <HAL_I2C_Mem_Write>
    WriteCommand(0x3F); //
 8002378:	233f      	movs	r3, #63	@ 0x3f
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, this->PanelAddr, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800237a:	464a      	mov	r2, r9
 800237c:	7023      	strb	r3, [r4, #0]
 800237e:	5be9      	ldrh	r1, [r5, r7]
 8002380:	9202      	str	r2, [sp, #8]
 8002382:	4642      	mov	r2, r8
 8002384:	0030      	movs	r0, r6
 8002386:	9201      	str	r2, [sp, #4]
 8002388:	9400      	str	r4, [sp, #0]
 800238a:	2200      	movs	r2, #0
 800238c:	3b3e      	subs	r3, #62	@ 0x3e
 800238e:	f7fe fed9 	bl	8001144 <HAL_I2C_Mem_Write>
    WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002392:	23a4      	movs	r3, #164	@ 0xa4
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, this->PanelAddr, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002394:	464a      	mov	r2, r9
 8002396:	7023      	strb	r3, [r4, #0]
 8002398:	5be9      	ldrh	r1, [r5, r7]
 800239a:	9202      	str	r2, [sp, #8]
 800239c:	4642      	mov	r2, r8
 800239e:	0030      	movs	r0, r6
 80023a0:	9201      	str	r2, [sp, #4]
 80023a2:	9400      	str	r4, [sp, #0]
 80023a4:	2200      	movs	r2, #0
 80023a6:	3ba3      	subs	r3, #163	@ 0xa3
 80023a8:	f7fe fecc 	bl	8001144 <HAL_I2C_Mem_Write>
    WriteCommand(0xD3); //-set display offset - CHECK
 80023ac:	23d3      	movs	r3, #211	@ 0xd3
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, this->PanelAddr, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80023ae:	464a      	mov	r2, r9
 80023b0:	7023      	strb	r3, [r4, #0]
 80023b2:	5be9      	ldrh	r1, [r5, r7]
 80023b4:	9202      	str	r2, [sp, #8]
 80023b6:	4642      	mov	r2, r8
 80023b8:	0030      	movs	r0, r6
 80023ba:	9201      	str	r2, [sp, #4]
 80023bc:	9400      	str	r4, [sp, #0]
 80023be:	2200      	movs	r2, #0
 80023c0:	3bd2      	subs	r3, #210	@ 0xd2
 80023c2:	f7fe febf 	bl	8001144 <HAL_I2C_Mem_Write>
    WriteCommand(0x00); //-not offset
 80023c6:	4652      	mov	r2, sl
 80023c8:	7022      	strb	r2, [r4, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, this->PanelAddr, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80023ca:	464a      	mov	r2, r9
 80023cc:	5be9      	ldrh	r1, [r5, r7]
 80023ce:	9202      	str	r2, [sp, #8]
 80023d0:	4642      	mov	r2, r8
 80023d2:	2301      	movs	r3, #1
 80023d4:	9201      	str	r2, [sp, #4]
 80023d6:	0030      	movs	r0, r6
 80023d8:	2200      	movs	r2, #0
 80023da:	9400      	str	r4, [sp, #0]
 80023dc:	f7fe feb2 	bl	8001144 <HAL_I2C_Mem_Write>
    WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80023e0:	23d5      	movs	r3, #213	@ 0xd5
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, this->PanelAddr, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80023e2:	464a      	mov	r2, r9
 80023e4:	7023      	strb	r3, [r4, #0]
 80023e6:	5be9      	ldrh	r1, [r5, r7]
 80023e8:	9202      	str	r2, [sp, #8]
 80023ea:	4642      	mov	r2, r8
 80023ec:	0030      	movs	r0, r6
 80023ee:	9201      	str	r2, [sp, #4]
 80023f0:	9400      	str	r4, [sp, #0]
 80023f2:	2200      	movs	r2, #0
 80023f4:	3bd4      	subs	r3, #212	@ 0xd4
 80023f6:	f7fe fea5 	bl	8001144 <HAL_I2C_Mem_Write>
    WriteCommand(0xF0); //--set divide ratio
 80023fa:	23f0      	movs	r3, #240	@ 0xf0
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, this->PanelAddr, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80023fc:	464a      	mov	r2, r9
 80023fe:	7023      	strb	r3, [r4, #0]
 8002400:	5be9      	ldrh	r1, [r5, r7]
 8002402:	9202      	str	r2, [sp, #8]
 8002404:	4642      	mov	r2, r8
 8002406:	0030      	movs	r0, r6
 8002408:	9201      	str	r2, [sp, #4]
 800240a:	9400      	str	r4, [sp, #0]
 800240c:	2200      	movs	r2, #0
 800240e:	3bef      	subs	r3, #239	@ 0xef
 8002410:	f7fe fe98 	bl	8001144 <HAL_I2C_Mem_Write>
    WriteCommand(0xD9); //--set pre-charge period
 8002414:	23d9      	movs	r3, #217	@ 0xd9
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, this->PanelAddr, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002416:	464a      	mov	r2, r9
 8002418:	7023      	strb	r3, [r4, #0]
 800241a:	5be9      	ldrh	r1, [r5, r7]
 800241c:	9202      	str	r2, [sp, #8]
 800241e:	4642      	mov	r2, r8
 8002420:	0030      	movs	r0, r6
 8002422:	9201      	str	r2, [sp, #4]
 8002424:	9400      	str	r4, [sp, #0]
 8002426:	2200      	movs	r2, #0
 8002428:	3bd8      	subs	r3, #216	@ 0xd8
 800242a:	f7fe fe8b 	bl	8001144 <HAL_I2C_Mem_Write>
    WriteCommand(0x22); //
 800242e:	2322      	movs	r3, #34	@ 0x22
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, this->PanelAddr, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002430:	464a      	mov	r2, r9
 8002432:	7023      	strb	r3, [r4, #0]
 8002434:	5be9      	ldrh	r1, [r5, r7]
 8002436:	9202      	str	r2, [sp, #8]
 8002438:	4642      	mov	r2, r8
 800243a:	0030      	movs	r0, r6
 800243c:	9201      	str	r2, [sp, #4]
 800243e:	9400      	str	r4, [sp, #0]
 8002440:	2200      	movs	r2, #0
 8002442:	3b21      	subs	r3, #33	@ 0x21
 8002444:	f7fe fe7e 	bl	8001144 <HAL_I2C_Mem_Write>
    WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8002448:	23da      	movs	r3, #218	@ 0xda
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, this->PanelAddr, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800244a:	464a      	mov	r2, r9
 800244c:	7023      	strb	r3, [r4, #0]
 800244e:	5be9      	ldrh	r1, [r5, r7]
 8002450:	9202      	str	r2, [sp, #8]
 8002452:	4642      	mov	r2, r8
 8002454:	0030      	movs	r0, r6
 8002456:	9201      	str	r2, [sp, #4]
 8002458:	9400      	str	r4, [sp, #0]
 800245a:	2200      	movs	r2, #0
 800245c:	3bd9      	subs	r3, #217	@ 0xd9
 800245e:	f7fe fe71 	bl	8001144 <HAL_I2C_Mem_Write>
    WriteCommand(0x12);
 8002462:	2312      	movs	r3, #18
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, this->PanelAddr, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002464:	464a      	mov	r2, r9
 8002466:	7023      	strb	r3, [r4, #0]
 8002468:	5be9      	ldrh	r1, [r5, r7]
 800246a:	9202      	str	r2, [sp, #8]
 800246c:	4642      	mov	r2, r8
 800246e:	0030      	movs	r0, r6
 8002470:	9201      	str	r2, [sp, #4]
 8002472:	9400      	str	r4, [sp, #0]
 8002474:	2200      	movs	r2, #0
 8002476:	3b11      	subs	r3, #17
 8002478:	f7fe fe64 	bl	8001144 <HAL_I2C_Mem_Write>
    WriteCommand(0xDB); //--set vcomh
 800247c:	23db      	movs	r3, #219	@ 0xdb
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, this->PanelAddr, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800247e:	464a      	mov	r2, r9
 8002480:	7023      	strb	r3, [r4, #0]
 8002482:	5be9      	ldrh	r1, [r5, r7]
 8002484:	9202      	str	r2, [sp, #8]
 8002486:	4642      	mov	r2, r8
 8002488:	0030      	movs	r0, r6
 800248a:	9201      	str	r2, [sp, #4]
 800248c:	9400      	str	r4, [sp, #0]
 800248e:	2200      	movs	r2, #0
 8002490:	3bda      	subs	r3, #218	@ 0xda
 8002492:	f7fe fe57 	bl	8001144 <HAL_I2C_Mem_Write>
    WriteCommand(0x20); //0x20,0.77xVcc
 8002496:	465a      	mov	r2, fp
 8002498:	7022      	strb	r2, [r4, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, this->PanelAddr, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800249a:	464a      	mov	r2, r9
 800249c:	5be9      	ldrh	r1, [r5, r7]
 800249e:	9202      	str	r2, [sp, #8]
 80024a0:	4642      	mov	r2, r8
 80024a2:	2301      	movs	r3, #1
 80024a4:	9201      	str	r2, [sp, #4]
 80024a6:	0030      	movs	r0, r6
 80024a8:	2200      	movs	r2, #0
 80024aa:	9400      	str	r4, [sp, #0]
 80024ac:	f7fe fe4a 	bl	8001144 <HAL_I2C_Mem_Write>
    WriteCommand(0x8D); //--set DC-DC enable
 80024b0:	238d      	movs	r3, #141	@ 0x8d
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, this->PanelAddr, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80024b2:	464a      	mov	r2, r9
 80024b4:	7023      	strb	r3, [r4, #0]
 80024b6:	5be9      	ldrh	r1, [r5, r7]
 80024b8:	9202      	str	r2, [sp, #8]
 80024ba:	4642      	mov	r2, r8
 80024bc:	0030      	movs	r0, r6
 80024be:	9201      	str	r2, [sp, #4]
 80024c0:	9400      	str	r4, [sp, #0]
 80024c2:	2200      	movs	r2, #0
 80024c4:	3b8c      	subs	r3, #140	@ 0x8c
 80024c6:	f7fe fe3d 	bl	8001144 <HAL_I2C_Mem_Write>
    WriteCommand(0x14); //
 80024ca:	2314      	movs	r3, #20
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, this->PanelAddr, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80024cc:	464a      	mov	r2, r9
 80024ce:	7023      	strb	r3, [r4, #0]
 80024d0:	5be9      	ldrh	r1, [r5, r7]
 80024d2:	9202      	str	r2, [sp, #8]
 80024d4:	4642      	mov	r2, r8
 80024d6:	0030      	movs	r0, r6
 80024d8:	9201      	str	r2, [sp, #4]
 80024da:	9400      	str	r4, [sp, #0]
 80024dc:	2200      	movs	r2, #0
 80024de:	3b13      	subs	r3, #19
 80024e0:	f7fe fe30 	bl	8001144 <HAL_I2C_Mem_Write>
	this->IsDisplayOn = 1;
 80024e4:	4642      	mov	r2, r8
 80024e6:	4b11      	ldr	r3, [pc, #68]	@ (800252c <_ZN7ssd13064InitEv+0x334>)
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, this->PanelAddr, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80024e8:	0030      	movs	r0, r6
	this->IsDisplayOn = 1;
 80024ea:	54ea      	strb	r2, [r5, r3]
    WriteCommand(0xAF);
 80024ec:	23af      	movs	r3, #175	@ 0xaf
 80024ee:	7023      	strb	r3, [r4, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, this->PanelAddr, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80024f0:	464b      	mov	r3, r9
 80024f2:	5be9      	ldrh	r1, [r5, r7]
 80024f4:	9302      	str	r3, [sp, #8]
 80024f6:	9201      	str	r2, [sp, #4]
 80024f8:	4643      	mov	r3, r8
 80024fa:	2200      	movs	r2, #0
 80024fc:	9400      	str	r4, [sp, #0]
 80024fe:	f7fe fe21 	bl	8001144 <HAL_I2C_Mem_Write>
    memset(this->SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(this->SSD1306_Buffer));
 8002502:	003a      	movs	r2, r7
 8002504:	2100      	movs	r1, #0
 8002506:	0028      	movs	r0, r5
 8002508:	f000 feb8 	bl	800327c <memset>
    UpdateScreen();
 800250c:	0028      	movs	r0, r5
 800250e:	f7ff fe15 	bl	800213c <_ZN7ssd130612UpdateScreenEv>
    this->CurrentX = 0;
 8002512:	4652      	mov	r2, sl
 8002514:	4b07      	ldr	r3, [pc, #28]	@ (8002534 <_ZN7ssd13064InitEv+0x33c>)
 8002516:	52ea      	strh	r2, [r5, r3]
    this->CurrentY = 0;
 8002518:	4b07      	ldr	r3, [pc, #28]	@ (8002538 <_ZN7ssd13064InitEv+0x340>)
 800251a:	52ea      	strh	r2, [r5, r3]
}
 800251c:	b007      	add	sp, #28
 800251e:	bcf0      	pop	{r4, r5, r6, r7}
 8002520:	46bb      	mov	fp, r7
 8002522:	46b2      	mov	sl, r6
 8002524:	46a9      	mov	r9, r5
 8002526:	46a0      	mov	r8, r4
 8002528:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800252a:	46c0      	nop			@ (mov r8, r8)
 800252c:	00000406 	.word	0x00000406
 8002530:	20000108 	.word	0x20000108
 8002534:	00000402 	.word	0x00000402
 8002538:	00000404 	.word	0x00000404

0800253c <_ZN7ssd13069DrawPixelEhh13SSD1306_COLOR>:
void ssd1306::DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 800253c:	b530      	push	{r4, r5, lr}
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800253e:	b24c      	sxtb	r4, r1
 8002540:	2c00      	cmp	r4, #0
 8002542:	db0d      	blt.n	8002560 <_ZN7ssd13069DrawPixelEhh13SSD1306_COLOR+0x24>
 8002544:	2a3f      	cmp	r2, #63	@ 0x3f
 8002546:	d80b      	bhi.n	8002560 <_ZN7ssd13069DrawPixelEhh13SSD1306_COLOR+0x24>
    	this->SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002548:	08d4      	lsrs	r4, r2, #3
 800254a:	01e4      	lsls	r4, r4, #7
 800254c:	1861      	adds	r1, r4, r1
 800254e:	2407      	movs	r4, #7
 8002550:	4022      	ands	r2, r4
 8002552:	3c06      	subs	r4, #6
 8002554:	4094      	lsls	r4, r2
 8002556:	5c45      	ldrb	r5, [r0, r1]
    if(color == White) {
 8002558:	2b01      	cmp	r3, #1
 800255a:	d002      	beq.n	8002562 <_ZN7ssd13069DrawPixelEhh13SSD1306_COLOR+0x26>
    	this->SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800255c:	43a5      	bics	r5, r4
 800255e:	5445      	strb	r5, [r0, r1]
}
 8002560:	bd30      	pop	{r4, r5, pc}
    	this->SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002562:	4325      	orrs	r5, r4
 8002564:	5445      	strb	r5, [r0, r1]
 8002566:	e7fb      	b.n	8002560 <_ZN7ssd13069DrawPixelEhh13SSD1306_COLOR+0x24>

08002568 <_ZN7ssd13069WriteCharEc7FontDef13SSD1306_COLOR>:
char ssd1306::WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8002568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800256a:	46de      	mov	lr, fp
 800256c:	464e      	mov	r6, r9
 800256e:	4657      	mov	r7, sl
 8002570:	4645      	mov	r5, r8
 8002572:	b5e0      	push	{r5, r6, r7, lr}
 8002574:	b089      	sub	sp, #36	@ 0x24
 8002576:	9206      	str	r2, [sp, #24]
    if (ch < 32 || ch > 126)
 8002578:	000a      	movs	r2, r1
char ssd1306::WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 800257a:	9307      	str	r3, [sp, #28]
 800257c:	ab12      	add	r3, sp, #72	@ 0x48
 800257e:	781b      	ldrb	r3, [r3, #0]
    if (ch < 32 || ch > 126)
 8002580:	3a20      	subs	r2, #32
char ssd1306::WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8002582:	000c      	movs	r4, r1
    if (ch < 32 || ch > 126)
 8002584:	b2d1      	uxtb	r1, r2
char ssd1306::WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8002586:	4683      	mov	fp, r0
 8002588:	4699      	mov	r9, r3
    if (ch < 32 || ch > 126)
 800258a:	295e      	cmp	r1, #94	@ 0x5e
 800258c:	d85c      	bhi.n	8002648 <_ZN7ssd13069WriteCharEc7FontDef13SSD1306_COLOR+0xe0>
 800258e:	ab06      	add	r3, sp, #24
 8002590:	781b      	ldrb	r3, [r3, #0]
    if (SSD1306_WIDTH < (this->CurrentX + Font.FontWidth) ||
 8002592:	4931      	ldr	r1, [pc, #196]	@ (8002658 <_ZN7ssd13069WriteCharEc7FontDef13SSD1306_COLOR+0xf0>)
 8002594:	4698      	mov	r8, r3
 8002596:	5a43      	ldrh	r3, [r0, r1]
 8002598:	001f      	movs	r7, r3
 800259a:	4447      	add	r7, r8
 800259c:	469a      	mov	sl, r3
 800259e:	2f80      	cmp	r7, #128	@ 0x80
 80025a0:	dc52      	bgt.n	8002648 <_ZN7ssd13069WriteCharEc7FontDef13SSD1306_COLOR+0xe0>
        SSD1306_HEIGHT < (this->CurrentY + Font.FontHeight))
 80025a2:	492e      	ldr	r1, [pc, #184]	@ (800265c <_ZN7ssd13069WriteCharEc7FontDef13SSD1306_COLOR+0xf4>)
 80025a4:	ab06      	add	r3, sp, #24
 80025a6:	785b      	ldrb	r3, [r3, #1]
 80025a8:	5a45      	ldrh	r5, [r0, r1]
 80025aa:	18e9      	adds	r1, r5, r3
    if (SSD1306_WIDTH < (this->CurrentX + Font.FontWidth) ||
 80025ac:	2940      	cmp	r1, #64	@ 0x40
 80025ae:	dc4b      	bgt.n	8002648 <_ZN7ssd13069WriteCharEc7FontDef13SSD1306_COLOR+0xe0>
    for(i = 0; i < Font.FontHeight; i++) {
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d044      	beq.n	800263e <_ZN7ssd13069WriteCharEc7FontDef13SSD1306_COLOR+0xd6>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80025b4:	435a      	muls	r2, r3
 80025b6:	9907      	ldr	r1, [sp, #28]
 80025b8:	0052      	lsls	r2, r2, #1
 80025ba:	188a      	adds	r2, r1, r2
 80025bc:	9201      	str	r2, [sp, #4]
                DrawPixel(this->CurrentX + j, (this->CurrentY + i), (SSD1306_COLOR)!color);
 80025be:	4649      	mov	r1, r9
    for(i = 0; i < Font.FontHeight; i++) {
 80025c0:	2200      	movs	r2, #0
 80025c2:	9202      	str	r2, [sp, #8]
                DrawPixel(this->CurrentX + j, (this->CurrentY + i), (SSD1306_COLOR)!color);
 80025c4:	424a      	negs	r2, r1
 80025c6:	414a      	adcs	r2, r1
 80025c8:	4646      	mov	r6, r8
 80025ca:	b2d2      	uxtb	r2, r2
 80025cc:	b2ed      	uxtb	r5, r5
 80025ce:	9200      	str	r2, [sp, #0]
 80025d0:	9303      	str	r3, [sp, #12]
 80025d2:	9404      	str	r4, [sp, #16]
 80025d4:	9705      	str	r7, [sp, #20]
            if((b << j) & 0x8000)  {
 80025d6:	2780      	movs	r7, #128	@ 0x80
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80025d8:	9b01      	ldr	r3, [sp, #4]
        for(j = 0; j < Font.FontWidth; j++) {
 80025da:	2400      	movs	r4, #0
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80025dc:	881b      	ldrh	r3, [r3, #0]
            if((b << j) & 0x8000)  {
 80025de:	023f      	lsls	r7, r7, #8
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80025e0:	4698      	mov	r8, r3
        for(j = 0; j < Font.FontWidth; j++) {
 80025e2:	2e00      	cmp	r6, #0
 80025e4:	d01e      	beq.n	8002624 <_ZN7ssd13069WriteCharEc7FontDef13SSD1306_COLOR+0xbc>
 80025e6:	0033      	movs	r3, r6
 80025e8:	002e      	movs	r6, r5
 80025ea:	4655      	mov	r5, sl
 80025ec:	469a      	mov	sl, r3
 80025ee:	e007      	b.n	8002600 <_ZN7ssd13069WriteCharEc7FontDef13SSD1306_COLOR+0x98>
                DrawPixel(this->CurrentX + j, (this->CurrentY + i), (SSD1306_COLOR) color);
 80025f0:	464b      	mov	r3, r9
 80025f2:	0032      	movs	r2, r6
 80025f4:	4658      	mov	r0, fp
        for(j = 0; j < Font.FontWidth; j++) {
 80025f6:	3401      	adds	r4, #1
                DrawPixel(this->CurrentX + j, (this->CurrentY + i), (SSD1306_COLOR) color);
 80025f8:	f7ff ffa0 	bl	800253c <_ZN7ssd13069DrawPixelEhh13SSD1306_COLOR>
        for(j = 0; j < Font.FontWidth; j++) {
 80025fc:	4554      	cmp	r4, sl
 80025fe:	d20d      	bcs.n	800261c <_ZN7ssd13069WriteCharEc7FontDef13SSD1306_COLOR+0xb4>
            if((b << j) & 0x8000)  {
 8002600:	4643      	mov	r3, r8
 8002602:	40a3      	lsls	r3, r4
                DrawPixel(this->CurrentX + j, (this->CurrentY + i), (SSD1306_COLOR) color);
 8002604:	1961      	adds	r1, r4, r5
 8002606:	b2c9      	uxtb	r1, r1
            if((b << j) & 0x8000)  {
 8002608:	423b      	tst	r3, r7
 800260a:	d1f1      	bne.n	80025f0 <_ZN7ssd13069WriteCharEc7FontDef13SSD1306_COLOR+0x88>
                DrawPixel(this->CurrentX + j, (this->CurrentY + i), (SSD1306_COLOR)!color);
 800260c:	0032      	movs	r2, r6
 800260e:	4658      	mov	r0, fp
 8002610:	9b00      	ldr	r3, [sp, #0]
        for(j = 0; j < Font.FontWidth; j++) {
 8002612:	3401      	adds	r4, #1
                DrawPixel(this->CurrentX + j, (this->CurrentY + i), (SSD1306_COLOR)!color);
 8002614:	f7ff ff92 	bl	800253c <_ZN7ssd13069DrawPixelEhh13SSD1306_COLOR>
        for(j = 0; j < Font.FontWidth; j++) {
 8002618:	4554      	cmp	r4, sl
 800261a:	d3f1      	bcc.n	8002600 <_ZN7ssd13069WriteCharEc7FontDef13SSD1306_COLOR+0x98>
 800261c:	4653      	mov	r3, sl
 800261e:	46aa      	mov	sl, r5
 8002620:	0035      	movs	r5, r6
 8002622:	001e      	movs	r6, r3
    for(i = 0; i < Font.FontHeight; i++) {
 8002624:	9a01      	ldr	r2, [sp, #4]
 8002626:	9b02      	ldr	r3, [sp, #8]
 8002628:	3202      	adds	r2, #2
 800262a:	9201      	str	r2, [sp, #4]
 800262c:	9a03      	ldr	r2, [sp, #12]
 800262e:	3301      	adds	r3, #1
 8002630:	3501      	adds	r5, #1
 8002632:	9302      	str	r3, [sp, #8]
 8002634:	b2ed      	uxtb	r5, r5
 8002636:	4293      	cmp	r3, r2
 8002638:	d3cd      	bcc.n	80025d6 <_ZN7ssd13069WriteCharEc7FontDef13SSD1306_COLOR+0x6e>
 800263a:	9c04      	ldr	r4, [sp, #16]
 800263c:	9f05      	ldr	r7, [sp, #20]
    this->CurrentX += Font.FontWidth;
 800263e:	465a      	mov	r2, fp
 8002640:	4b05      	ldr	r3, [pc, #20]	@ (8002658 <_ZN7ssd13069WriteCharEc7FontDef13SSD1306_COLOR+0xf0>)
    return ch;
 8002642:	0020      	movs	r0, r4
    this->CurrentX += Font.FontWidth;
 8002644:	52d7      	strh	r7, [r2, r3]
    return ch;
 8002646:	e000      	b.n	800264a <_ZN7ssd13069WriteCharEc7FontDef13SSD1306_COLOR+0xe2>
        return 0;
 8002648:	2000      	movs	r0, #0
}
 800264a:	b009      	add	sp, #36	@ 0x24
 800264c:	bcf0      	pop	{r4, r5, r6, r7}
 800264e:	46bb      	mov	fp, r7
 8002650:	46b2      	mov	sl, r6
 8002652:	46a9      	mov	r9, r5
 8002654:	46a0      	mov	r8, r4
 8002656:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002658:	00000402 	.word	0x00000402
 800265c:	00000404 	.word	0x00000404

08002660 <_ZN7ssd130611WriteStringEPKc7FontDef13SSD1306_COLOR>:
char ssd1306::WriteString(const char* str, FontDef Font, SSD1306_COLOR color) {
 8002660:	b570      	push	{r4, r5, r6, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	9303      	str	r3, [sp, #12]
 8002666:	9202      	str	r2, [sp, #8]
 8002668:	000c      	movs	r4, r1
    while (*str) {
 800266a:	7809      	ldrb	r1, [r1, #0]
char ssd1306::WriteString(const char* str, FontDef Font, SSD1306_COLOR color) {
 800266c:	ab08      	add	r3, sp, #32
 800266e:	0005      	movs	r5, r0
 8002670:	781e      	ldrb	r6, [r3, #0]
    while (*str) {
 8002672:	2900      	cmp	r1, #0
 8002674:	d104      	bne.n	8002680 <_ZN7ssd130611WriteStringEPKc7FontDef13SSD1306_COLOR+0x20>
 8002676:	e00f      	b.n	8002698 <_ZN7ssd130611WriteStringEPKc7FontDef13SSD1306_COLOR+0x38>
 8002678:	7861      	ldrb	r1, [r4, #1]
        str++;
 800267a:	3401      	adds	r4, #1
    while (*str) {
 800267c:	2900      	cmp	r1, #0
 800267e:	d00b      	beq.n	8002698 <_ZN7ssd130611WriteStringEPKc7FontDef13SSD1306_COLOR+0x38>
        if (WriteChar(*str, Font, color) != *str) {
 8002680:	9b03      	ldr	r3, [sp, #12]
 8002682:	0028      	movs	r0, r5
 8002684:	9a02      	ldr	r2, [sp, #8]
 8002686:	9600      	str	r6, [sp, #0]
 8002688:	f7ff ff6e 	bl	8002568 <_ZN7ssd13069WriteCharEc7FontDef13SSD1306_COLOR>
 800268c:	7823      	ldrb	r3, [r4, #0]
 800268e:	4298      	cmp	r0, r3
 8002690:	d0f2      	beq.n	8002678 <_ZN7ssd130611WriteStringEPKc7FontDef13SSD1306_COLOR+0x18>
}
 8002692:	0018      	movs	r0, r3
 8002694:	b004      	add	sp, #16
 8002696:	bd70      	pop	{r4, r5, r6, pc}
    return *str;
 8002698:	2300      	movs	r3, #0
 800269a:	e7fa      	b.n	8002692 <_ZN7ssd130611WriteStringEPKc7FontDef13SSD1306_COLOR+0x32>

0800269c <_ZN7ssd13069SetCursorEhh>:
    this->CurrentX = x;
 800269c:	4b02      	ldr	r3, [pc, #8]	@ (80026a8 <_ZN7ssd13069SetCursorEhh+0xc>)
 800269e:	52c1      	strh	r1, [r0, r3]
    this->CurrentY = y;
 80026a0:	4b02      	ldr	r3, [pc, #8]	@ (80026ac <_ZN7ssd13069SetCursorEhh+0x10>)
 80026a2:	52c2      	strh	r2, [r0, r3]
}
 80026a4:	4770      	bx	lr
 80026a6:	46c0      	nop			@ (mov r8, r8)
 80026a8:	00000402 	.word	0x00000402
 80026ac:	00000404 	.word	0x00000404

080026b0 <_ZN7ssd13064LineEhhhh13SSD1306_COLOR>:
void ssd1306::Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80026b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026b2:	46de      	mov	lr, fp
 80026b4:	4657      	mov	r7, sl
 80026b6:	464e      	mov	r6, r9
 80026b8:	4645      	mov	r5, r8
 80026ba:	4698      	mov	r8, r3
 80026bc:	b5e0      	push	{r5, r6, r7, lr}
 80026be:	b085      	sub	sp, #20
 80026c0:	ab0e      	add	r3, sp, #56	@ 0x38
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	4681      	mov	r9, r0
 80026c6:	469b      	mov	fp, r3
 80026c8:	ab0f      	add	r3, sp, #60	@ 0x3c
 80026ca:	7818      	ldrb	r0, [r3, #0]
    int32_t deltaX = abs(x2 - x1);
 80026cc:	4643      	mov	r3, r8
 80026ce:	1a5f      	subs	r7, r3, r1
 80026d0:	17fb      	asrs	r3, r7, #31
 80026d2:	18ff      	adds	r7, r7, r3
 80026d4:	405f      	eors	r7, r3
    int32_t deltaY = abs(y2 - y1);
 80026d6:	465b      	mov	r3, fp
void ssd1306::Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80026d8:	000c      	movs	r4, r1
    int32_t deltaY = abs(y2 - y1);
 80026da:	1a9b      	subs	r3, r3, r2
void ssd1306::Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80026dc:	0015      	movs	r5, r2
    int32_t deltaY = abs(y2 - y1);
 80026de:	17da      	asrs	r2, r3, #31
 80026e0:	1899      	adds	r1, r3, r2
 80026e2:	4051      	eors	r1, r2
    int32_t signX = ((x1 < x2) ? 1 : -1);
 80026e4:	2302      	movs	r3, #2
 80026e6:	4544      	cmp	r4, r8
 80026e8:	4192      	sbcs	r2, r2
 80026ea:	401a      	ands	r2, r3
 80026ec:	4692      	mov	sl, r2
 80026ee:	2201      	movs	r2, #1
 80026f0:	4252      	negs	r2, r2
 80026f2:	4694      	mov	ip, r2
    int32_t signY = ((y1 < y2) ? 1 : -1);
 80026f4:	455d      	cmp	r5, fp
 80026f6:	4192      	sbcs	r2, r2
 80026f8:	4013      	ands	r3, r2
 80026fa:	4463      	add	r3, ip
void ssd1306::Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80026fc:	9002      	str	r0, [sp, #8]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 80026fe:	9301      	str	r3, [sp, #4]
    int32_t error = deltaX - deltaY;
 8002700:	9100      	str	r1, [sp, #0]
    DrawPixel(x2, y2, color);
 8002702:	0003      	movs	r3, r0
 8002704:	465a      	mov	r2, fp
 8002706:	4648      	mov	r0, r9
    int32_t error = deltaX - deltaY;
 8002708:	1a7e      	subs	r6, r7, r1
    DrawPixel(x2, y2, color);
 800270a:	4641      	mov	r1, r8
    int32_t signX = ((x1 < x2) ? 1 : -1);
 800270c:	44e2      	add	sl, ip
    DrawPixel(x2, y2, color);
 800270e:	f7ff ff15 	bl	800253c <_ZN7ssd13069DrawPixelEhh13SSD1306_COLOR>
    	this->SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002712:	2307      	movs	r3, #7
        if(error2 > -deltaY) {
 8002714:	9900      	ldr	r1, [sp, #0]
    	this->SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002716:	9303      	str	r3, [sp, #12]
        if(error2 > -deltaY) {
 8002718:	4248      	negs	r0, r1
    while((x1 != x2) || (y1 != y2)) {
 800271a:	4544      	cmp	r4, r8
 800271c:	d101      	bne.n	8002722 <_ZN7ssd13064LineEhhhh13SSD1306_COLOR+0x72>
 800271e:	455d      	cmp	r5, fp
 8002720:	d028      	beq.n	8002774 <_ZN7ssd13064LineEhhhh13SSD1306_COLOR+0xc4>
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002722:	b263      	sxtb	r3, r4
 8002724:	2b00      	cmp	r3, #0
 8002726:	db13      	blt.n	8002750 <_ZN7ssd13064LineEhhhh13SSD1306_COLOR+0xa0>
 8002728:	2d3f      	cmp	r5, #63	@ 0x3f
 800272a:	d811      	bhi.n	8002750 <_ZN7ssd13064LineEhhhh13SSD1306_COLOR+0xa0>
    	this->SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800272c:	464a      	mov	r2, r9
 800272e:	08eb      	lsrs	r3, r5, #3
 8002730:	01db      	lsls	r3, r3, #7
 8002732:	191b      	adds	r3, r3, r4
 8002734:	5cd2      	ldrb	r2, [r2, r3]
 8002736:	9903      	ldr	r1, [sp, #12]
 8002738:	4694      	mov	ip, r2
 800273a:	2201      	movs	r2, #1
 800273c:	4029      	ands	r1, r5
 800273e:	408a      	lsls	r2, r1
 8002740:	0011      	movs	r1, r2
    if(color == White) {
 8002742:	9a02      	ldr	r2, [sp, #8]
 8002744:	2a01      	cmp	r2, #1
 8002746:	d01c      	beq.n	8002782 <_ZN7ssd13064LineEhhhh13SSD1306_COLOR+0xd2>
    	this->SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002748:	4662      	mov	r2, ip
 800274a:	438a      	bics	r2, r1
 800274c:	4649      	mov	r1, r9
 800274e:	54ca      	strb	r2, [r1, r3]
        error2 = error * 2;
 8002750:	0073      	lsls	r3, r6, #1
        if(error2 > -deltaY) {
 8002752:	4298      	cmp	r0, r3
 8002754:	da03      	bge.n	800275e <_ZN7ssd13064LineEhhhh13SSD1306_COLOR+0xae>
            error -= deltaY;
 8002756:	9a00      	ldr	r2, [sp, #0]
            x1 += signX;
 8002758:	4454      	add	r4, sl
            error -= deltaY;
 800275a:	1ab6      	subs	r6, r6, r2
            x1 += signX;
 800275c:	b2e4      	uxtb	r4, r4
        if(error2 < deltaX) {
 800275e:	429f      	cmp	r7, r3
 8002760:	dddb      	ble.n	800271a <_ZN7ssd13064LineEhhhh13SSD1306_COLOR+0x6a>
            y1 += signY;
 8002762:	9b01      	ldr	r3, [sp, #4]
            error += deltaX;
 8002764:	19f6      	adds	r6, r6, r7
            y1 += signY;
 8002766:	469c      	mov	ip, r3
 8002768:	4465      	add	r5, ip
 800276a:	b2ed      	uxtb	r5, r5
    while((x1 != x2) || (y1 != y2)) {
 800276c:	4544      	cmp	r4, r8
 800276e:	d1d8      	bne.n	8002722 <_ZN7ssd13064LineEhhhh13SSD1306_COLOR+0x72>
 8002770:	455d      	cmp	r5, fp
 8002772:	d1d6      	bne.n	8002722 <_ZN7ssd13064LineEhhhh13SSD1306_COLOR+0x72>
}
 8002774:	b005      	add	sp, #20
 8002776:	bcf0      	pop	{r4, r5, r6, r7}
 8002778:	46bb      	mov	fp, r7
 800277a:	46b2      	mov	sl, r6
 800277c:	46a9      	mov	r9, r5
 800277e:	46a0      	mov	r8, r4
 8002780:	bdf0      	pop	{r4, r5, r6, r7, pc}
    	this->SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002782:	4662      	mov	r2, ip
 8002784:	4311      	orrs	r1, r2
 8002786:	464a      	mov	r2, r9
 8002788:	54d1      	strb	r1, [r2, r3]
 800278a:	e7e1      	b.n	8002750 <_ZN7ssd13064LineEhhhh13SSD1306_COLOR+0xa0>

0800278c <_ZN7ssd130613DrawRectangleEhhhh13SSD1306_COLOR>:
void ssd1306::DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 800278c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800278e:	46ce      	mov	lr, r9
 8002790:	4647      	mov	r7, r8
 8002792:	b580      	push	{r7, lr}
 8002794:	b083      	sub	sp, #12
 8002796:	001f      	movs	r7, r3
 8002798:	ab0a      	add	r3, sp, #40	@ 0x28
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	000d      	movs	r5, r1
 800279e:	4698      	mov	r8, r3
 80027a0:	ab0b      	add	r3, sp, #44	@ 0x2c
 80027a2:	781b      	ldrb	r3, [r3, #0]
    Line(x1,y1,x2,y1,color);
 80027a4:	9200      	str	r2, [sp, #0]
void ssd1306::DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80027a6:	4699      	mov	r9, r3
    Line(x1,y1,x2,y1,color);
 80027a8:	9301      	str	r3, [sp, #4]
 80027aa:	003b      	movs	r3, r7
void ssd1306::DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80027ac:	0004      	movs	r4, r0
 80027ae:	0016      	movs	r6, r2
    Line(x1,y1,x2,y1,color);
 80027b0:	f7ff ff7e 	bl	80026b0 <_ZN7ssd13064LineEhhhh13SSD1306_COLOR>
    Line(x2,y1,x2,y2,color);
 80027b4:	464b      	mov	r3, r9
 80027b6:	9301      	str	r3, [sp, #4]
 80027b8:	4643      	mov	r3, r8
 80027ba:	0032      	movs	r2, r6
 80027bc:	0039      	movs	r1, r7
 80027be:	0020      	movs	r0, r4
 80027c0:	9300      	str	r3, [sp, #0]
 80027c2:	003b      	movs	r3, r7
 80027c4:	f7ff ff74 	bl	80026b0 <_ZN7ssd13064LineEhhhh13SSD1306_COLOR>
    Line(x2,y2,x1,y2,color);
 80027c8:	464b      	mov	r3, r9
 80027ca:	9301      	str	r3, [sp, #4]
 80027cc:	4643      	mov	r3, r8
 80027ce:	4642      	mov	r2, r8
 80027d0:	0039      	movs	r1, r7
 80027d2:	0020      	movs	r0, r4
 80027d4:	9300      	str	r3, [sp, #0]
 80027d6:	002b      	movs	r3, r5
 80027d8:	f7ff ff6a 	bl	80026b0 <_ZN7ssd13064LineEhhhh13SSD1306_COLOR>
    Line(x1,y2,x1,y1,color);
 80027dc:	464b      	mov	r3, r9
 80027de:	4642      	mov	r2, r8
 80027e0:	9301      	str	r3, [sp, #4]
 80027e2:	0029      	movs	r1, r5
 80027e4:	002b      	movs	r3, r5
 80027e6:	0020      	movs	r0, r4
 80027e8:	9600      	str	r6, [sp, #0]
 80027ea:	f7ff ff61 	bl	80026b0 <_ZN7ssd13064LineEhhhh13SSD1306_COLOR>
}
 80027ee:	b003      	add	sp, #12
 80027f0:	bcc0      	pop	{r6, r7}
 80027f2:	46b9      	mov	r9, r7
 80027f4:	46b0      	mov	r8, r6
 80027f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080027f8 <_ZN7ssd130612ClearDisplayEv>:
    memset(this->SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(this->SSD1306_Buffer));
 80027f8:	2280      	movs	r2, #128	@ 0x80
uint8_t ssd1306::GetDisplayOn() {
    return this->IsDisplayOn;
}

void ssd1306::ClearDisplay(void)
{
 80027fa:	b510      	push	{r4, lr}
    memset(this->SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(this->SSD1306_Buffer));
 80027fc:	2100      	movs	r1, #0
 80027fe:	00d2      	lsls	r2, r2, #3
 8002800:	f000 fd3c 	bl	800327c <memset>
	Fill(Black);
}
 8002804:	bd10      	pop	{r4, pc}
 8002806:	46c0      	nop			@ (mov r8, r8)

08002808 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_.isra.0>:
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3076. basic_string CTAD ambiguity
      template<typename = _RequireAllocator<_Alloc>>
#endif
      _GLIBCXX20_CONSTEXPR
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
 8002808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
 800280a:	0006      	movs	r6, r0
 800280c:	3608      	adds	r6, #8
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
 800280e:	0007      	movs	r7, r0
 8002810:	1e0d      	subs	r5, r1, #0
	: allocator_type(__a), _M_p(__dat) { }
 8002812:	6006      	str	r6, [r0, #0]
      : _M_dataplus(_M_local_data(), __a)
      {
	// NB: Not required, but considered best practice.
	if (__s == 0)
 8002814:	d01d      	beq.n	8002852 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_.isra.0+0x4a>
      {
#if __cplusplus >= 201703L
	if (std::__is_constant_evaluated())
	  return __gnu_cxx::char_traits<char_type>::length(__s);
#endif
	return __builtin_strlen(__s);
 8002816:	0008      	movs	r0, r1
 8002818:	f7fd fc72 	bl	8000100 <strlen>
 800281c:	0004      	movs	r4, r0
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));

	if (__dnew > size_type(_S_local_capacity))
 800281e:	280f      	cmp	r0, #15
 8002820:	d80b      	bhi.n	800283a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_.isra.0+0x32>
	if (__n == 1)
 8002822:	2801      	cmp	r0, #1
 8002824:	d006      	beq.n	8002834 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_.isra.0+0x2c>
      }

      static _GLIBCXX20_CONSTEXPR char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      {
	if (__n == 0)
 8002826:	2800      	cmp	r0, #0
 8002828:	d10d      	bne.n	8002846 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_.isra.0+0x3e>
	__c1 = __c2;
 800282a:	2200      	movs	r2, #0
 800282c:	683b      	ldr	r3, [r7, #0]
      { _M_string_length = __length; }
 800282e:	607c      	str	r4, [r7, #4]
 8002830:	551a      	strb	r2, [r3, r4]
	  std::__throw_logic_error(__N("basic_string: "
				       "construction from null is not valid"));
	const _CharT* __end = __s + traits_type::length(__s);
	_M_construct(__s, __end, forward_iterator_tag());
      }
 8002832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002834:	782b      	ldrb	r3, [r5, #0]
 8002836:	723b      	strb	r3, [r7, #8]
      }
 8002838:	e7f7      	b.n	800282a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_.isra.0+0x22>
      return _Alloc_traits::allocate(_M_get_allocator(), __capacity + 1);
 800283a:	3001      	adds	r0, #1
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
							   __al));
	  }
#endif
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800283c:	f000 fc10 	bl	8003060 <_Znwj>
 8002840:	0006      	movs	r6, r0
      { _M_dataplus._M_p = __p; }
 8002842:	6038      	str	r0, [r7, #0]
      { _M_allocated_capacity = __capacity; }
 8002844:	60bc      	str	r4, [r7, #8]
	  return __s1;
#if __cplusplus >= 202002L
	if (std::__is_constant_evaluated())
	  return __gnu_cxx::char_traits<char_type>::copy(__s1, __s2, __n);
#endif
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
 8002846:	0022      	movs	r2, r4
 8002848:	0029      	movs	r1, r5
 800284a:	0030      	movs	r0, r6
 800284c:	f000 fda6 	bl	800339c <memcpy>
 8002850:	e7eb      	b.n	800282a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_.isra.0+0x22>
	  std::__throw_logic_error(__N("basic_string: "
 8002852:	4801      	ldr	r0, [pc, #4]	@ (8002858 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_.isra.0+0x50>)
 8002854:	f000 fc16 	bl	8003084 <_ZSt19__throw_logic_errorPKc>
 8002858:	08004fc8 	.word	0x08004fc8

0800285c <_ZN3app9page_mainEv>:
		}
	}
}

void app::page_main(void)
{
 800285c:	b5f0      	push	{r4, r5, r6, r7, lr}
	char screen_time_buff_c[20];

	//Render Main UI
	oledPanel.DrawRectangle(0, 0, 127, 63, White);
 800285e:	2701      	movs	r7, #1
 8002860:	253f      	movs	r5, #63	@ 0x3f
 8002862:	4c4a      	ldr	r4, [pc, #296]	@ (800298c <_ZN3app9page_mainEv+0x130>)
{
 8002864:	b089      	sub	sp, #36	@ 0x24
	oledPanel.DrawRectangle(0, 0, 127, 63, White);
 8002866:	237f      	movs	r3, #127	@ 0x7f
 8002868:	2200      	movs	r2, #0
 800286a:	2100      	movs	r1, #0
 800286c:	0020      	movs	r0, r4
 800286e:	9500      	str	r5, [sp, #0]
 8002870:	9701      	str	r7, [sp, #4]
 8002872:	f7ff ff8b 	bl	800278c <_ZN7ssd130613DrawRectangleEhhhh13SSD1306_COLOR>
	oledPanel.DrawRectangle(94, 0, 127, 63, White);
 8002876:	237f      	movs	r3, #127	@ 0x7f
 8002878:	2200      	movs	r2, #0
 800287a:	215e      	movs	r1, #94	@ 0x5e
 800287c:	0020      	movs	r0, r4
 800287e:	9500      	str	r5, [sp, #0]
 8002880:	9701      	str	r7, [sp, #4]
 8002882:	f7ff ff83 	bl	800278c <_ZN7ssd130613DrawRectangleEhhhh13SSD1306_COLOR>
	oledPanel.DrawRectangle(0, 24, 94, 63, White);
 8002886:	235e      	movs	r3, #94	@ 0x5e
 8002888:	2218      	movs	r2, #24
 800288a:	2100      	movs	r1, #0
 800288c:	0020      	movs	r0, r4
 800288e:	9500      	str	r5, [sp, #0]
 8002890:	9701      	str	r7, [sp, #4]
 8002892:	f7ff ff7b 	bl	800278c <_ZN7ssd130613DrawRectangleEhhhh13SSD1306_COLOR>
	oledPanel.SetCursor(4, 28);
 8002896:	221c      	movs	r2, #28
 8002898:	2104      	movs	r1, #4
 800289a:	0020      	movs	r0, r4
 800289c:	f7ff fefe 	bl	800269c <_ZN7ssd13069SetCursorEhh>
	oledPanel.WriteString(" ---Khai--- ", Font_7x10, White);
 80028a0:	4d3b      	ldr	r5, [pc, #236]	@ (8002990 <_ZN3app9page_mainEv+0x134>)
 80028a2:	9700      	str	r7, [sp, #0]
 80028a4:	493b      	ldr	r1, [pc, #236]	@ (8002994 <_ZN3app9page_mainEv+0x138>)
 80028a6:	682a      	ldr	r2, [r5, #0]
 80028a8:	686b      	ldr	r3, [r5, #4]
 80028aa:	0020      	movs	r0, r4
 80028ac:	f7ff fed8 	bl	8002660 <_ZN7ssd130611WriteStringEPKc7FontDef13SSD1306_COLOR>

	//Show time
	date_time.get_time();
 80028b0:	4e39      	ldr	r6, [pc, #228]	@ (8002998 <_ZN3app9page_mainEv+0x13c>)
 80028b2:	0030      	movs	r0, r6
 80028b4:	f000 fb8e 	bl	8002fd4 <_ZN4time8get_timeEv>
	sprintf((char *)screen_time_buff_c, "%02d:%02d:%02d", date_time.Hours, date_time.Minutes, date_time.Seconds);
 80028b8:	79b0      	ldrb	r0, [r6, #6]
 80028ba:	7973      	ldrb	r3, [r6, #5]
 80028bc:	7932      	ldrb	r2, [r6, #4]
 80028be:	4937      	ldr	r1, [pc, #220]	@ (800299c <_ZN3app9page_mainEv+0x140>)
 80028c0:	9000      	str	r0, [sp, #0]
 80028c2:	a803      	add	r0, sp, #12
 80028c4:	f000 fcba 	bl	800323c <siprintf>
	oledPanel.SetCursor(4, 4);
 80028c8:	2204      	movs	r2, #4
 80028ca:	2104      	movs	r1, #4
 80028cc:	0020      	movs	r0, r4
 80028ce:	f7ff fee5 	bl	800269c <_ZN7ssd13069SetCursorEhh>
	oledPanel.WriteString(screen_time_buff_c, Font_11x18, White);
 80028d2:	4b33      	ldr	r3, [pc, #204]	@ (80029a0 <_ZN3app9page_mainEv+0x144>)
 80028d4:	9700      	str	r7, [sp, #0]
 80028d6:	cb0c      	ldmia	r3, {r2, r3}
 80028d8:	a903      	add	r1, sp, #12
 80028da:	0020      	movs	r0, r4
 80028dc:	f7ff fec0 	bl	8002660 <_ZN7ssd130611WriteStringEPKc7FontDef13SSD1306_COLOR>
	oledPanel.SetCursor(100, 4);
 80028e0:	2204      	movs	r2, #4
 80028e2:	2164      	movs	r1, #100	@ 0x64
 80028e4:	0020      	movs	r0, r4
 80028e6:	f7ff fed9 	bl	800269c <_ZN7ssd13069SetCursorEhh>
	oledPanel.WriteString(date_map[date_time.WeekDay].c_str(), Font_7x10, White);
 80028ea:	7831      	ldrb	r1, [r6, #0]
      { return _M_dataplus._M_p; }
 80028ec:	4a2d      	ldr	r2, [pc, #180]	@ (80029a4 <_ZN3app9page_mainEv+0x148>)
 80028ee:	004b      	lsls	r3, r1, #1
 80028f0:	185b      	adds	r3, r3, r1
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	5899      	ldr	r1, [r3, r2]
 80028f6:	9700      	str	r7, [sp, #0]
 80028f8:	686b      	ldr	r3, [r5, #4]
 80028fa:	682a      	ldr	r2, [r5, #0]
 80028fc:	0020      	movs	r0, r4
 80028fe:	f7ff feaf 	bl	8002660 <_ZN7ssd130611WriteStringEPKc7FontDef13SSD1306_COLOR>
	sprintf((char *)screen_time_buff_c, "%02d", date_time.Date);
 8002902:	78b2      	ldrb	r2, [r6, #2]
 8002904:	4928      	ldr	r1, [pc, #160]	@ (80029a8 <_ZN3app9page_mainEv+0x14c>)
 8002906:	a803      	add	r0, sp, #12
 8002908:	f000 fc98 	bl	800323c <siprintf>
	oledPanel.SetCursor(104, 14);
 800290c:	220e      	movs	r2, #14
 800290e:	2168      	movs	r1, #104	@ 0x68
 8002910:	0020      	movs	r0, r4
 8002912:	f7ff fec3 	bl	800269c <_ZN7ssd13069SetCursorEhh>
	oledPanel.WriteString(screen_time_buff_c, Font_7x10, White);
 8002916:	9700      	str	r7, [sp, #0]
 8002918:	682a      	ldr	r2, [r5, #0]
 800291a:	686b      	ldr	r3, [r5, #4]
 800291c:	a903      	add	r1, sp, #12
 800291e:	0020      	movs	r0, r4
 8002920:	f7ff fe9e 	bl	8002660 <_ZN7ssd130611WriteStringEPKc7FontDef13SSD1306_COLOR>
 8002924:	79b0      	ldrb	r0, [r6, #6]
 8002926:	2105      	movs	r1, #5
 8002928:	f7fd fc82 	bl	8000230 <__aeabi_uidivmod>

	if (date_time.Seconds%5 == 0)
 800292c:	b2c9      	uxtb	r1, r1
	{
		aht30.get_sensor_data();
 800292e:	4e1f      	ldr	r6, [pc, #124]	@ (80029ac <_ZN3app9page_mainEv+0x150>)
	if (date_time.Seconds%5 == 0)
 8002930:	2900      	cmp	r1, #0
 8002932:	d026      	beq.n	8002982 <_ZN3app9page_mainEv+0x126>
	}

	//Show sensor data
	sprintf((char *)screen_time_buff_c, "Temp : %02d`C ", aht30.temp);
	oledPanel.SetCursor(4, 38);
	oledPanel.WriteString(screen_time_buff_c, Font_7x10, White);
 8002934:	2701      	movs	r7, #1
	sprintf((char *)screen_time_buff_c, "Temp : %02d`C ", aht30.temp);
 8002936:	7832      	ldrb	r2, [r6, #0]
 8002938:	491d      	ldr	r1, [pc, #116]	@ (80029b0 <_ZN3app9page_mainEv+0x154>)
 800293a:	a803      	add	r0, sp, #12
 800293c:	f000 fc7e 	bl	800323c <siprintf>
	oledPanel.SetCursor(4, 38);
 8002940:	0020      	movs	r0, r4
 8002942:	2226      	movs	r2, #38	@ 0x26
 8002944:	2104      	movs	r1, #4
 8002946:	f7ff fea9 	bl	800269c <_ZN7ssd13069SetCursorEhh>
	oledPanel.WriteString(screen_time_buff_c, Font_7x10, White);
 800294a:	9700      	str	r7, [sp, #0]
 800294c:	686b      	ldr	r3, [r5, #4]
 800294e:	682a      	ldr	r2, [r5, #0]
 8002950:	a903      	add	r1, sp, #12
 8002952:	0020      	movs	r0, r4
 8002954:	f7ff fe84 	bl	8002660 <_ZN7ssd130611WriteStringEPKc7FontDef13SSD1306_COLOR>
	sprintf((char *)screen_time_buff_c, "Humid: %02d%% ", aht30.humid);
 8002958:	7872      	ldrb	r2, [r6, #1]
 800295a:	4916      	ldr	r1, [pc, #88]	@ (80029b4 <_ZN3app9page_mainEv+0x158>)
 800295c:	a803      	add	r0, sp, #12
 800295e:	f000 fc6d 	bl	800323c <siprintf>
	oledPanel.SetCursor(4, 48);
 8002962:	0020      	movs	r0, r4
 8002964:	2230      	movs	r2, #48	@ 0x30
 8002966:	2104      	movs	r1, #4
 8002968:	f7ff fe98 	bl	800269c <_ZN7ssd13069SetCursorEhh>
	oledPanel.WriteString(screen_time_buff_c, Font_7x10, White);
 800296c:	9700      	str	r7, [sp, #0]
 800296e:	a903      	add	r1, sp, #12
 8002970:	cd0c      	ldmia	r5!, {r2, r3}
 8002972:	0020      	movs	r0, r4
 8002974:	f7ff fe74 	bl	8002660 <_ZN7ssd130611WriteStringEPKc7FontDef13SSD1306_COLOR>

	oledPanel.UpdateScreen();
 8002978:	0020      	movs	r0, r4
 800297a:	f7ff fbdf 	bl	800213c <_ZN7ssd130612UpdateScreenEv>
}
 800297e:	b009      	add	sp, #36	@ 0x24
 8002980:	bdf0      	pop	{r4, r5, r6, r7, pc}
		aht30.get_sensor_data();
 8002982:	0030      	movs	r0, r6
 8002984:	f000 fae0 	bl	8002f48 <_ZN6sensor15get_sensor_dataEv>
 8002988:	e7d4      	b.n	8002934 <_ZN3app9page_mainEv+0xd8>
 800298a:	46c0      	nop			@ (mov r8, r8)
 800298c:	20000184 	.word	0x20000184
 8002990:	20000014 	.word	0x20000014
 8002994:	08004ffc 	.word	0x08004ffc
 8002998:	2000016c 	.word	0x2000016c
 800299c:	0800500c 	.word	0x0800500c
 80029a0:	2000000c 	.word	0x2000000c
 80029a4:	2000058c 	.word	0x2000058c
 80029a8:	0800501c 	.word	0x0800501c
 80029ac:	20000164 	.word	0x20000164
 80029b0:	08005024 	.word	0x08005024
 80029b4:	08005034 	.word	0x08005034

080029b8 <_ZN3app13page_set_timeEv>:

void app::page_set_time(void)
{
 80029b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029ba:	46de      	mov	lr, fp
 80029bc:	4657      	mov	r7, sl
 80029be:	464e      	mov	r6, r9
 80029c0:	4645      	mov	r5, r8
 80029c2:	b5e0      	push	{r5, r6, r7, lr}
	key get_key = key::KEY_NONE;
	//Display buffer
	char screen_time_buff_c[20];

	oledPanel.ClearDisplay();
	oledPanel.DrawRectangle(0, 0, 127, 63, White);
 80029c4:	2501      	movs	r5, #1
 80029c6:	263f      	movs	r6, #63	@ 0x3f
	oledPanel.ClearDisplay();
 80029c8:	4cd6      	ldr	r4, [pc, #856]	@ (8002d24 <_ZN3app13page_set_timeEv+0x36c>)
{
 80029ca:	b08f      	sub	sp, #60	@ 0x3c
	oledPanel.ClearDisplay();
 80029cc:	0020      	movs	r0, r4
 80029ce:	f7ff ff13 	bl	80027f8 <_ZN7ssd130612ClearDisplayEv>
	oledPanel.DrawRectangle(0, 0, 127, 63, White);
 80029d2:	237f      	movs	r3, #127	@ 0x7f
 80029d4:	2200      	movs	r2, #0
 80029d6:	2100      	movs	r1, #0
 80029d8:	0020      	movs	r0, r4
 80029da:	9501      	str	r5, [sp, #4]
 80029dc:	9600      	str	r6, [sp, #0]
 80029de:	f7ff fed5 	bl	800278c <_ZN7ssd130613DrawRectangleEhhhh13SSD1306_COLOR>
	oledPanel.DrawRectangle(94, 0, 127, 63, White);
 80029e2:	237f      	movs	r3, #127	@ 0x7f
 80029e4:	2200      	movs	r2, #0
 80029e6:	215e      	movs	r1, #94	@ 0x5e
 80029e8:	0020      	movs	r0, r4
 80029ea:	9501      	str	r5, [sp, #4]
 80029ec:	9600      	str	r6, [sp, #0]
 80029ee:	f7ff fecd 	bl	800278c <_ZN7ssd130613DrawRectangleEhhhh13SSD1306_COLOR>
	oledPanel.DrawRectangle(0, 24, 94, 63, White);
 80029f2:	235e      	movs	r3, #94	@ 0x5e
 80029f4:	2218      	movs	r2, #24
 80029f6:	2100      	movs	r1, #0
 80029f8:	0020      	movs	r0, r4
 80029fa:	9501      	str	r5, [sp, #4]
 80029fc:	9600      	str	r6, [sp, #0]
 80029fe:	f7ff fec5 	bl	800278c <_ZN7ssd130613DrawRectangleEhhhh13SSD1306_COLOR>
	oledPanel.SetCursor(4, 28);
 8002a02:	221c      	movs	r2, #28
 8002a04:	2104      	movs	r1, #4
 8002a06:	0020      	movs	r0, r4
 8002a08:	f7ff fe48 	bl	800269c <_ZN7ssd13069SetCursorEhh>
	oledPanel.WriteString("Time setting", Font_7x10, White);
 8002a0c:	4fc6      	ldr	r7, [pc, #792]	@ (8002d28 <_ZN3app13page_set_timeEv+0x370>)
 8002a0e:	9500      	str	r5, [sp, #0]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	0020      	movs	r0, r4
 8002a14:	49c5      	ldr	r1, [pc, #788]	@ (8002d2c <_ZN3app13page_set_timeEv+0x374>)
 8002a16:	683a      	ldr	r2, [r7, #0]
 8002a18:	f7ff fe22 	bl	8002660 <_ZN7ssd130611WriteStringEPKc7FontDef13SSD1306_COLOR>
	uint8_t step = 1;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	4698      	mov	r8, r3
 8002a20:	4bc3      	ldr	r3, [pc, #780]	@ (8002d30 <_ZN3app13page_set_timeEv+0x378>)
 8002a22:	4dc4      	ldr	r5, [pc, #784]	@ (8002d34 <_ZN3app13page_set_timeEv+0x37c>)
 8002a24:	469a      	mov	sl, r3
 8002a26:	4bc4      	ldr	r3, [pc, #784]	@ (8002d38 <_ZN3app13page_set_timeEv+0x380>)
 8002a28:	4699      	mov	r9, r3
 8002a2a:	4bc4      	ldr	r3, [pc, #784]	@ (8002d3c <_ZN3app13page_set_timeEv+0x384>)
 8002a2c:	9303      	str	r3, [sp, #12]
 8002a2e:	4bc4      	ldr	r3, [pc, #784]	@ (8002d40 <_ZN3app13page_set_timeEv+0x388>)
 8002a30:	9304      	str	r3, [sp, #16]
 8002a32:	4bc4      	ldr	r3, [pc, #784]	@ (8002d44 <_ZN3app13page_set_timeEv+0x38c>)
 8002a34:	469b      	mov	fp, r3
		if ((step == 8) || (step == 0))
		{
			oledPanel.ClearDisplay();
			break;
		}
		switch(step)
 8002a36:	4bc4      	ldr	r3, [pc, #784]	@ (8002d48 <_ZN3app13page_set_timeEv+0x390>)
 8002a38:	9305      	str	r3, [sp, #20]
				break;
			}
			break;
		case 7:
			oledPanel.SetCursor(4, 38);
			oledPanel.WriteString("WeekDay   ", Font_7x10, White);
 8002a3a:	4bc4      	ldr	r3, [pc, #784]	@ (8002d4c <_ZN3app13page_set_timeEv+0x394>)
 8002a3c:	9306      	str	r3, [sp, #24]
			oledPanel.WriteString("Year      ", Font_7x10, White);
 8002a3e:	4bc4      	ldr	r3, [pc, #784]	@ (8002d50 <_ZN3app13page_set_timeEv+0x398>)
 8002a40:	9307      	str	r3, [sp, #28]
		date_time.get_time();
 8002a42:	0028      	movs	r0, r5
 8002a44:	f000 fac6 	bl	8002fd4 <_ZN4time8get_timeEv>
		sprintf((char *)screen_time_buff_c, "%02d:%02d:%02d", date_time.Hours, date_time.Minutes, date_time.Seconds);
 8002a48:	79a9      	ldrb	r1, [r5, #6]
 8002a4a:	796b      	ldrb	r3, [r5, #5]
 8002a4c:	792a      	ldrb	r2, [r5, #4]
 8002a4e:	a809      	add	r0, sp, #36	@ 0x24
 8002a50:	9100      	str	r1, [sp, #0]
 8002a52:	4651      	mov	r1, sl
 8002a54:	f000 fbf2 	bl	800323c <siprintf>
		oledPanel.WriteString(screen_time_buff_c, Font_11x18, White);
 8002a58:	2601      	movs	r6, #1
		oledPanel.SetCursor(4, 4);
 8002a5a:	2204      	movs	r2, #4
 8002a5c:	2104      	movs	r1, #4
 8002a5e:	0020      	movs	r0, r4
 8002a60:	f7ff fe1c 	bl	800269c <_ZN7ssd13069SetCursorEhh>
		oledPanel.WriteString(screen_time_buff_c, Font_11x18, White);
 8002a64:	464b      	mov	r3, r9
 8002a66:	9600      	str	r6, [sp, #0]
 8002a68:	cb0c      	ldmia	r3, {r2, r3}
 8002a6a:	a909      	add	r1, sp, #36	@ 0x24
 8002a6c:	0020      	movs	r0, r4
 8002a6e:	f7ff fdf7 	bl	8002660 <_ZN7ssd130611WriteStringEPKc7FontDef13SSD1306_COLOR>
		oledPanel.SetCursor(100, 4);
 8002a72:	2204      	movs	r2, #4
 8002a74:	2164      	movs	r1, #100	@ 0x64
 8002a76:	0020      	movs	r0, r4
 8002a78:	f7ff fe10 	bl	800269c <_ZN7ssd13069SetCursorEhh>
		oledPanel.WriteString(date_map[date_time.WeekDay].c_str(), Font_7x10, White);
 8002a7c:	782a      	ldrb	r2, [r5, #0]
 8002a7e:	0020      	movs	r0, r4
 8002a80:	0053      	lsls	r3, r2, #1
 8002a82:	189b      	adds	r3, r3, r2
 8002a84:	9a03      	ldr	r2, [sp, #12]
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	58d1      	ldr	r1, [r2, r3]
 8002a8a:	9600      	str	r6, [sp, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	683a      	ldr	r2, [r7, #0]
 8002a90:	f7ff fde6 	bl	8002660 <_ZN7ssd130611WriteStringEPKc7FontDef13SSD1306_COLOR>
		sprintf((char *)screen_time_buff_c, "%02d", date_time.Date);
 8002a94:	78aa      	ldrb	r2, [r5, #2]
 8002a96:	9904      	ldr	r1, [sp, #16]
 8002a98:	a809      	add	r0, sp, #36	@ 0x24
 8002a9a:	f000 fbcf 	bl	800323c <siprintf>
		oledPanel.SetCursor(104, 14);
 8002a9e:	220e      	movs	r2, #14
 8002aa0:	2168      	movs	r1, #104	@ 0x68
 8002aa2:	0020      	movs	r0, r4
 8002aa4:	f7ff fdfa 	bl	800269c <_ZN7ssd13069SetCursorEhh>
		oledPanel.WriteString(screen_time_buff_c, Font_7x10, White);
 8002aa8:	9600      	str	r6, [sp, #0]
 8002aaa:	683a      	ldr	r2, [r7, #0]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	a909      	add	r1, sp, #36	@ 0x24
 8002ab0:	0020      	movs	r0, r4
 8002ab2:	f7ff fdd5 	bl	8002660 <_ZN7ssd130611WriteStringEPKc7FontDef13SSD1306_COLOR>
		oledPanel.UpdateScreen();
 8002ab6:	0020      	movs	r0, r4
 8002ab8:	f7ff fb40 	bl	800213c <_ZN7ssd130612UpdateScreenEv>
		get_key = key_pad.get_key_pressed();
 8002abc:	4658      	mov	r0, fp
 8002abe:	f000 fa37 	bl	8002f30 <_ZN6keypad15get_key_pressedEv>
 8002ac2:	0006      	movs	r6, r0
		if (key::KEY_BACK == get_key)
 8002ac4:	2801      	cmp	r0, #1
 8002ac6:	d100      	bne.n	8002aca <_ZN3app13page_set_timeEv+0x112>
 8002ac8:	e0d3      	b.n	8002c72 <_ZN3app13page_set_timeEv+0x2ba>
			step++;
 8002aca:	4643      	mov	r3, r8
		if (key::KEY_OK == get_key)
 8002acc:	2e02      	cmp	r6, #2
 8002ace:	d000      	beq.n	8002ad2 <_ZN3app13page_set_timeEv+0x11a>
 8002ad0:	e0e2      	b.n	8002c98 <_ZN3app13page_set_timeEv+0x2e0>
			step++;
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	4698      	mov	r8, r3
		if ((step == 8) || (step == 0))
 8002ad8:	2308      	movs	r3, #8
 8002ada:	4642      	mov	r2, r8
 8002adc:	439a      	bics	r2, r3
 8002ade:	d100      	bne.n	8002ae2 <_ZN3app13page_set_timeEv+0x12a>
 8002ae0:	e0d0      	b.n	8002c84 <_ZN3app13page_set_timeEv+0x2cc>
		switch(step)
 8002ae2:	4643      	mov	r3, r8
 8002ae4:	2b07      	cmp	r3, #7
 8002ae6:	d816      	bhi.n	8002b16 <_ZN3app13page_set_timeEv+0x15e>
 8002ae8:	9a05      	ldr	r2, [sp, #20]
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	58d3      	ldr	r3, [r2, r3]
 8002aee:	469f      	mov	pc, r3
			oledPanel.SetCursor(4, 38);
 8002af0:	2226      	movs	r2, #38	@ 0x26
 8002af2:	2104      	movs	r1, #4
 8002af4:	0020      	movs	r0, r4
 8002af6:	f7ff fdd1 	bl	800269c <_ZN7ssd13069SetCursorEhh>
			oledPanel.WriteString("WeekDay   ", Font_7x10, White);
 8002afa:	2301      	movs	r3, #1
 8002afc:	9300      	str	r3, [sp, #0]
 8002afe:	0020      	movs	r0, r4
 8002b00:	683a      	ldr	r2, [r7, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	9906      	ldr	r1, [sp, #24]
 8002b06:	f7ff fdab 	bl	8002660 <_ZN7ssd130611WriteStringEPKc7FontDef13SSD1306_COLOR>
			if (key::KEY_UP == get_key)
 8002b0a:	2e03      	cmp	r6, #3
 8002b0c:	d100      	bne.n	8002b10 <_ZN3app13page_set_timeEv+0x158>
 8002b0e:	e0ff      	b.n	8002d10 <_ZN3app13page_set_timeEv+0x358>
				date_time.WeekDay++;
				if (date_time.WeekDay == 8)
					date_time.WeekDay = 1;
				break;
			}
			if (key::KEY_DOWN == get_key)
 8002b10:	2e04      	cmp	r6, #4
 8002b12:	d100      	bne.n	8002b16 <_ZN3app13page_set_timeEv+0x15e>
 8002b14:	e0c4      	b.n	8002ca0 <_ZN3app13page_set_timeEv+0x2e8>

		default:
			break;
		}
		//Set the time
		date_time.set_time();
 8002b16:	0028      	movs	r0, r5
 8002b18:	f000 fa82 	bl	8003020 <_ZN4time8set_timeEv>
 8002b1c:	e791      	b.n	8002a42 <_ZN3app13page_set_timeEv+0x8a>
			oledPanel.SetCursor(4, 38);
 8002b1e:	2226      	movs	r2, #38	@ 0x26
 8002b20:	2104      	movs	r1, #4
 8002b22:	0020      	movs	r0, r4
 8002b24:	f7ff fdba 	bl	800269c <_ZN7ssd13069SetCursorEhh>
			oledPanel.WriteString("Year      ", Font_7x10, White);
 8002b28:	2301      	movs	r3, #1
 8002b2a:	9300      	str	r3, [sp, #0]
 8002b2c:	0020      	movs	r0, r4
 8002b2e:	683a      	ldr	r2, [r7, #0]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	9907      	ldr	r1, [sp, #28]
 8002b34:	f7ff fd94 	bl	8002660 <_ZN7ssd130611WriteStringEPKc7FontDef13SSD1306_COLOR>
			if (key::KEY_UP == get_key)
 8002b38:	2e03      	cmp	r6, #3
 8002b3a:	d100      	bne.n	8002b3e <_ZN3app13page_set_timeEv+0x186>
 8002b3c:	e0e1      	b.n	8002d02 <_ZN3app13page_set_timeEv+0x34a>
			if (key::KEY_DOWN == get_key)
 8002b3e:	2e04      	cmp	r6, #4
 8002b40:	d1e9      	bne.n	8002b16 <_ZN3app13page_set_timeEv+0x15e>
				if (date_time.Year != 0)
 8002b42:	78eb      	ldrb	r3, [r5, #3]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d0e6      	beq.n	8002b16 <_ZN3app13page_set_timeEv+0x15e>
					date_time.Year--;
 8002b48:	3b01      	subs	r3, #1
		date_time.set_time();
 8002b4a:	0028      	movs	r0, r5
					date_time.Year--;
 8002b4c:	70eb      	strb	r3, [r5, #3]
		date_time.set_time();
 8002b4e:	f000 fa67 	bl	8003020 <_ZN4time8set_timeEv>
 8002b52:	e776      	b.n	8002a42 <_ZN3app13page_set_timeEv+0x8a>
			oledPanel.SetCursor(4, 38);
 8002b54:	2226      	movs	r2, #38	@ 0x26
 8002b56:	2104      	movs	r1, #4
 8002b58:	0020      	movs	r0, r4
 8002b5a:	f7ff fd9f 	bl	800269c <_ZN7ssd13069SetCursorEhh>
			oledPanel.WriteString("Month     ", Font_7x10, White);
 8002b5e:	2301      	movs	r3, #1
 8002b60:	9300      	str	r3, [sp, #0]
 8002b62:	0020      	movs	r0, r4
 8002b64:	497b      	ldr	r1, [pc, #492]	@ (8002d54 <_ZN3app13page_set_timeEv+0x39c>)
 8002b66:	683a      	ldr	r2, [r7, #0]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f7ff fd79 	bl	8002660 <_ZN7ssd130611WriteStringEPKc7FontDef13SSD1306_COLOR>
			if (key::KEY_UP == get_key)
 8002b6e:	2e03      	cmp	r6, #3
 8002b70:	d100      	bne.n	8002b74 <_ZN3app13page_set_timeEv+0x1bc>
 8002b72:	e0a0      	b.n	8002cb6 <_ZN3app13page_set_timeEv+0x2fe>
			if (key::KEY_DOWN == get_key)
 8002b74:	2e04      	cmp	r6, #4
 8002b76:	d1ce      	bne.n	8002b16 <_ZN3app13page_set_timeEv+0x15e>
				if (date_time.Month == 1)
 8002b78:	786b      	ldrb	r3, [r5, #1]
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d100      	bne.n	8002b80 <_ZN3app13page_set_timeEv+0x1c8>
 8002b7e:	e115      	b.n	8002dac <_ZN3app13page_set_timeEv+0x3f4>
				date_time.Month--;
 8002b80:	3b01      	subs	r3, #1
 8002b82:	b2db      	uxtb	r3, r3
					date_time.Month = 1;
 8002b84:	706b      	strb	r3, [r5, #1]
		date_time.set_time();
 8002b86:	0028      	movs	r0, r5
 8002b88:	f000 fa4a 	bl	8003020 <_ZN4time8set_timeEv>
 8002b8c:	e759      	b.n	8002a42 <_ZN3app13page_set_timeEv+0x8a>
			oledPanel.SetCursor(4, 38);
 8002b8e:	2226      	movs	r2, #38	@ 0x26
 8002b90:	2104      	movs	r1, #4
 8002b92:	0020      	movs	r0, r4
 8002b94:	f7ff fd82 	bl	800269c <_ZN7ssd13069SetCursorEhh>
			oledPanel.WriteString("Date      ", Font_7x10, White);
 8002b98:	2301      	movs	r3, #1
 8002b9a:	9300      	str	r3, [sp, #0]
 8002b9c:	0020      	movs	r0, r4
 8002b9e:	496e      	ldr	r1, [pc, #440]	@ (8002d58 <_ZN3app13page_set_timeEv+0x3a0>)
 8002ba0:	683a      	ldr	r2, [r7, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f7ff fd5c 	bl	8002660 <_ZN7ssd130611WriteStringEPKc7FontDef13SSD1306_COLOR>
			if (key::KEY_UP == get_key)
 8002ba8:	2e03      	cmp	r6, #3
 8002baa:	d100      	bne.n	8002bae <_ZN3app13page_set_timeEv+0x1f6>
 8002bac:	e096      	b.n	8002cdc <_ZN3app13page_set_timeEv+0x324>
			if (key::KEY_DOWN == get_key)
 8002bae:	2e04      	cmp	r6, #4
 8002bb0:	d1b1      	bne.n	8002b16 <_ZN3app13page_set_timeEv+0x15e>
				if (date_time.Date == 1)
 8002bb2:	78ab      	ldrb	r3, [r5, #2]
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d100      	bne.n	8002bba <_ZN3app13page_set_timeEv+0x202>
 8002bb8:	e0fb      	b.n	8002db2 <_ZN3app13page_set_timeEv+0x3fa>
				date_time.Date--;
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	b2db      	uxtb	r3, r3
					date_time.Date = 1;
 8002bbe:	70ab      	strb	r3, [r5, #2]
		date_time.set_time();
 8002bc0:	0028      	movs	r0, r5
 8002bc2:	f000 fa2d 	bl	8003020 <_ZN4time8set_timeEv>
 8002bc6:	e73c      	b.n	8002a42 <_ZN3app13page_set_timeEv+0x8a>
			oledPanel.SetCursor(4, 38);
 8002bc8:	2226      	movs	r2, #38	@ 0x26
 8002bca:	2104      	movs	r1, #4
 8002bcc:	0020      	movs	r0, r4
 8002bce:	f7ff fd65 	bl	800269c <_ZN7ssd13069SetCursorEhh>
			oledPanel.WriteString("Seconds   ", Font_7x10, White);
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	9300      	str	r3, [sp, #0]
 8002bd6:	0020      	movs	r0, r4
 8002bd8:	4960      	ldr	r1, [pc, #384]	@ (8002d5c <_ZN3app13page_set_timeEv+0x3a4>)
 8002bda:	683a      	ldr	r2, [r7, #0]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f7ff fd3f 	bl	8002660 <_ZN7ssd130611WriteStringEPKc7FontDef13SSD1306_COLOR>
			if (key::KEY_UP == get_key)
 8002be2:	2e03      	cmp	r6, #3
 8002be4:	d100      	bne.n	8002be8 <_ZN3app13page_set_timeEv+0x230>
 8002be6:	e06f      	b.n	8002cc8 <_ZN3app13page_set_timeEv+0x310>
			if (key::KEY_DOWN == get_key)
 8002be8:	2e04      	cmp	r6, #4
 8002bea:	d194      	bne.n	8002b16 <_ZN3app13page_set_timeEv+0x15e>
				if (date_time.Seconds == 0)
 8002bec:	79ab      	ldrb	r3, [r5, #6]
 8002bee:	223b      	movs	r2, #59	@ 0x3b
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d000      	beq.n	8002bf6 <_ZN3app13page_set_timeEv+0x23e>
 8002bf4:	e0d6      	b.n	8002da4 <_ZN3app13page_set_timeEv+0x3ec>
				date_time.Seconds--;
 8002bf6:	71aa      	strb	r2, [r5, #6]
		date_time.set_time();
 8002bf8:	0028      	movs	r0, r5
 8002bfa:	f000 fa11 	bl	8003020 <_ZN4time8set_timeEv>
 8002bfe:	e720      	b.n	8002a42 <_ZN3app13page_set_timeEv+0x8a>
			oledPanel.SetCursor(4, 38);
 8002c00:	2226      	movs	r2, #38	@ 0x26
 8002c02:	2104      	movs	r1, #4
 8002c04:	0020      	movs	r0, r4
 8002c06:	f7ff fd49 	bl	800269c <_ZN7ssd13069SetCursorEhh>
			oledPanel.WriteString("Minutes   ", Font_7x10, White);
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	9300      	str	r3, [sp, #0]
 8002c0e:	0020      	movs	r0, r4
 8002c10:	4953      	ldr	r1, [pc, #332]	@ (8002d60 <_ZN3app13page_set_timeEv+0x3a8>)
 8002c12:	683a      	ldr	r2, [r7, #0]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f7ff fd23 	bl	8002660 <_ZN7ssd130611WriteStringEPKc7FontDef13SSD1306_COLOR>
			if (key::KEY_UP == get_key)
 8002c1a:	2e03      	cmp	r6, #3
 8002c1c:	d100      	bne.n	8002c20 <_ZN3app13page_set_timeEv+0x268>
 8002c1e:	e0a3      	b.n	8002d68 <_ZN3app13page_set_timeEv+0x3b0>
			if (key::KEY_DOWN == get_key)
 8002c20:	2e04      	cmp	r6, #4
 8002c22:	d000      	beq.n	8002c26 <_ZN3app13page_set_timeEv+0x26e>
 8002c24:	e777      	b.n	8002b16 <_ZN3app13page_set_timeEv+0x15e>
				if (date_time.Minutes == 0)
 8002c26:	796b      	ldrb	r3, [r5, #5]
 8002c28:	223b      	movs	r2, #59	@ 0x3b
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d000      	beq.n	8002c30 <_ZN3app13page_set_timeEv+0x278>
 8002c2e:	e0b1      	b.n	8002d94 <_ZN3app13page_set_timeEv+0x3dc>
				date_time.Minutes--;
 8002c30:	716a      	strb	r2, [r5, #5]
		date_time.set_time();
 8002c32:	0028      	movs	r0, r5
 8002c34:	f000 f9f4 	bl	8003020 <_ZN4time8set_timeEv>
 8002c38:	e703      	b.n	8002a42 <_ZN3app13page_set_timeEv+0x8a>
			oledPanel.SetCursor(4, 38);
 8002c3a:	2226      	movs	r2, #38	@ 0x26
 8002c3c:	2104      	movs	r1, #4
 8002c3e:	0020      	movs	r0, r4
 8002c40:	f7ff fd2c 	bl	800269c <_ZN7ssd13069SetCursorEhh>
			oledPanel.WriteString("Hour      ", Font_7x10, White);
 8002c44:	2301      	movs	r3, #1
 8002c46:	9300      	str	r3, [sp, #0]
 8002c48:	0020      	movs	r0, r4
 8002c4a:	4946      	ldr	r1, [pc, #280]	@ (8002d64 <_ZN3app13page_set_timeEv+0x3ac>)
 8002c4c:	683a      	ldr	r2, [r7, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f7ff fd06 	bl	8002660 <_ZN7ssd130611WriteStringEPKc7FontDef13SSD1306_COLOR>
			if (key::KEY_UP == get_key)
 8002c54:	2e03      	cmp	r6, #3
 8002c56:	d04a      	beq.n	8002cee <_ZN3app13page_set_timeEv+0x336>
			if (key::KEY_DOWN == get_key)
 8002c58:	2e04      	cmp	r6, #4
 8002c5a:	d000      	beq.n	8002c5e <_ZN3app13page_set_timeEv+0x2a6>
 8002c5c:	e75b      	b.n	8002b16 <_ZN3app13page_set_timeEv+0x15e>
					if (date_time.Hours == 0)
 8002c5e:	792b      	ldrb	r3, [r5, #4]
 8002c60:	2217      	movs	r2, #23
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d000      	beq.n	8002c68 <_ZN3app13page_set_timeEv+0x2b0>
 8002c66:	e099      	b.n	8002d9c <_ZN3app13page_set_timeEv+0x3e4>
					date_time.Hours--;
 8002c68:	712a      	strb	r2, [r5, #4]
		date_time.set_time();
 8002c6a:	0028      	movs	r0, r5
 8002c6c:	f000 f9d8 	bl	8003020 <_ZN4time8set_timeEv>
 8002c70:	e6e7      	b.n	8002a42 <_ZN3app13page_set_timeEv+0x8a>
			step--;
 8002c72:	4643      	mov	r3, r8
 8002c74:	3b01      	subs	r3, #1
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	4698      	mov	r8, r3
		if ((step == 8) || (step == 0))
 8002c7a:	2308      	movs	r3, #8
 8002c7c:	4642      	mov	r2, r8
 8002c7e:	439a      	bics	r2, r3
 8002c80:	d000      	beq.n	8002c84 <_ZN3app13page_set_timeEv+0x2cc>
 8002c82:	e72e      	b.n	8002ae2 <_ZN3app13page_set_timeEv+0x12a>
			oledPanel.ClearDisplay();
 8002c84:	0020      	movs	r0, r4
 8002c86:	f7ff fdb7 	bl	80027f8 <_ZN7ssd130612ClearDisplayEv>

	}
}
 8002c8a:	b00f      	add	sp, #60	@ 0x3c
 8002c8c:	bcf0      	pop	{r4, r5, r6, r7}
 8002c8e:	46bb      	mov	fp, r7
 8002c90:	46b2      	mov	sl, r6
 8002c92:	46a9      	mov	r9, r5
 8002c94:	46a0      	mov	r8, r4
 8002c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ((step == 8) || (step == 0))
 8002c98:	2b08      	cmp	r3, #8
 8002c9a:	d000      	beq.n	8002c9e <_ZN3app13page_set_timeEv+0x2e6>
 8002c9c:	e721      	b.n	8002ae2 <_ZN3app13page_set_timeEv+0x12a>
 8002c9e:	e7f1      	b.n	8002c84 <_ZN3app13page_set_timeEv+0x2cc>
				if (date_time.WeekDay == 1)
 8002ca0:	782b      	ldrb	r3, [r5, #0]
 8002ca2:	4642      	mov	r2, r8
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d001      	beq.n	8002cac <_ZN3app13page_set_timeEv+0x2f4>
				date_time.WeekDay--;
 8002ca8:	3b01      	subs	r3, #1
 8002caa:	b2da      	uxtb	r2, r3
		date_time.set_time();
 8002cac:	0028      	movs	r0, r5
				date_time.WeekDay--;
 8002cae:	702a      	strb	r2, [r5, #0]
		date_time.set_time();
 8002cb0:	f000 f9b6 	bl	8003020 <_ZN4time8set_timeEv>
 8002cb4:	e6c5      	b.n	8002a42 <_ZN3app13page_set_timeEv+0x8a>
				date_time.Month++;
 8002cb6:	786b      	ldrb	r3, [r5, #1]
 8002cb8:	3301      	adds	r3, #1
 8002cba:	b2db      	uxtb	r3, r3
				if (date_time.Month == 13)
 8002cbc:	2b0d      	cmp	r3, #13
 8002cbe:	d000      	beq.n	8002cc2 <_ZN3app13page_set_timeEv+0x30a>
 8002cc0:	e760      	b.n	8002b84 <_ZN3app13page_set_timeEv+0x1cc>
					date_time.Month = 1;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	706b      	strb	r3, [r5, #1]
 8002cc6:	e75e      	b.n	8002b86 <_ZN3app13page_set_timeEv+0x1ce>
				date_time.Seconds++;
 8002cc8:	79ab      	ldrb	r3, [r5, #6]
 8002cca:	3301      	adds	r3, #1
 8002ccc:	b2db      	uxtb	r3, r3
				if (date_time.Seconds == 60)
 8002cce:	2b3c      	cmp	r3, #60	@ 0x3c
 8002cd0:	d05d      	beq.n	8002d8e <_ZN3app13page_set_timeEv+0x3d6>
					date_time.Seconds = 0;
 8002cd2:	71ab      	strb	r3, [r5, #6]
		date_time.set_time();
 8002cd4:	0028      	movs	r0, r5
 8002cd6:	f000 f9a3 	bl	8003020 <_ZN4time8set_timeEv>
 8002cda:	e6b2      	b.n	8002a42 <_ZN3app13page_set_timeEv+0x8a>
				date_time.Date++;
 8002cdc:	78ab      	ldrb	r3, [r5, #2]
 8002cde:	3301      	adds	r3, #1
 8002ce0:	b2db      	uxtb	r3, r3
				if (date_time.Date == 32)
 8002ce2:	2b20      	cmp	r3, #32
 8002ce4:	d000      	beq.n	8002ce8 <_ZN3app13page_set_timeEv+0x330>
 8002ce6:	e76a      	b.n	8002bbe <_ZN3app13page_set_timeEv+0x206>
					date_time.Date = 1;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	70ab      	strb	r3, [r5, #2]
 8002cec:	e768      	b.n	8002bc0 <_ZN3app13page_set_timeEv+0x208>
				date_time.Hours++;
 8002cee:	792b      	ldrb	r3, [r5, #4]
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	b2db      	uxtb	r3, r3
				if (date_time.Hours == 24)
 8002cf4:	2b18      	cmp	r3, #24
 8002cf6:	d047      	beq.n	8002d88 <_ZN3app13page_set_timeEv+0x3d0>
					date_time.Hours = 0;
 8002cf8:	712b      	strb	r3, [r5, #4]
		date_time.set_time();
 8002cfa:	0028      	movs	r0, r5
 8002cfc:	f000 f990 	bl	8003020 <_ZN4time8set_timeEv>
 8002d00:	e69f      	b.n	8002a42 <_ZN3app13page_set_timeEv+0x8a>
				date_time.Year++;
 8002d02:	78eb      	ldrb	r3, [r5, #3]
		date_time.set_time();
 8002d04:	0028      	movs	r0, r5
				date_time.Year++;
 8002d06:	3301      	adds	r3, #1
 8002d08:	70eb      	strb	r3, [r5, #3]
		date_time.set_time();
 8002d0a:	f000 f989 	bl	8003020 <_ZN4time8set_timeEv>
 8002d0e:	e698      	b.n	8002a42 <_ZN3app13page_set_timeEv+0x8a>
				date_time.WeekDay++;
 8002d10:	782b      	ldrb	r3, [r5, #0]
 8002d12:	3301      	adds	r3, #1
 8002d14:	b2db      	uxtb	r3, r3
				if (date_time.WeekDay == 8)
 8002d16:	2b08      	cmp	r3, #8
 8002d18:	d033      	beq.n	8002d82 <_ZN3app13page_set_timeEv+0x3ca>
					date_time.WeekDay = 1;
 8002d1a:	702b      	strb	r3, [r5, #0]
		date_time.set_time();
 8002d1c:	0028      	movs	r0, r5
 8002d1e:	f000 f97f 	bl	8003020 <_ZN4time8set_timeEv>
 8002d22:	e68e      	b.n	8002a42 <_ZN3app13page_set_timeEv+0x8a>
 8002d24:	20000184 	.word	0x20000184
 8002d28:	20000014 	.word	0x20000014
 8002d2c:	08005044 	.word	0x08005044
 8002d30:	0800500c 	.word	0x0800500c
 8002d34:	2000016c 	.word	0x2000016c
 8002d38:	2000000c 	.word	0x2000000c
 8002d3c:	2000058c 	.word	0x2000058c
 8002d40:	0800501c 	.word	0x0800501c
 8002d44:	20000168 	.word	0x20000168
 8002d48:	080050a8 	.word	0x080050a8
 8002d4c:	0800509c 	.word	0x0800509c
 8002d50:	08005090 	.word	0x08005090
 8002d54:	08005084 	.word	0x08005084
 8002d58:	08005078 	.word	0x08005078
 8002d5c:	0800506c 	.word	0x0800506c
 8002d60:	08005060 	.word	0x08005060
 8002d64:	08005054 	.word	0x08005054
				date_time.Minutes++;
 8002d68:	796b      	ldrb	r3, [r5, #5]
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	b2db      	uxtb	r3, r3
				if (date_time.Minutes == 60)
 8002d6e:	2b3c      	cmp	r3, #60	@ 0x3c
 8002d70:	d004      	beq.n	8002d7c <_ZN3app13page_set_timeEv+0x3c4>
					date_time.Minutes = 0;
 8002d72:	716b      	strb	r3, [r5, #5]
		date_time.set_time();
 8002d74:	0028      	movs	r0, r5
 8002d76:	f000 f953 	bl	8003020 <_ZN4time8set_timeEv>
 8002d7a:	e662      	b.n	8002a42 <_ZN3app13page_set_timeEv+0x8a>
					date_time.Minutes = 0;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	716b      	strb	r3, [r5, #5]
 8002d80:	e7f8      	b.n	8002d74 <_ZN3app13page_set_timeEv+0x3bc>
					date_time.WeekDay = 1;
 8002d82:	2301      	movs	r3, #1
 8002d84:	702b      	strb	r3, [r5, #0]
 8002d86:	e7c9      	b.n	8002d1c <_ZN3app13page_set_timeEv+0x364>
					date_time.Hours = 0;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	712b      	strb	r3, [r5, #4]
 8002d8c:	e7b5      	b.n	8002cfa <_ZN3app13page_set_timeEv+0x342>
					date_time.Seconds = 0;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	71ab      	strb	r3, [r5, #6]
 8002d92:	e79f      	b.n	8002cd4 <_ZN3app13page_set_timeEv+0x31c>
				date_time.Minutes--;
 8002d94:	3b01      	subs	r3, #1
 8002d96:	b2da      	uxtb	r2, r3
 8002d98:	716a      	strb	r2, [r5, #5]
				break;
 8002d9a:	e74a      	b.n	8002c32 <_ZN3app13page_set_timeEv+0x27a>
					date_time.Hours--;
 8002d9c:	3b01      	subs	r3, #1
 8002d9e:	b2da      	uxtb	r2, r3
 8002da0:	712a      	strb	r2, [r5, #4]
					break;
 8002da2:	e762      	b.n	8002c6a <_ZN3app13page_set_timeEv+0x2b2>
				date_time.Seconds--;
 8002da4:	3b01      	subs	r3, #1
 8002da6:	b2da      	uxtb	r2, r3
 8002da8:	71aa      	strb	r2, [r5, #6]
				break;
 8002daa:	e725      	b.n	8002bf8 <_ZN3app13page_set_timeEv+0x240>
 8002dac:	230c      	movs	r3, #12
					date_time.Month = 1;
 8002dae:	706b      	strb	r3, [r5, #1]
 8002db0:	e6e9      	b.n	8002b86 <_ZN3app13page_set_timeEv+0x1ce>
 8002db2:	231f      	movs	r3, #31
					date_time.Date = 1;
 8002db4:	70ab      	strb	r3, [r5, #2]
 8002db6:	e703      	b.n	8002bc0 <_ZN3app13page_set_timeEv+0x208>

08002db8 <_ZN3app4mainEv>:
{
 8002db8:	b570      	push	{r4, r5, r6, lr}
 8002dba:	0004      	movs	r4, r0
	oledPanel.Init();
 8002dbc:	4809      	ldr	r0, [pc, #36]	@ (8002de4 <_ZN3app4mainEv+0x2c>)
 8002dbe:	f7ff fa1b 	bl	80021f8 <_ZN7ssd13064InitEv>
	aht30.get_sensor_data();
 8002dc2:	4809      	ldr	r0, [pc, #36]	@ (8002de8 <_ZN3app4mainEv+0x30>)
 8002dc4:	f000 f8c0 	bl	8002f48 <_ZN6sensor15get_sensor_dataEv>
 8002dc8:	4d08      	ldr	r5, [pc, #32]	@ (8002dec <_ZN3app4mainEv+0x34>)
		page_main();
 8002dca:	0020      	movs	r0, r4
 8002dcc:	f7ff fd46 	bl	800285c <_ZN3app9page_mainEv>
		key get_key = key_pad.get_key_pressed();
 8002dd0:	0028      	movs	r0, r5
 8002dd2:	f000 f8ad 	bl	8002f30 <_ZN6keypad15get_key_pressedEv>
		if (key::KEY_OK == get_key)
 8002dd6:	2802      	cmp	r0, #2
 8002dd8:	d1f7      	bne.n	8002dca <_ZN3app4mainEv+0x12>
			page_set_time();
 8002dda:	0020      	movs	r0, r4
 8002ddc:	f7ff fdec 	bl	80029b8 <_ZN3app13page_set_timeEv>
 8002de0:	e7f3      	b.n	8002dca <_ZN3app4mainEv+0x12>
 8002de2:	46c0      	nop			@ (mov r8, r8)
 8002de4:	20000184 	.word	0x20000184
 8002de8:	20000164 	.word	0x20000164
 8002dec:	20000168 	.word	0x20000168

08002df0 <_GLOBAL__sub_I__Z8date_mapB5cxx11>:
}
 8002df0:	b510      	push	{r4, lr}
std::string date_map[8] {"", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"};
 8002df2:	4c1a      	ldr	r4, [pc, #104]	@ (8002e5c <_GLOBAL__sub_I__Z8date_mapB5cxx11+0x6c>)
 8002df4:	491a      	ldr	r1, [pc, #104]	@ (8002e60 <_GLOBAL__sub_I__Z8date_mapB5cxx11+0x70>)
 8002df6:	0020      	movs	r0, r4
 8002df8:	f7ff fd06 	bl	8002808 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_.isra.0>
 8002dfc:	0020      	movs	r0, r4
 8002dfe:	4919      	ldr	r1, [pc, #100]	@ (8002e64 <_GLOBAL__sub_I__Z8date_mapB5cxx11+0x74>)
 8002e00:	3018      	adds	r0, #24
 8002e02:	f7ff fd01 	bl	8002808 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_.isra.0>
 8002e06:	0020      	movs	r0, r4
 8002e08:	4917      	ldr	r1, [pc, #92]	@ (8002e68 <_GLOBAL__sub_I__Z8date_mapB5cxx11+0x78>)
 8002e0a:	3030      	adds	r0, #48	@ 0x30
 8002e0c:	f7ff fcfc 	bl	8002808 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_.isra.0>
 8002e10:	0020      	movs	r0, r4
 8002e12:	4916      	ldr	r1, [pc, #88]	@ (8002e6c <_GLOBAL__sub_I__Z8date_mapB5cxx11+0x7c>)
 8002e14:	3048      	adds	r0, #72	@ 0x48
 8002e16:	f7ff fcf7 	bl	8002808 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_.isra.0>
 8002e1a:	0020      	movs	r0, r4
 8002e1c:	4914      	ldr	r1, [pc, #80]	@ (8002e70 <_GLOBAL__sub_I__Z8date_mapB5cxx11+0x80>)
 8002e1e:	3060      	adds	r0, #96	@ 0x60
 8002e20:	f7ff fcf2 	bl	8002808 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_.isra.0>
 8002e24:	0020      	movs	r0, r4
 8002e26:	4913      	ldr	r1, [pc, #76]	@ (8002e74 <_GLOBAL__sub_I__Z8date_mapB5cxx11+0x84>)
 8002e28:	3078      	adds	r0, #120	@ 0x78
 8002e2a:	f7ff fced 	bl	8002808 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_.isra.0>
 8002e2e:	0020      	movs	r0, r4
 8002e30:	4911      	ldr	r1, [pc, #68]	@ (8002e78 <_GLOBAL__sub_I__Z8date_mapB5cxx11+0x88>)
 8002e32:	3090      	adds	r0, #144	@ 0x90
 8002e34:	f7ff fce8 	bl	8002808 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_.isra.0>
 8002e38:	0020      	movs	r0, r4
 8002e3a:	4910      	ldr	r1, [pc, #64]	@ (8002e7c <_GLOBAL__sub_I__Z8date_mapB5cxx11+0x8c>)
 8002e3c:	30a8      	adds	r0, #168	@ 0xa8
 8002e3e:	f7ff fce3 	bl	8002808 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_.isra.0>

    void WriteCommand(uint8_t byte);
    void WriteData(uint8_t* buffer, size_t buff_size);
public:
    ssd1306(uint16_t Addr = SSD1306_DEFAULT_I2C_ADDR) {
    	PanelAddr = Addr;
 8002e42:	2280      	movs	r2, #128	@ 0x80
 8002e44:	2178      	movs	r1, #120	@ 0x78
 8002e46:	4b0e      	ldr	r3, [pc, #56]	@ (8002e80 <_GLOBAL__sub_I__Z8date_mapB5cxx11+0x90>)
 8002e48:	00d2      	lsls	r2, r2, #3
 8002e4a:	5099      	str	r1, [r3, r2]
    	CurrentX = 0;
    	CurrentY = 0;
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	4a0d      	ldr	r2, [pc, #52]	@ (8002e84 <_GLOBAL__sub_I__Z8date_mapB5cxx11+0x94>)
 8002e50:	5299      	strh	r1, [r3, r2]
    	IsDisplayOn = 1;
 8002e52:	4a0d      	ldr	r2, [pc, #52]	@ (8002e88 <_GLOBAL__sub_I__Z8date_mapB5cxx11+0x98>)
 8002e54:	3101      	adds	r1, #1
 8002e56:	5499      	strb	r1, [r3, r2]
}
 8002e58:	bd10      	pop	{r4, pc}
 8002e5a:	46c0      	nop			@ (mov r8, r8)
 8002e5c:	2000058c 	.word	0x2000058c
 8002e60:	08005008 	.word	0x08005008
 8002e64:	080050c8 	.word	0x080050c8
 8002e68:	080050cc 	.word	0x080050cc
 8002e6c:	080050d0 	.word	0x080050d0
 8002e70:	080050d4 	.word	0x080050d4
 8002e74:	080050d8 	.word	0x080050d8
 8002e78:	080050dc 	.word	0x080050dc
 8002e7c:	080050e0 	.word	0x080050e0
 8002e80:	20000184 	.word	0x20000184
 8002e84:	00000404 	.word	0x00000404
 8002e88:	00000406 	.word	0x00000406

08002e8c <_GLOBAL__sub_D__Z8date_mapB5cxx11>:
 8002e8c:	b570      	push	{r4, r5, r6, lr}
std::string date_map[8] {"", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"};
 8002e8e:	4c08      	ldr	r4, [pc, #32]	@ (8002eb0 <_GLOBAL__sub_D__Z8date_mapB5cxx11+0x24>)
 8002e90:	0025      	movs	r5, r4
 8002e92:	3dc0      	subs	r5, #192	@ 0xc0
 8002e94:	3c18      	subs	r4, #24
	if (_M_data() == _M_local_data())
 8002e96:	0023      	movs	r3, r4
      { return _M_dataplus._M_p; }
 8002e98:	6820      	ldr	r0, [r4, #0]
	if (_M_data() == _M_local_data())
 8002e9a:	3308      	adds	r3, #8
 8002e9c:	4298      	cmp	r0, r3
 8002e9e:	d003      	beq.n	8002ea8 <_GLOBAL__sub_D__Z8date_mapB5cxx11+0x1c>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 8002ea0:	68a1      	ldr	r1, [r4, #8]
 8002ea2:	3101      	adds	r1, #1
	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
				     std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8002ea4:	f000 f8d8 	bl	8003058 <_ZdlPvj>
 8002ea8:	42ac      	cmp	r4, r5
 8002eaa:	d1f3      	bne.n	8002e94 <_GLOBAL__sub_D__Z8date_mapB5cxx11+0x8>
}
 8002eac:	bd70      	pop	{r4, r5, r6, pc}
 8002eae:	46c0      	nop			@ (mov r8, r8)
 8002eb0:	2000064c 	.word	0x2000064c

08002eb4 <_ZN6keypad15get_current_keyEv>:
#include "key.h"


key keypad::get_current_key(void)
{
	HAL_GPIO_WritePin(KEY_PAD_0_GPIO_Port, KEY_PAD_0_Pin, GPIO_PIN_RESET);
 8002eb4:	20a0      	movs	r0, #160	@ 0xa0
{
 8002eb6:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(KEY_PAD_0_GPIO_Port, KEY_PAD_0_Pin, GPIO_PIN_RESET);
 8002eb8:	2200      	movs	r2, #0
 8002eba:	2101      	movs	r1, #1
 8002ebc:	05c0      	lsls	r0, r0, #23
 8002ebe:	f7fd fda7 	bl	8000a10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(KEY_PAD_1_GPIO_Port, KEY_PAD_1_Pin, GPIO_PIN_SET);
 8002ec2:	20a0      	movs	r0, #160	@ 0xa0
 8002ec4:	2102      	movs	r1, #2
 8002ec6:	05c0      	lsls	r0, r0, #23
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f7fd fda1 	bl	8000a10 <HAL_GPIO_WritePin>
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(KEY_PAD_2_GPIO_Port, KEY_PAD_2_Pin))
 8002ece:	20a0      	movs	r0, #160	@ 0xa0
 8002ed0:	2104      	movs	r1, #4
 8002ed2:	05c0      	lsls	r0, r0, #23
 8002ed4:	f7fd fd96 	bl	8000a04 <HAL_GPIO_ReadPin>
 8002ed8:	2800      	cmp	r0, #0
 8002eda:	d025      	beq.n	8002f28 <_ZN6keypad15get_current_keyEv+0x74>
	{
		return key::KEY_UP;
	}
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(KEY_PAD_3_GPIO_Port, KEY_PAD_3_Pin))
 8002edc:	20a0      	movs	r0, #160	@ 0xa0
 8002ede:	2108      	movs	r1, #8
 8002ee0:	05c0      	lsls	r0, r0, #23
 8002ee2:	f7fd fd8f 	bl	8000a04 <HAL_GPIO_ReadPin>
 8002ee6:	0003      	movs	r3, r0
	{
		return key::KEY_BACK;
 8002ee8:	2001      	movs	r0, #1
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(KEY_PAD_3_GPIO_Port, KEY_PAD_3_Pin))
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d100      	bne.n	8002ef0 <_ZN6keypad15get_current_keyEv+0x3c>
	{
		return key::KEY_OK;
	}

	return key::KEY_NONE;
}
 8002eee:	bd10      	pop	{r4, pc}
	HAL_GPIO_WritePin(KEY_PAD_0_GPIO_Port, KEY_PAD_0_Pin, GPIO_PIN_SET);
 8002ef0:	20a0      	movs	r0, #160	@ 0xa0
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	2101      	movs	r1, #1
 8002ef6:	05c0      	lsls	r0, r0, #23
 8002ef8:	f7fd fd8a 	bl	8000a10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(KEY_PAD_1_GPIO_Port, KEY_PAD_1_Pin, GPIO_PIN_RESET);
 8002efc:	20a0      	movs	r0, #160	@ 0xa0
 8002efe:	2102      	movs	r1, #2
 8002f00:	05c0      	lsls	r0, r0, #23
 8002f02:	2200      	movs	r2, #0
 8002f04:	f7fd fd84 	bl	8000a10 <HAL_GPIO_WritePin>
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(KEY_PAD_2_GPIO_Port, KEY_PAD_2_Pin))
 8002f08:	20a0      	movs	r0, #160	@ 0xa0
 8002f0a:	2104      	movs	r1, #4
 8002f0c:	05c0      	lsls	r0, r0, #23
 8002f0e:	f7fd fd79 	bl	8000a04 <HAL_GPIO_ReadPin>
 8002f12:	2800      	cmp	r0, #0
 8002f14:	d00a      	beq.n	8002f2c <_ZN6keypad15get_current_keyEv+0x78>
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(KEY_PAD_3_GPIO_Port, KEY_PAD_3_Pin))
 8002f16:	20a0      	movs	r0, #160	@ 0xa0
 8002f18:	2108      	movs	r1, #8
 8002f1a:	05c0      	lsls	r0, r0, #23
 8002f1c:	f7fd fd72 	bl	8000a04 <HAL_GPIO_ReadPin>
 8002f20:	4243      	negs	r3, r0
 8002f22:	4158      	adcs	r0, r3
 8002f24:	0040      	lsls	r0, r0, #1
 8002f26:	e7e2      	b.n	8002eee <_ZN6keypad15get_current_keyEv+0x3a>
		return key::KEY_UP;
 8002f28:	2003      	movs	r0, #3
 8002f2a:	e7e0      	b.n	8002eee <_ZN6keypad15get_current_keyEv+0x3a>
		return key::KEY_DOWN;
 8002f2c:	2004      	movs	r0, #4
 8002f2e:	e7de      	b.n	8002eee <_ZN6keypad15get_current_keyEv+0x3a>

08002f30 <_ZN6keypad15get_key_pressedEv>:

key keypad::get_key_pressed(void)
{
 8002f30:	b510      	push	{r4, lr}
 8002f32:	0004      	movs	r4, r0
	key pressed_key = get_current_key();
 8002f34:	f7ff ffbe 	bl	8002eb4 <_ZN6keypad15get_current_keyEv>

	if (pressed_key == last_key_pressed)
 8002f38:	6823      	ldr	r3, [r4, #0]
 8002f3a:	4283      	cmp	r3, r0
 8002f3c:	d001      	beq.n	8002f42 <_ZN6keypad15get_key_pressedEv+0x12>
	{
		pressed_key = key::KEY_NONE;
	}
	else
	{
		last_key_pressed = pressed_key;
 8002f3e:	6020      	str	r0, [r4, #0]
	}

	return pressed_key;
}
 8002f40:	bd10      	pop	{r4, pc}
		pressed_key = key::KEY_NONE;
 8002f42:	2000      	movs	r0, #0
	return pressed_key;
 8002f44:	e7fc      	b.n	8002f40 <_ZN6keypad15get_key_pressedEv+0x10>
 8002f46:	46c0      	nop			@ (mov r8, r8)

08002f48 <_ZN6sensor15get_sensor_dataEv>:



void sensor::get_sensor_data(void)
{
	uint8_t i2cbuffer[7] = {0,};
 8002f48:	2300      	movs	r3, #0
{
 8002f4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f4c:	b087      	sub	sp, #28
 8002f4e:	0005      	movs	r5, r0
	uint8_t i2cbuffer[7] = {0,};
 8002f50:	2203      	movs	r2, #3
 8002f52:	2100      	movs	r1, #0
 8002f54:	a805      	add	r0, sp, #20
 8002f56:	9304      	str	r3, [sp, #16]
 8002f58:	f000 f990 	bl	800327c <memset>
    uint8_t cmd[3] = {0xAC, 0x33, 0x00};
 8002f5c:	4669      	mov	r1, sp

    HAL_I2C_Master_Transmit(&hi2c2, 0x70, cmd, 3, HAL_MAX_DELAY);
 8002f5e:	2701      	movs	r7, #1
    uint8_t cmd[3] = {0xAC, 0x33, 0x00};
 8002f60:	4b1a      	ldr	r3, [pc, #104]	@ (8002fcc <_ZN6sensor15get_sensor_dataEv+0x84>)
    HAL_I2C_Master_Transmit(&hi2c2, 0x70, cmd, 3, HAL_MAX_DELAY);
 8002f62:	4e1b      	ldr	r6, [pc, #108]	@ (8002fd0 <_ZN6sensor15get_sensor_dataEv+0x88>)
    uint8_t cmd[3] = {0xAC, 0x33, 0x00};
 8002f64:	881a      	ldrh	r2, [r3, #0]
    HAL_I2C_Master_Transmit(&hi2c2, 0x70, cmd, 3, HAL_MAX_DELAY);
 8002f66:	427f      	negs	r7, r7
    uint8_t cmd[3] = {0xAC, 0x33, 0x00};
 8002f68:	818a      	strh	r2, [r1, #12]
 8002f6a:	789b      	ldrb	r3, [r3, #2]
    HAL_I2C_Master_Transmit(&hi2c2, 0x70, cmd, 3, HAL_MAX_DELAY);
 8002f6c:	aa03      	add	r2, sp, #12
    uint8_t cmd[3] = {0xAC, 0x33, 0x00};
 8002f6e:	738b      	strb	r3, [r1, #14]
    HAL_I2C_Master_Transmit(&hi2c2, 0x70, cmd, 3, HAL_MAX_DELAY);
 8002f70:	0030      	movs	r0, r6
 8002f72:	2303      	movs	r3, #3
 8002f74:	2170      	movs	r1, #112	@ 0x70
 8002f76:	9700      	str	r7, [sp, #0]
	uint8_t i2cbuffer[7] = {0,};
 8002f78:	ac04      	add	r4, sp, #16
    HAL_I2C_Master_Transmit(&hi2c2, 0x70, cmd, 3, HAL_MAX_DELAY);
 8002f7a:	f7fd ff49 	bl	8000e10 <HAL_I2C_Master_Transmit>
    HAL_Delay(90);
 8002f7e:	205a      	movs	r0, #90	@ 0x5a
 8002f80:	f7fd fbec 	bl	800075c <HAL_Delay>
    HAL_I2C_Master_Receive(&hi2c2, 0x70, i2cbuffer, 7, HAL_MAX_DELAY);
 8002f84:	0022      	movs	r2, r4
 8002f86:	2307      	movs	r3, #7
 8002f88:	2170      	movs	r1, #112	@ 0x70
 8002f8a:	0030      	movs	r0, r6
 8002f8c:	9700      	str	r7, [sp, #0]
 8002f8e:	f7fe f81b 	bl	8000fc8 <HAL_I2C_Master_Receive>
    uint32_t humid = (i2cbuffer[1] << 12) + (i2cbuffer[2] << 4) + ((i2cbuffer[3]&0xF0) >> 4);
 8002f92:	7862      	ldrb	r2, [r4, #1]
 8002f94:	78a1      	ldrb	r1, [r4, #2]
 8002f96:	78e3      	ldrb	r3, [r4, #3]
 8002f98:	0109      	lsls	r1, r1, #4
 8002f9a:	0312      	lsls	r2, r2, #12
 8002f9c:	1852      	adds	r2, r2, r1
 8002f9e:	0919      	lsrs	r1, r3, #4
 8002fa0:	1852      	adds	r2, r2, r1
    humid = (humid*100/1048576);
 8002fa2:	2164      	movs	r1, #100	@ 0x64
 8002fa4:	4351      	muls	r1, r2
    uint32_t temp = ((i2cbuffer[3] & 0x0F) << 16) + (i2cbuffer[4] << 8) + i2cbuffer[5];
 8002fa6:	22f0      	movs	r2, #240	@ 0xf0
 8002fa8:	041b      	lsls	r3, r3, #16
 8002faa:	0312      	lsls	r2, r2, #12
 8002fac:	4013      	ands	r3, r2
 8002fae:	7922      	ldrb	r2, [r4, #4]
    humid = (humid*100/1048576);
 8002fb0:	0d09      	lsrs	r1, r1, #20
    uint32_t temp = ((i2cbuffer[3] & 0x0F) << 16) + (i2cbuffer[4] << 8) + i2cbuffer[5];
 8002fb2:	0212      	lsls	r2, r2, #8
 8002fb4:	189b      	adds	r3, r3, r2
 8002fb6:	7962      	ldrb	r2, [r4, #5]
    temp = (temp*200/1048576) - 50;

    sensor::humid = (uint8_t)humid;
 8002fb8:	7069      	strb	r1, [r5, #1]
    uint32_t temp = ((i2cbuffer[3] & 0x0F) << 16) + (i2cbuffer[4] << 8) + i2cbuffer[5];
 8002fba:	189b      	adds	r3, r3, r2
    temp = (temp*200/1048576) - 50;
 8002fbc:	22c8      	movs	r2, #200	@ 0xc8
 8002fbe:	4353      	muls	r3, r2
 8002fc0:	0d1b      	lsrs	r3, r3, #20
 8002fc2:	3b32      	subs	r3, #50	@ 0x32
    sensor::temp = (uint8_t)temp;
 8002fc4:	702b      	strb	r3, [r5, #0]


}
 8002fc6:	b007      	add	sp, #28
 8002fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fca:	46c0      	nop			@ (mov r8, r8)
 8002fcc:	080050e4 	.word	0x080050e4
 8002fd0:	200000b4 	.word	0x200000b4

08002fd4 <_ZN4time8get_timeEv>:
#include "time.h"



void time::get_time(void)
{
 8002fd4:	b530      	push	{r4, r5, lr}
 8002fd6:	b087      	sub	sp, #28
 8002fd8:	0004      	movs	r4, r0
	RTC_TimeTypeDef stimestructureget = {0,};
 8002fda:	2214      	movs	r2, #20
 8002fdc:	2100      	movs	r1, #0
 8002fde:	a801      	add	r0, sp, #4
 8002fe0:	f000 f94c 	bl	800327c <memset>
	RTC_DateTypeDef sdatestructureget = {0,};
 8002fe4:	2300      	movs	r3, #0

	HAL_RTC_GetTime(&hrtc, &stimestructureget, RTC_FORMAT_BIN);
 8002fe6:	4d0d      	ldr	r5, [pc, #52]	@ (800301c <_ZN4time8get_timeEv+0x48>)
 8002fe8:	a901      	add	r1, sp, #4
 8002fea:	2200      	movs	r2, #0
 8002fec:	0028      	movs	r0, r5
	RTC_DateTypeDef sdatestructureget = {0,};
 8002fee:	9300      	str	r3, [sp, #0]
	HAL_RTC_GetTime(&hrtc, &stimestructureget, RTC_FORMAT_BIN);
 8002ff0:	f7fe fe7a 	bl	8001ce8 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sdatestructureget, RTC_FORMAT_BIN);
 8002ff4:	4669      	mov	r1, sp
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	0028      	movs	r0, r5
 8002ffa:	f7fe feb1 	bl	8001d60 <HAL_RTC_GetDate>

	time::WeekDay = sdatestructureget.WeekDay;
 8002ffe:	9b00      	ldr	r3, [sp, #0]
	time::Year = sdatestructureget.Year;
	time::Hours = stimestructureget.Hours;
	time::Minutes = stimestructureget.Minutes;
	time::Seconds = stimestructureget.Seconds;
	time::TimeFormat = stimestructureget.TimeFormat;
	time::SubSeconds = stimestructureget.SubSeconds;
 8003000:	9903      	ldr	r1, [sp, #12]
	time::WeekDay = sdatestructureget.WeekDay;
 8003002:	6023      	str	r3, [r4, #0]
	time::Hours = stimestructureget.Hours;
 8003004:	9b01      	ldr	r3, [sp, #4]
	time::SubSeconds = stimestructureget.SubSeconds;
 8003006:	9a04      	ldr	r2, [sp, #16]
 8003008:	9802      	ldr	r0, [sp, #8]
	time::Hours = stimestructureget.Hours;
 800300a:	6063      	str	r3, [r4, #4]
	time::SubSeconds = stimestructureget.SubSeconds;
 800300c:	9b05      	ldr	r3, [sp, #20]
 800300e:	60a0      	str	r0, [r4, #8]
 8003010:	60e1      	str	r1, [r4, #12]
 8003012:	6122      	str	r2, [r4, #16]
 8003014:	6163      	str	r3, [r4, #20]
	time::SecondFraction = stimestructureget.SecondFraction;
	time::DayLightSaving = stimestructureget.DayLightSaving;
	time::StoreOperation = stimestructureget.StoreOperation;
}
 8003016:	b007      	add	sp, #28
 8003018:	bd30      	pop	{r4, r5, pc}
 800301a:	46c0      	nop			@ (mov r8, r8)
 800301c:	20000088 	.word	0x20000088

08003020 <_ZN4time8set_timeEv>:

void time::set_time(void)
{
 8003020:	b510      	push	{r4, lr}
	RTC_TimeTypeDef stimestructureget = {0,};
	RTC_DateTypeDef sdatestructureget = {0,};

	sdatestructureget.WeekDay = time::WeekDay;
 8003022:	6803      	ldr	r3, [r0, #0]
{
 8003024:	b086      	sub	sp, #24
	stimestructureget.SubSeconds = time::SubSeconds;
	stimestructureget.SecondFraction = time::SecondFraction;
	stimestructureget.DayLightSaving = time::DayLightSaving;
	stimestructureget.StoreOperation = time::StoreOperation;

	HAL_RTC_SetTime(&hrtc, &stimestructureget, RTC_FORMAT_BIN);
 8003026:	4c0b      	ldr	r4, [pc, #44]	@ (8003054 <_ZN4time8set_timeEv+0x34>)
	sdatestructureget.WeekDay = time::WeekDay;
 8003028:	9300      	str	r3, [sp, #0]
	stimestructureget.Hours = time::Hours;
 800302a:	6843      	ldr	r3, [r0, #4]
	stimestructureget.SubSeconds = time::SubSeconds;
 800302c:	3008      	adds	r0, #8
	stimestructureget.Hours = time::Hours;
 800302e:	9301      	str	r3, [sp, #4]
	stimestructureget.SubSeconds = time::SubSeconds;
 8003030:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 8003032:	9002      	str	r0, [sp, #8]
 8003034:	9103      	str	r1, [sp, #12]
 8003036:	9204      	str	r2, [sp, #16]
	HAL_RTC_SetTime(&hrtc, &stimestructureget, RTC_FORMAT_BIN);
 8003038:	a901      	add	r1, sp, #4
 800303a:	2200      	movs	r2, #0
 800303c:	0020      	movs	r0, r4
	stimestructureget.SubSeconds = time::SubSeconds;
 800303e:	9305      	str	r3, [sp, #20]
	HAL_RTC_SetTime(&hrtc, &stimestructureget, RTC_FORMAT_BIN);
 8003040:	f7fe ff8e 	bl	8001f60 <HAL_RTC_SetTime>
	HAL_RTC_SetDate(&hrtc, &sdatestructureget, RTC_FORMAT_BIN);
 8003044:	2200      	movs	r2, #0
 8003046:	4669      	mov	r1, sp
 8003048:	0020      	movs	r0, r4
 800304a:	f7ff f809 	bl	8002060 <HAL_RTC_SetDate>
}
 800304e:	b006      	add	sp, #24
 8003050:	bd10      	pop	{r4, pc}
 8003052:	46c0      	nop			@ (mov r8, r8)
 8003054:	20000088 	.word	0x20000088

08003058 <_ZdlPvj>:
 8003058:	b510      	push	{r4, lr}
 800305a:	f000 f816 	bl	800308a <_ZdlPv>
 800305e:	bd10      	pop	{r4, pc}

08003060 <_Znwj>:
 8003060:	b510      	push	{r4, lr}
 8003062:	1e04      	subs	r4, r0, #0
 8003064:	d100      	bne.n	8003068 <_Znwj+0x8>
 8003066:	3401      	adds	r4, #1
 8003068:	0020      	movs	r0, r4
 800306a:	f000 f821 	bl	80030b0 <malloc>
 800306e:	2800      	cmp	r0, #0
 8003070:	d000      	beq.n	8003074 <_Znwj+0x14>
 8003072:	bd10      	pop	{r4, pc}
 8003074:	f000 f80e 	bl	8003094 <_ZSt15get_new_handlerv>
 8003078:	2800      	cmp	r0, #0
 800307a:	d101      	bne.n	8003080 <_Znwj+0x20>
 800307c:	f000 f810 	bl	80030a0 <abort>
 8003080:	4780      	blx	r0
 8003082:	e7f1      	b.n	8003068 <_Znwj+0x8>

08003084 <_ZSt19__throw_logic_errorPKc>:
 8003084:	b510      	push	{r4, lr}
 8003086:	f000 f80b 	bl	80030a0 <abort>

0800308a <_ZdlPv>:
 800308a:	b510      	push	{r4, lr}
 800308c:	f000 f81a 	bl	80030c4 <free>
 8003090:	bd10      	pop	{r4, pc}
	...

08003094 <_ZSt15get_new_handlerv>:
 8003094:	4b01      	ldr	r3, [pc, #4]	@ (800309c <_ZSt15get_new_handlerv+0x8>)
 8003096:	6818      	ldr	r0, [r3, #0]
 8003098:	4770      	bx	lr
 800309a:	46c0      	nop			@ (mov r8, r8)
 800309c:	2000064c 	.word	0x2000064c

080030a0 <abort>:
 80030a0:	2006      	movs	r0, #6
 80030a2:	b510      	push	{r4, lr}
 80030a4:	f000 f91c 	bl	80032e0 <raise>
 80030a8:	2001      	movs	r0, #1
 80030aa:	f7fd fab7 	bl	800061c <_exit>
	...

080030b0 <malloc>:
 80030b0:	b510      	push	{r4, lr}
 80030b2:	4b03      	ldr	r3, [pc, #12]	@ (80030c0 <malloc+0x10>)
 80030b4:	0001      	movs	r1, r0
 80030b6:	6818      	ldr	r0, [r3, #0]
 80030b8:	f000 f830 	bl	800311c <_malloc_r>
 80030bc:	bd10      	pop	{r4, pc}
 80030be:	46c0      	nop			@ (mov r8, r8)
 80030c0:	2000001c 	.word	0x2000001c

080030c4 <free>:
 80030c4:	b510      	push	{r4, lr}
 80030c6:	4b03      	ldr	r3, [pc, #12]	@ (80030d4 <free+0x10>)
 80030c8:	0001      	movs	r1, r0
 80030ca:	6818      	ldr	r0, [r3, #0]
 80030cc:	f000 f970 	bl	80033b0 <_free_r>
 80030d0:	bd10      	pop	{r4, pc}
 80030d2:	46c0      	nop			@ (mov r8, r8)
 80030d4:	2000001c 	.word	0x2000001c

080030d8 <sbrk_aligned>:
 80030d8:	b570      	push	{r4, r5, r6, lr}
 80030da:	4e0f      	ldr	r6, [pc, #60]	@ (8003118 <sbrk_aligned+0x40>)
 80030dc:	000d      	movs	r5, r1
 80030de:	6831      	ldr	r1, [r6, #0]
 80030e0:	0004      	movs	r4, r0
 80030e2:	2900      	cmp	r1, #0
 80030e4:	d102      	bne.n	80030ec <sbrk_aligned+0x14>
 80030e6:	f000 f91b 	bl	8003320 <_sbrk_r>
 80030ea:	6030      	str	r0, [r6, #0]
 80030ec:	0029      	movs	r1, r5
 80030ee:	0020      	movs	r0, r4
 80030f0:	f000 f916 	bl	8003320 <_sbrk_r>
 80030f4:	1c43      	adds	r3, r0, #1
 80030f6:	d103      	bne.n	8003100 <sbrk_aligned+0x28>
 80030f8:	2501      	movs	r5, #1
 80030fa:	426d      	negs	r5, r5
 80030fc:	0028      	movs	r0, r5
 80030fe:	bd70      	pop	{r4, r5, r6, pc}
 8003100:	2303      	movs	r3, #3
 8003102:	1cc5      	adds	r5, r0, #3
 8003104:	439d      	bics	r5, r3
 8003106:	42a8      	cmp	r0, r5
 8003108:	d0f8      	beq.n	80030fc <sbrk_aligned+0x24>
 800310a:	1a29      	subs	r1, r5, r0
 800310c:	0020      	movs	r0, r4
 800310e:	f000 f907 	bl	8003320 <_sbrk_r>
 8003112:	3001      	adds	r0, #1
 8003114:	d1f2      	bne.n	80030fc <sbrk_aligned+0x24>
 8003116:	e7ef      	b.n	80030f8 <sbrk_aligned+0x20>
 8003118:	20000650 	.word	0x20000650

0800311c <_malloc_r>:
 800311c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800311e:	2203      	movs	r2, #3
 8003120:	1ccb      	adds	r3, r1, #3
 8003122:	4393      	bics	r3, r2
 8003124:	3308      	adds	r3, #8
 8003126:	0005      	movs	r5, r0
 8003128:	001f      	movs	r7, r3
 800312a:	2b0c      	cmp	r3, #12
 800312c:	d234      	bcs.n	8003198 <_malloc_r+0x7c>
 800312e:	270c      	movs	r7, #12
 8003130:	42b9      	cmp	r1, r7
 8003132:	d833      	bhi.n	800319c <_malloc_r+0x80>
 8003134:	0028      	movs	r0, r5
 8003136:	f000 f871 	bl	800321c <__malloc_lock>
 800313a:	4e37      	ldr	r6, [pc, #220]	@ (8003218 <_malloc_r+0xfc>)
 800313c:	6833      	ldr	r3, [r6, #0]
 800313e:	001c      	movs	r4, r3
 8003140:	2c00      	cmp	r4, #0
 8003142:	d12f      	bne.n	80031a4 <_malloc_r+0x88>
 8003144:	0039      	movs	r1, r7
 8003146:	0028      	movs	r0, r5
 8003148:	f7ff ffc6 	bl	80030d8 <sbrk_aligned>
 800314c:	0004      	movs	r4, r0
 800314e:	1c43      	adds	r3, r0, #1
 8003150:	d15f      	bne.n	8003212 <_malloc_r+0xf6>
 8003152:	6834      	ldr	r4, [r6, #0]
 8003154:	9400      	str	r4, [sp, #0]
 8003156:	9b00      	ldr	r3, [sp, #0]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d14a      	bne.n	80031f2 <_malloc_r+0xd6>
 800315c:	2c00      	cmp	r4, #0
 800315e:	d052      	beq.n	8003206 <_malloc_r+0xea>
 8003160:	6823      	ldr	r3, [r4, #0]
 8003162:	0028      	movs	r0, r5
 8003164:	18e3      	adds	r3, r4, r3
 8003166:	9900      	ldr	r1, [sp, #0]
 8003168:	9301      	str	r3, [sp, #4]
 800316a:	f000 f8d9 	bl	8003320 <_sbrk_r>
 800316e:	9b01      	ldr	r3, [sp, #4]
 8003170:	4283      	cmp	r3, r0
 8003172:	d148      	bne.n	8003206 <_malloc_r+0xea>
 8003174:	6823      	ldr	r3, [r4, #0]
 8003176:	0028      	movs	r0, r5
 8003178:	1aff      	subs	r7, r7, r3
 800317a:	0039      	movs	r1, r7
 800317c:	f7ff ffac 	bl	80030d8 <sbrk_aligned>
 8003180:	3001      	adds	r0, #1
 8003182:	d040      	beq.n	8003206 <_malloc_r+0xea>
 8003184:	6823      	ldr	r3, [r4, #0]
 8003186:	19db      	adds	r3, r3, r7
 8003188:	6023      	str	r3, [r4, #0]
 800318a:	6833      	ldr	r3, [r6, #0]
 800318c:	685a      	ldr	r2, [r3, #4]
 800318e:	2a00      	cmp	r2, #0
 8003190:	d133      	bne.n	80031fa <_malloc_r+0xde>
 8003192:	9b00      	ldr	r3, [sp, #0]
 8003194:	6033      	str	r3, [r6, #0]
 8003196:	e019      	b.n	80031cc <_malloc_r+0xb0>
 8003198:	2b00      	cmp	r3, #0
 800319a:	dac9      	bge.n	8003130 <_malloc_r+0x14>
 800319c:	230c      	movs	r3, #12
 800319e:	602b      	str	r3, [r5, #0]
 80031a0:	2000      	movs	r0, #0
 80031a2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80031a4:	6821      	ldr	r1, [r4, #0]
 80031a6:	1bc9      	subs	r1, r1, r7
 80031a8:	d420      	bmi.n	80031ec <_malloc_r+0xd0>
 80031aa:	290b      	cmp	r1, #11
 80031ac:	d90a      	bls.n	80031c4 <_malloc_r+0xa8>
 80031ae:	19e2      	adds	r2, r4, r7
 80031b0:	6027      	str	r7, [r4, #0]
 80031b2:	42a3      	cmp	r3, r4
 80031b4:	d104      	bne.n	80031c0 <_malloc_r+0xa4>
 80031b6:	6032      	str	r2, [r6, #0]
 80031b8:	6863      	ldr	r3, [r4, #4]
 80031ba:	6011      	str	r1, [r2, #0]
 80031bc:	6053      	str	r3, [r2, #4]
 80031be:	e005      	b.n	80031cc <_malloc_r+0xb0>
 80031c0:	605a      	str	r2, [r3, #4]
 80031c2:	e7f9      	b.n	80031b8 <_malloc_r+0x9c>
 80031c4:	6862      	ldr	r2, [r4, #4]
 80031c6:	42a3      	cmp	r3, r4
 80031c8:	d10e      	bne.n	80031e8 <_malloc_r+0xcc>
 80031ca:	6032      	str	r2, [r6, #0]
 80031cc:	0028      	movs	r0, r5
 80031ce:	f000 f82d 	bl	800322c <__malloc_unlock>
 80031d2:	0020      	movs	r0, r4
 80031d4:	2207      	movs	r2, #7
 80031d6:	300b      	adds	r0, #11
 80031d8:	1d23      	adds	r3, r4, #4
 80031da:	4390      	bics	r0, r2
 80031dc:	1ac2      	subs	r2, r0, r3
 80031de:	4298      	cmp	r0, r3
 80031e0:	d0df      	beq.n	80031a2 <_malloc_r+0x86>
 80031e2:	1a1b      	subs	r3, r3, r0
 80031e4:	50a3      	str	r3, [r4, r2]
 80031e6:	e7dc      	b.n	80031a2 <_malloc_r+0x86>
 80031e8:	605a      	str	r2, [r3, #4]
 80031ea:	e7ef      	b.n	80031cc <_malloc_r+0xb0>
 80031ec:	0023      	movs	r3, r4
 80031ee:	6864      	ldr	r4, [r4, #4]
 80031f0:	e7a6      	b.n	8003140 <_malloc_r+0x24>
 80031f2:	9c00      	ldr	r4, [sp, #0]
 80031f4:	6863      	ldr	r3, [r4, #4]
 80031f6:	9300      	str	r3, [sp, #0]
 80031f8:	e7ad      	b.n	8003156 <_malloc_r+0x3a>
 80031fa:	001a      	movs	r2, r3
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	42a3      	cmp	r3, r4
 8003200:	d1fb      	bne.n	80031fa <_malloc_r+0xde>
 8003202:	2300      	movs	r3, #0
 8003204:	e7da      	b.n	80031bc <_malloc_r+0xa0>
 8003206:	230c      	movs	r3, #12
 8003208:	0028      	movs	r0, r5
 800320a:	602b      	str	r3, [r5, #0]
 800320c:	f000 f80e 	bl	800322c <__malloc_unlock>
 8003210:	e7c6      	b.n	80031a0 <_malloc_r+0x84>
 8003212:	6007      	str	r7, [r0, #0]
 8003214:	e7da      	b.n	80031cc <_malloc_r+0xb0>
 8003216:	46c0      	nop			@ (mov r8, r8)
 8003218:	20000654 	.word	0x20000654

0800321c <__malloc_lock>:
 800321c:	b510      	push	{r4, lr}
 800321e:	4802      	ldr	r0, [pc, #8]	@ (8003228 <__malloc_lock+0xc>)
 8003220:	f000 f8ba 	bl	8003398 <__retarget_lock_acquire_recursive>
 8003224:	bd10      	pop	{r4, pc}
 8003226:	46c0      	nop			@ (mov r8, r8)
 8003228:	20000794 	.word	0x20000794

0800322c <__malloc_unlock>:
 800322c:	b510      	push	{r4, lr}
 800322e:	4802      	ldr	r0, [pc, #8]	@ (8003238 <__malloc_unlock+0xc>)
 8003230:	f000 f8b3 	bl	800339a <__retarget_lock_release_recursive>
 8003234:	bd10      	pop	{r4, pc}
 8003236:	46c0      	nop			@ (mov r8, r8)
 8003238:	20000794 	.word	0x20000794

0800323c <siprintf>:
 800323c:	b40e      	push	{r1, r2, r3}
 800323e:	b500      	push	{lr}
 8003240:	490b      	ldr	r1, [pc, #44]	@ (8003270 <siprintf+0x34>)
 8003242:	b09c      	sub	sp, #112	@ 0x70
 8003244:	ab1d      	add	r3, sp, #116	@ 0x74
 8003246:	9002      	str	r0, [sp, #8]
 8003248:	9006      	str	r0, [sp, #24]
 800324a:	9107      	str	r1, [sp, #28]
 800324c:	9104      	str	r1, [sp, #16]
 800324e:	4809      	ldr	r0, [pc, #36]	@ (8003274 <siprintf+0x38>)
 8003250:	4909      	ldr	r1, [pc, #36]	@ (8003278 <siprintf+0x3c>)
 8003252:	cb04      	ldmia	r3!, {r2}
 8003254:	9105      	str	r1, [sp, #20]
 8003256:	6800      	ldr	r0, [r0, #0]
 8003258:	a902      	add	r1, sp, #8
 800325a:	9301      	str	r3, [sp, #4]
 800325c:	f000 f952 	bl	8003504 <_svfiprintf_r>
 8003260:	2200      	movs	r2, #0
 8003262:	9b02      	ldr	r3, [sp, #8]
 8003264:	701a      	strb	r2, [r3, #0]
 8003266:	b01c      	add	sp, #112	@ 0x70
 8003268:	bc08      	pop	{r3}
 800326a:	b003      	add	sp, #12
 800326c:	4718      	bx	r3
 800326e:	46c0      	nop			@ (mov r8, r8)
 8003270:	7fffffff 	.word	0x7fffffff
 8003274:	2000001c 	.word	0x2000001c
 8003278:	ffff0208 	.word	0xffff0208

0800327c <memset>:
 800327c:	0003      	movs	r3, r0
 800327e:	1882      	adds	r2, r0, r2
 8003280:	4293      	cmp	r3, r2
 8003282:	d100      	bne.n	8003286 <memset+0xa>
 8003284:	4770      	bx	lr
 8003286:	7019      	strb	r1, [r3, #0]
 8003288:	3301      	adds	r3, #1
 800328a:	e7f9      	b.n	8003280 <memset+0x4>

0800328c <_raise_r>:
 800328c:	b570      	push	{r4, r5, r6, lr}
 800328e:	0004      	movs	r4, r0
 8003290:	000d      	movs	r5, r1
 8003292:	291f      	cmp	r1, #31
 8003294:	d904      	bls.n	80032a0 <_raise_r+0x14>
 8003296:	2316      	movs	r3, #22
 8003298:	6003      	str	r3, [r0, #0]
 800329a:	2001      	movs	r0, #1
 800329c:	4240      	negs	r0, r0
 800329e:	bd70      	pop	{r4, r5, r6, pc}
 80032a0:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d004      	beq.n	80032b0 <_raise_r+0x24>
 80032a6:	008a      	lsls	r2, r1, #2
 80032a8:	189b      	adds	r3, r3, r2
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	2a00      	cmp	r2, #0
 80032ae:	d108      	bne.n	80032c2 <_raise_r+0x36>
 80032b0:	0020      	movs	r0, r4
 80032b2:	f000 f831 	bl	8003318 <_getpid_r>
 80032b6:	002a      	movs	r2, r5
 80032b8:	0001      	movs	r1, r0
 80032ba:	0020      	movs	r0, r4
 80032bc:	f000 f81a 	bl	80032f4 <_kill_r>
 80032c0:	e7ed      	b.n	800329e <_raise_r+0x12>
 80032c2:	2a01      	cmp	r2, #1
 80032c4:	d009      	beq.n	80032da <_raise_r+0x4e>
 80032c6:	1c51      	adds	r1, r2, #1
 80032c8:	d103      	bne.n	80032d2 <_raise_r+0x46>
 80032ca:	2316      	movs	r3, #22
 80032cc:	6003      	str	r3, [r0, #0]
 80032ce:	2001      	movs	r0, #1
 80032d0:	e7e5      	b.n	800329e <_raise_r+0x12>
 80032d2:	2100      	movs	r1, #0
 80032d4:	0028      	movs	r0, r5
 80032d6:	6019      	str	r1, [r3, #0]
 80032d8:	4790      	blx	r2
 80032da:	2000      	movs	r0, #0
 80032dc:	e7df      	b.n	800329e <_raise_r+0x12>
	...

080032e0 <raise>:
 80032e0:	b510      	push	{r4, lr}
 80032e2:	4b03      	ldr	r3, [pc, #12]	@ (80032f0 <raise+0x10>)
 80032e4:	0001      	movs	r1, r0
 80032e6:	6818      	ldr	r0, [r3, #0]
 80032e8:	f7ff ffd0 	bl	800328c <_raise_r>
 80032ec:	bd10      	pop	{r4, pc}
 80032ee:	46c0      	nop			@ (mov r8, r8)
 80032f0:	2000001c 	.word	0x2000001c

080032f4 <_kill_r>:
 80032f4:	2300      	movs	r3, #0
 80032f6:	b570      	push	{r4, r5, r6, lr}
 80032f8:	4d06      	ldr	r5, [pc, #24]	@ (8003314 <_kill_r+0x20>)
 80032fa:	0004      	movs	r4, r0
 80032fc:	0008      	movs	r0, r1
 80032fe:	0011      	movs	r1, r2
 8003300:	602b      	str	r3, [r5, #0]
 8003302:	f7fd f983 	bl	800060c <_kill>
 8003306:	1c43      	adds	r3, r0, #1
 8003308:	d103      	bne.n	8003312 <_kill_r+0x1e>
 800330a:	682b      	ldr	r3, [r5, #0]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d000      	beq.n	8003312 <_kill_r+0x1e>
 8003310:	6023      	str	r3, [r4, #0]
 8003312:	bd70      	pop	{r4, r5, r6, pc}
 8003314:	20000790 	.word	0x20000790

08003318 <_getpid_r>:
 8003318:	b510      	push	{r4, lr}
 800331a:	f7fd f975 	bl	8000608 <_getpid>
 800331e:	bd10      	pop	{r4, pc}

08003320 <_sbrk_r>:
 8003320:	2300      	movs	r3, #0
 8003322:	b570      	push	{r4, r5, r6, lr}
 8003324:	4d06      	ldr	r5, [pc, #24]	@ (8003340 <_sbrk_r+0x20>)
 8003326:	0004      	movs	r4, r0
 8003328:	0008      	movs	r0, r1
 800332a:	602b      	str	r3, [r5, #0]
 800332c:	f7fd f97c 	bl	8000628 <_sbrk>
 8003330:	1c43      	adds	r3, r0, #1
 8003332:	d103      	bne.n	800333c <_sbrk_r+0x1c>
 8003334:	682b      	ldr	r3, [r5, #0]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d000      	beq.n	800333c <_sbrk_r+0x1c>
 800333a:	6023      	str	r3, [r4, #0]
 800333c:	bd70      	pop	{r4, r5, r6, pc}
 800333e:	46c0      	nop			@ (mov r8, r8)
 8003340:	20000790 	.word	0x20000790

08003344 <__errno>:
 8003344:	4b01      	ldr	r3, [pc, #4]	@ (800334c <__errno+0x8>)
 8003346:	6818      	ldr	r0, [r3, #0]
 8003348:	4770      	bx	lr
 800334a:	46c0      	nop			@ (mov r8, r8)
 800334c:	2000001c 	.word	0x2000001c

08003350 <__libc_init_array>:
 8003350:	b570      	push	{r4, r5, r6, lr}
 8003352:	2600      	movs	r6, #0
 8003354:	4c0c      	ldr	r4, [pc, #48]	@ (8003388 <__libc_init_array+0x38>)
 8003356:	4d0d      	ldr	r5, [pc, #52]	@ (800338c <__libc_init_array+0x3c>)
 8003358:	1b64      	subs	r4, r4, r5
 800335a:	10a4      	asrs	r4, r4, #2
 800335c:	42a6      	cmp	r6, r4
 800335e:	d109      	bne.n	8003374 <__libc_init_array+0x24>
 8003360:	2600      	movs	r6, #0
 8003362:	f000 fba1 	bl	8003aa8 <_init>
 8003366:	4c0a      	ldr	r4, [pc, #40]	@ (8003390 <__libc_init_array+0x40>)
 8003368:	4d0a      	ldr	r5, [pc, #40]	@ (8003394 <__libc_init_array+0x44>)
 800336a:	1b64      	subs	r4, r4, r5
 800336c:	10a4      	asrs	r4, r4, #2
 800336e:	42a6      	cmp	r6, r4
 8003370:	d105      	bne.n	800337e <__libc_init_array+0x2e>
 8003372:	bd70      	pop	{r4, r5, r6, pc}
 8003374:	00b3      	lsls	r3, r6, #2
 8003376:	58eb      	ldr	r3, [r5, r3]
 8003378:	4798      	blx	r3
 800337a:	3601      	adds	r6, #1
 800337c:	e7ee      	b.n	800335c <__libc_init_array+0xc>
 800337e:	00b3      	lsls	r3, r6, #2
 8003380:	58eb      	ldr	r3, [r5, r3]
 8003382:	4798      	blx	r3
 8003384:	3601      	adds	r6, #1
 8003386:	e7f2      	b.n	800336e <__libc_init_array+0x1e>
 8003388:	0800511c 	.word	0x0800511c
 800338c:	0800511c 	.word	0x0800511c
 8003390:	08005124 	.word	0x08005124
 8003394:	0800511c 	.word	0x0800511c

08003398 <__retarget_lock_acquire_recursive>:
 8003398:	4770      	bx	lr

0800339a <__retarget_lock_release_recursive>:
 800339a:	4770      	bx	lr

0800339c <memcpy>:
 800339c:	2300      	movs	r3, #0
 800339e:	b510      	push	{r4, lr}
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d100      	bne.n	80033a6 <memcpy+0xa>
 80033a4:	bd10      	pop	{r4, pc}
 80033a6:	5ccc      	ldrb	r4, [r1, r3]
 80033a8:	54c4      	strb	r4, [r0, r3]
 80033aa:	3301      	adds	r3, #1
 80033ac:	e7f8      	b.n	80033a0 <memcpy+0x4>
	...

080033b0 <_free_r>:
 80033b0:	b570      	push	{r4, r5, r6, lr}
 80033b2:	0005      	movs	r5, r0
 80033b4:	1e0c      	subs	r4, r1, #0
 80033b6:	d010      	beq.n	80033da <_free_r+0x2a>
 80033b8:	3c04      	subs	r4, #4
 80033ba:	6823      	ldr	r3, [r4, #0]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	da00      	bge.n	80033c2 <_free_r+0x12>
 80033c0:	18e4      	adds	r4, r4, r3
 80033c2:	0028      	movs	r0, r5
 80033c4:	f7ff ff2a 	bl	800321c <__malloc_lock>
 80033c8:	4a1d      	ldr	r2, [pc, #116]	@ (8003440 <_free_r+0x90>)
 80033ca:	6813      	ldr	r3, [r2, #0]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d105      	bne.n	80033dc <_free_r+0x2c>
 80033d0:	6063      	str	r3, [r4, #4]
 80033d2:	6014      	str	r4, [r2, #0]
 80033d4:	0028      	movs	r0, r5
 80033d6:	f7ff ff29 	bl	800322c <__malloc_unlock>
 80033da:	bd70      	pop	{r4, r5, r6, pc}
 80033dc:	42a3      	cmp	r3, r4
 80033de:	d908      	bls.n	80033f2 <_free_r+0x42>
 80033e0:	6820      	ldr	r0, [r4, #0]
 80033e2:	1821      	adds	r1, r4, r0
 80033e4:	428b      	cmp	r3, r1
 80033e6:	d1f3      	bne.n	80033d0 <_free_r+0x20>
 80033e8:	6819      	ldr	r1, [r3, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	1809      	adds	r1, r1, r0
 80033ee:	6021      	str	r1, [r4, #0]
 80033f0:	e7ee      	b.n	80033d0 <_free_r+0x20>
 80033f2:	001a      	movs	r2, r3
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d001      	beq.n	80033fe <_free_r+0x4e>
 80033fa:	42a3      	cmp	r3, r4
 80033fc:	d9f9      	bls.n	80033f2 <_free_r+0x42>
 80033fe:	6811      	ldr	r1, [r2, #0]
 8003400:	1850      	adds	r0, r2, r1
 8003402:	42a0      	cmp	r0, r4
 8003404:	d10b      	bne.n	800341e <_free_r+0x6e>
 8003406:	6820      	ldr	r0, [r4, #0]
 8003408:	1809      	adds	r1, r1, r0
 800340a:	1850      	adds	r0, r2, r1
 800340c:	6011      	str	r1, [r2, #0]
 800340e:	4283      	cmp	r3, r0
 8003410:	d1e0      	bne.n	80033d4 <_free_r+0x24>
 8003412:	6818      	ldr	r0, [r3, #0]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	1841      	adds	r1, r0, r1
 8003418:	6011      	str	r1, [r2, #0]
 800341a:	6053      	str	r3, [r2, #4]
 800341c:	e7da      	b.n	80033d4 <_free_r+0x24>
 800341e:	42a0      	cmp	r0, r4
 8003420:	d902      	bls.n	8003428 <_free_r+0x78>
 8003422:	230c      	movs	r3, #12
 8003424:	602b      	str	r3, [r5, #0]
 8003426:	e7d5      	b.n	80033d4 <_free_r+0x24>
 8003428:	6820      	ldr	r0, [r4, #0]
 800342a:	1821      	adds	r1, r4, r0
 800342c:	428b      	cmp	r3, r1
 800342e:	d103      	bne.n	8003438 <_free_r+0x88>
 8003430:	6819      	ldr	r1, [r3, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	1809      	adds	r1, r1, r0
 8003436:	6021      	str	r1, [r4, #0]
 8003438:	6063      	str	r3, [r4, #4]
 800343a:	6054      	str	r4, [r2, #4]
 800343c:	e7ca      	b.n	80033d4 <_free_r+0x24>
 800343e:	46c0      	nop			@ (mov r8, r8)
 8003440:	20000654 	.word	0x20000654

08003444 <__ssputs_r>:
 8003444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003446:	688e      	ldr	r6, [r1, #8]
 8003448:	b085      	sub	sp, #20
 800344a:	001f      	movs	r7, r3
 800344c:	000c      	movs	r4, r1
 800344e:	680b      	ldr	r3, [r1, #0]
 8003450:	9002      	str	r0, [sp, #8]
 8003452:	9203      	str	r2, [sp, #12]
 8003454:	42be      	cmp	r6, r7
 8003456:	d830      	bhi.n	80034ba <__ssputs_r+0x76>
 8003458:	210c      	movs	r1, #12
 800345a:	5e62      	ldrsh	r2, [r4, r1]
 800345c:	2190      	movs	r1, #144	@ 0x90
 800345e:	00c9      	lsls	r1, r1, #3
 8003460:	420a      	tst	r2, r1
 8003462:	d028      	beq.n	80034b6 <__ssputs_r+0x72>
 8003464:	2003      	movs	r0, #3
 8003466:	6921      	ldr	r1, [r4, #16]
 8003468:	1a5b      	subs	r3, r3, r1
 800346a:	9301      	str	r3, [sp, #4]
 800346c:	6963      	ldr	r3, [r4, #20]
 800346e:	4343      	muls	r3, r0
 8003470:	9801      	ldr	r0, [sp, #4]
 8003472:	0fdd      	lsrs	r5, r3, #31
 8003474:	18ed      	adds	r5, r5, r3
 8003476:	1c7b      	adds	r3, r7, #1
 8003478:	181b      	adds	r3, r3, r0
 800347a:	106d      	asrs	r5, r5, #1
 800347c:	42ab      	cmp	r3, r5
 800347e:	d900      	bls.n	8003482 <__ssputs_r+0x3e>
 8003480:	001d      	movs	r5, r3
 8003482:	0552      	lsls	r2, r2, #21
 8003484:	d528      	bpl.n	80034d8 <__ssputs_r+0x94>
 8003486:	0029      	movs	r1, r5
 8003488:	9802      	ldr	r0, [sp, #8]
 800348a:	f7ff fe47 	bl	800311c <_malloc_r>
 800348e:	1e06      	subs	r6, r0, #0
 8003490:	d02c      	beq.n	80034ec <__ssputs_r+0xa8>
 8003492:	9a01      	ldr	r2, [sp, #4]
 8003494:	6921      	ldr	r1, [r4, #16]
 8003496:	f7ff ff81 	bl	800339c <memcpy>
 800349a:	89a2      	ldrh	r2, [r4, #12]
 800349c:	4b18      	ldr	r3, [pc, #96]	@ (8003500 <__ssputs_r+0xbc>)
 800349e:	401a      	ands	r2, r3
 80034a0:	2380      	movs	r3, #128	@ 0x80
 80034a2:	4313      	orrs	r3, r2
 80034a4:	81a3      	strh	r3, [r4, #12]
 80034a6:	9b01      	ldr	r3, [sp, #4]
 80034a8:	6126      	str	r6, [r4, #16]
 80034aa:	18f6      	adds	r6, r6, r3
 80034ac:	6026      	str	r6, [r4, #0]
 80034ae:	003e      	movs	r6, r7
 80034b0:	6165      	str	r5, [r4, #20]
 80034b2:	1aed      	subs	r5, r5, r3
 80034b4:	60a5      	str	r5, [r4, #8]
 80034b6:	42be      	cmp	r6, r7
 80034b8:	d900      	bls.n	80034bc <__ssputs_r+0x78>
 80034ba:	003e      	movs	r6, r7
 80034bc:	0032      	movs	r2, r6
 80034be:	9903      	ldr	r1, [sp, #12]
 80034c0:	6820      	ldr	r0, [r4, #0]
 80034c2:	f000 fa9b 	bl	80039fc <memmove>
 80034c6:	2000      	movs	r0, #0
 80034c8:	68a3      	ldr	r3, [r4, #8]
 80034ca:	1b9b      	subs	r3, r3, r6
 80034cc:	60a3      	str	r3, [r4, #8]
 80034ce:	6823      	ldr	r3, [r4, #0]
 80034d0:	199b      	adds	r3, r3, r6
 80034d2:	6023      	str	r3, [r4, #0]
 80034d4:	b005      	add	sp, #20
 80034d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034d8:	002a      	movs	r2, r5
 80034da:	9802      	ldr	r0, [sp, #8]
 80034dc:	f000 faac 	bl	8003a38 <_realloc_r>
 80034e0:	1e06      	subs	r6, r0, #0
 80034e2:	d1e0      	bne.n	80034a6 <__ssputs_r+0x62>
 80034e4:	6921      	ldr	r1, [r4, #16]
 80034e6:	9802      	ldr	r0, [sp, #8]
 80034e8:	f7ff ff62 	bl	80033b0 <_free_r>
 80034ec:	230c      	movs	r3, #12
 80034ee:	2001      	movs	r0, #1
 80034f0:	9a02      	ldr	r2, [sp, #8]
 80034f2:	4240      	negs	r0, r0
 80034f4:	6013      	str	r3, [r2, #0]
 80034f6:	89a2      	ldrh	r2, [r4, #12]
 80034f8:	3334      	adds	r3, #52	@ 0x34
 80034fa:	4313      	orrs	r3, r2
 80034fc:	81a3      	strh	r3, [r4, #12]
 80034fe:	e7e9      	b.n	80034d4 <__ssputs_r+0x90>
 8003500:	fffffb7f 	.word	0xfffffb7f

08003504 <_svfiprintf_r>:
 8003504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003506:	b0a1      	sub	sp, #132	@ 0x84
 8003508:	9003      	str	r0, [sp, #12]
 800350a:	001d      	movs	r5, r3
 800350c:	898b      	ldrh	r3, [r1, #12]
 800350e:	000f      	movs	r7, r1
 8003510:	0016      	movs	r6, r2
 8003512:	061b      	lsls	r3, r3, #24
 8003514:	d511      	bpl.n	800353a <_svfiprintf_r+0x36>
 8003516:	690b      	ldr	r3, [r1, #16]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d10e      	bne.n	800353a <_svfiprintf_r+0x36>
 800351c:	2140      	movs	r1, #64	@ 0x40
 800351e:	f7ff fdfd 	bl	800311c <_malloc_r>
 8003522:	6038      	str	r0, [r7, #0]
 8003524:	6138      	str	r0, [r7, #16]
 8003526:	2800      	cmp	r0, #0
 8003528:	d105      	bne.n	8003536 <_svfiprintf_r+0x32>
 800352a:	230c      	movs	r3, #12
 800352c:	9a03      	ldr	r2, [sp, #12]
 800352e:	6013      	str	r3, [r2, #0]
 8003530:	2001      	movs	r0, #1
 8003532:	4240      	negs	r0, r0
 8003534:	e0cf      	b.n	80036d6 <_svfiprintf_r+0x1d2>
 8003536:	2340      	movs	r3, #64	@ 0x40
 8003538:	617b      	str	r3, [r7, #20]
 800353a:	2300      	movs	r3, #0
 800353c:	ac08      	add	r4, sp, #32
 800353e:	6163      	str	r3, [r4, #20]
 8003540:	3320      	adds	r3, #32
 8003542:	7663      	strb	r3, [r4, #25]
 8003544:	3310      	adds	r3, #16
 8003546:	76a3      	strb	r3, [r4, #26]
 8003548:	9507      	str	r5, [sp, #28]
 800354a:	0035      	movs	r5, r6
 800354c:	782b      	ldrb	r3, [r5, #0]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d001      	beq.n	8003556 <_svfiprintf_r+0x52>
 8003552:	2b25      	cmp	r3, #37	@ 0x25
 8003554:	d148      	bne.n	80035e8 <_svfiprintf_r+0xe4>
 8003556:	1bab      	subs	r3, r5, r6
 8003558:	9305      	str	r3, [sp, #20]
 800355a:	42b5      	cmp	r5, r6
 800355c:	d00b      	beq.n	8003576 <_svfiprintf_r+0x72>
 800355e:	0032      	movs	r2, r6
 8003560:	0039      	movs	r1, r7
 8003562:	9803      	ldr	r0, [sp, #12]
 8003564:	f7ff ff6e 	bl	8003444 <__ssputs_r>
 8003568:	3001      	adds	r0, #1
 800356a:	d100      	bne.n	800356e <_svfiprintf_r+0x6a>
 800356c:	e0ae      	b.n	80036cc <_svfiprintf_r+0x1c8>
 800356e:	6963      	ldr	r3, [r4, #20]
 8003570:	9a05      	ldr	r2, [sp, #20]
 8003572:	189b      	adds	r3, r3, r2
 8003574:	6163      	str	r3, [r4, #20]
 8003576:	782b      	ldrb	r3, [r5, #0]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d100      	bne.n	800357e <_svfiprintf_r+0x7a>
 800357c:	e0a6      	b.n	80036cc <_svfiprintf_r+0x1c8>
 800357e:	2201      	movs	r2, #1
 8003580:	2300      	movs	r3, #0
 8003582:	4252      	negs	r2, r2
 8003584:	6062      	str	r2, [r4, #4]
 8003586:	a904      	add	r1, sp, #16
 8003588:	3254      	adds	r2, #84	@ 0x54
 800358a:	1852      	adds	r2, r2, r1
 800358c:	1c6e      	adds	r6, r5, #1
 800358e:	6023      	str	r3, [r4, #0]
 8003590:	60e3      	str	r3, [r4, #12]
 8003592:	60a3      	str	r3, [r4, #8]
 8003594:	7013      	strb	r3, [r2, #0]
 8003596:	65a3      	str	r3, [r4, #88]	@ 0x58
 8003598:	4b54      	ldr	r3, [pc, #336]	@ (80036ec <_svfiprintf_r+0x1e8>)
 800359a:	2205      	movs	r2, #5
 800359c:	0018      	movs	r0, r3
 800359e:	7831      	ldrb	r1, [r6, #0]
 80035a0:	9305      	str	r3, [sp, #20]
 80035a2:	f000 fa3e 	bl	8003a22 <memchr>
 80035a6:	1c75      	adds	r5, r6, #1
 80035a8:	2800      	cmp	r0, #0
 80035aa:	d11f      	bne.n	80035ec <_svfiprintf_r+0xe8>
 80035ac:	6822      	ldr	r2, [r4, #0]
 80035ae:	06d3      	lsls	r3, r2, #27
 80035b0:	d504      	bpl.n	80035bc <_svfiprintf_r+0xb8>
 80035b2:	2353      	movs	r3, #83	@ 0x53
 80035b4:	a904      	add	r1, sp, #16
 80035b6:	185b      	adds	r3, r3, r1
 80035b8:	2120      	movs	r1, #32
 80035ba:	7019      	strb	r1, [r3, #0]
 80035bc:	0713      	lsls	r3, r2, #28
 80035be:	d504      	bpl.n	80035ca <_svfiprintf_r+0xc6>
 80035c0:	2353      	movs	r3, #83	@ 0x53
 80035c2:	a904      	add	r1, sp, #16
 80035c4:	185b      	adds	r3, r3, r1
 80035c6:	212b      	movs	r1, #43	@ 0x2b
 80035c8:	7019      	strb	r1, [r3, #0]
 80035ca:	7833      	ldrb	r3, [r6, #0]
 80035cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80035ce:	d016      	beq.n	80035fe <_svfiprintf_r+0xfa>
 80035d0:	0035      	movs	r5, r6
 80035d2:	2100      	movs	r1, #0
 80035d4:	200a      	movs	r0, #10
 80035d6:	68e3      	ldr	r3, [r4, #12]
 80035d8:	782a      	ldrb	r2, [r5, #0]
 80035da:	1c6e      	adds	r6, r5, #1
 80035dc:	3a30      	subs	r2, #48	@ 0x30
 80035de:	2a09      	cmp	r2, #9
 80035e0:	d950      	bls.n	8003684 <_svfiprintf_r+0x180>
 80035e2:	2900      	cmp	r1, #0
 80035e4:	d111      	bne.n	800360a <_svfiprintf_r+0x106>
 80035e6:	e017      	b.n	8003618 <_svfiprintf_r+0x114>
 80035e8:	3501      	adds	r5, #1
 80035ea:	e7af      	b.n	800354c <_svfiprintf_r+0x48>
 80035ec:	9b05      	ldr	r3, [sp, #20]
 80035ee:	6822      	ldr	r2, [r4, #0]
 80035f0:	1ac0      	subs	r0, r0, r3
 80035f2:	2301      	movs	r3, #1
 80035f4:	4083      	lsls	r3, r0
 80035f6:	4313      	orrs	r3, r2
 80035f8:	002e      	movs	r6, r5
 80035fa:	6023      	str	r3, [r4, #0]
 80035fc:	e7cc      	b.n	8003598 <_svfiprintf_r+0x94>
 80035fe:	9b07      	ldr	r3, [sp, #28]
 8003600:	1d19      	adds	r1, r3, #4
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	9107      	str	r1, [sp, #28]
 8003606:	2b00      	cmp	r3, #0
 8003608:	db01      	blt.n	800360e <_svfiprintf_r+0x10a>
 800360a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800360c:	e004      	b.n	8003618 <_svfiprintf_r+0x114>
 800360e:	425b      	negs	r3, r3
 8003610:	60e3      	str	r3, [r4, #12]
 8003612:	2302      	movs	r3, #2
 8003614:	4313      	orrs	r3, r2
 8003616:	6023      	str	r3, [r4, #0]
 8003618:	782b      	ldrb	r3, [r5, #0]
 800361a:	2b2e      	cmp	r3, #46	@ 0x2e
 800361c:	d10c      	bne.n	8003638 <_svfiprintf_r+0x134>
 800361e:	786b      	ldrb	r3, [r5, #1]
 8003620:	2b2a      	cmp	r3, #42	@ 0x2a
 8003622:	d134      	bne.n	800368e <_svfiprintf_r+0x18a>
 8003624:	9b07      	ldr	r3, [sp, #28]
 8003626:	3502      	adds	r5, #2
 8003628:	1d1a      	adds	r2, r3, #4
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	9207      	str	r2, [sp, #28]
 800362e:	2b00      	cmp	r3, #0
 8003630:	da01      	bge.n	8003636 <_svfiprintf_r+0x132>
 8003632:	2301      	movs	r3, #1
 8003634:	425b      	negs	r3, r3
 8003636:	9309      	str	r3, [sp, #36]	@ 0x24
 8003638:	4e2d      	ldr	r6, [pc, #180]	@ (80036f0 <_svfiprintf_r+0x1ec>)
 800363a:	2203      	movs	r2, #3
 800363c:	0030      	movs	r0, r6
 800363e:	7829      	ldrb	r1, [r5, #0]
 8003640:	f000 f9ef 	bl	8003a22 <memchr>
 8003644:	2800      	cmp	r0, #0
 8003646:	d006      	beq.n	8003656 <_svfiprintf_r+0x152>
 8003648:	2340      	movs	r3, #64	@ 0x40
 800364a:	1b80      	subs	r0, r0, r6
 800364c:	4083      	lsls	r3, r0
 800364e:	6822      	ldr	r2, [r4, #0]
 8003650:	3501      	adds	r5, #1
 8003652:	4313      	orrs	r3, r2
 8003654:	6023      	str	r3, [r4, #0]
 8003656:	7829      	ldrb	r1, [r5, #0]
 8003658:	2206      	movs	r2, #6
 800365a:	4826      	ldr	r0, [pc, #152]	@ (80036f4 <_svfiprintf_r+0x1f0>)
 800365c:	1c6e      	adds	r6, r5, #1
 800365e:	7621      	strb	r1, [r4, #24]
 8003660:	f000 f9df 	bl	8003a22 <memchr>
 8003664:	2800      	cmp	r0, #0
 8003666:	d038      	beq.n	80036da <_svfiprintf_r+0x1d6>
 8003668:	4b23      	ldr	r3, [pc, #140]	@ (80036f8 <_svfiprintf_r+0x1f4>)
 800366a:	2b00      	cmp	r3, #0
 800366c:	d122      	bne.n	80036b4 <_svfiprintf_r+0x1b0>
 800366e:	2207      	movs	r2, #7
 8003670:	9b07      	ldr	r3, [sp, #28]
 8003672:	3307      	adds	r3, #7
 8003674:	4393      	bics	r3, r2
 8003676:	3308      	adds	r3, #8
 8003678:	9307      	str	r3, [sp, #28]
 800367a:	6963      	ldr	r3, [r4, #20]
 800367c:	9a04      	ldr	r2, [sp, #16]
 800367e:	189b      	adds	r3, r3, r2
 8003680:	6163      	str	r3, [r4, #20]
 8003682:	e762      	b.n	800354a <_svfiprintf_r+0x46>
 8003684:	4343      	muls	r3, r0
 8003686:	0035      	movs	r5, r6
 8003688:	2101      	movs	r1, #1
 800368a:	189b      	adds	r3, r3, r2
 800368c:	e7a4      	b.n	80035d8 <_svfiprintf_r+0xd4>
 800368e:	2300      	movs	r3, #0
 8003690:	200a      	movs	r0, #10
 8003692:	0019      	movs	r1, r3
 8003694:	3501      	adds	r5, #1
 8003696:	6063      	str	r3, [r4, #4]
 8003698:	782a      	ldrb	r2, [r5, #0]
 800369a:	1c6e      	adds	r6, r5, #1
 800369c:	3a30      	subs	r2, #48	@ 0x30
 800369e:	2a09      	cmp	r2, #9
 80036a0:	d903      	bls.n	80036aa <_svfiprintf_r+0x1a6>
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d0c8      	beq.n	8003638 <_svfiprintf_r+0x134>
 80036a6:	9109      	str	r1, [sp, #36]	@ 0x24
 80036a8:	e7c6      	b.n	8003638 <_svfiprintf_r+0x134>
 80036aa:	4341      	muls	r1, r0
 80036ac:	0035      	movs	r5, r6
 80036ae:	2301      	movs	r3, #1
 80036b0:	1889      	adds	r1, r1, r2
 80036b2:	e7f1      	b.n	8003698 <_svfiprintf_r+0x194>
 80036b4:	aa07      	add	r2, sp, #28
 80036b6:	9200      	str	r2, [sp, #0]
 80036b8:	0021      	movs	r1, r4
 80036ba:	003a      	movs	r2, r7
 80036bc:	4b0f      	ldr	r3, [pc, #60]	@ (80036fc <_svfiprintf_r+0x1f8>)
 80036be:	9803      	ldr	r0, [sp, #12]
 80036c0:	e000      	b.n	80036c4 <_svfiprintf_r+0x1c0>
 80036c2:	bf00      	nop
 80036c4:	9004      	str	r0, [sp, #16]
 80036c6:	9b04      	ldr	r3, [sp, #16]
 80036c8:	3301      	adds	r3, #1
 80036ca:	d1d6      	bne.n	800367a <_svfiprintf_r+0x176>
 80036cc:	89bb      	ldrh	r3, [r7, #12]
 80036ce:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80036d0:	065b      	lsls	r3, r3, #25
 80036d2:	d500      	bpl.n	80036d6 <_svfiprintf_r+0x1d2>
 80036d4:	e72c      	b.n	8003530 <_svfiprintf_r+0x2c>
 80036d6:	b021      	add	sp, #132	@ 0x84
 80036d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036da:	aa07      	add	r2, sp, #28
 80036dc:	9200      	str	r2, [sp, #0]
 80036de:	0021      	movs	r1, r4
 80036e0:	003a      	movs	r2, r7
 80036e2:	4b06      	ldr	r3, [pc, #24]	@ (80036fc <_svfiprintf_r+0x1f8>)
 80036e4:	9803      	ldr	r0, [sp, #12]
 80036e6:	f000 f87b 	bl	80037e0 <_printf_i>
 80036ea:	e7eb      	b.n	80036c4 <_svfiprintf_r+0x1c0>
 80036ec:	080050e7 	.word	0x080050e7
 80036f0:	080050ed 	.word	0x080050ed
 80036f4:	080050f1 	.word	0x080050f1
 80036f8:	00000000 	.word	0x00000000
 80036fc:	08003445 	.word	0x08003445

08003700 <_printf_common>:
 8003700:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003702:	0016      	movs	r6, r2
 8003704:	9301      	str	r3, [sp, #4]
 8003706:	688a      	ldr	r2, [r1, #8]
 8003708:	690b      	ldr	r3, [r1, #16]
 800370a:	000c      	movs	r4, r1
 800370c:	9000      	str	r0, [sp, #0]
 800370e:	4293      	cmp	r3, r2
 8003710:	da00      	bge.n	8003714 <_printf_common+0x14>
 8003712:	0013      	movs	r3, r2
 8003714:	0022      	movs	r2, r4
 8003716:	6033      	str	r3, [r6, #0]
 8003718:	3243      	adds	r2, #67	@ 0x43
 800371a:	7812      	ldrb	r2, [r2, #0]
 800371c:	2a00      	cmp	r2, #0
 800371e:	d001      	beq.n	8003724 <_printf_common+0x24>
 8003720:	3301      	adds	r3, #1
 8003722:	6033      	str	r3, [r6, #0]
 8003724:	6823      	ldr	r3, [r4, #0]
 8003726:	069b      	lsls	r3, r3, #26
 8003728:	d502      	bpl.n	8003730 <_printf_common+0x30>
 800372a:	6833      	ldr	r3, [r6, #0]
 800372c:	3302      	adds	r3, #2
 800372e:	6033      	str	r3, [r6, #0]
 8003730:	6822      	ldr	r2, [r4, #0]
 8003732:	2306      	movs	r3, #6
 8003734:	0015      	movs	r5, r2
 8003736:	401d      	ands	r5, r3
 8003738:	421a      	tst	r2, r3
 800373a:	d027      	beq.n	800378c <_printf_common+0x8c>
 800373c:	0023      	movs	r3, r4
 800373e:	3343      	adds	r3, #67	@ 0x43
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	1e5a      	subs	r2, r3, #1
 8003744:	4193      	sbcs	r3, r2
 8003746:	6822      	ldr	r2, [r4, #0]
 8003748:	0692      	lsls	r2, r2, #26
 800374a:	d430      	bmi.n	80037ae <_printf_common+0xae>
 800374c:	0022      	movs	r2, r4
 800374e:	9901      	ldr	r1, [sp, #4]
 8003750:	9800      	ldr	r0, [sp, #0]
 8003752:	9d08      	ldr	r5, [sp, #32]
 8003754:	3243      	adds	r2, #67	@ 0x43
 8003756:	47a8      	blx	r5
 8003758:	3001      	adds	r0, #1
 800375a:	d025      	beq.n	80037a8 <_printf_common+0xa8>
 800375c:	2206      	movs	r2, #6
 800375e:	6823      	ldr	r3, [r4, #0]
 8003760:	2500      	movs	r5, #0
 8003762:	4013      	ands	r3, r2
 8003764:	2b04      	cmp	r3, #4
 8003766:	d105      	bne.n	8003774 <_printf_common+0x74>
 8003768:	6833      	ldr	r3, [r6, #0]
 800376a:	68e5      	ldr	r5, [r4, #12]
 800376c:	1aed      	subs	r5, r5, r3
 800376e:	43eb      	mvns	r3, r5
 8003770:	17db      	asrs	r3, r3, #31
 8003772:	401d      	ands	r5, r3
 8003774:	68a3      	ldr	r3, [r4, #8]
 8003776:	6922      	ldr	r2, [r4, #16]
 8003778:	4293      	cmp	r3, r2
 800377a:	dd01      	ble.n	8003780 <_printf_common+0x80>
 800377c:	1a9b      	subs	r3, r3, r2
 800377e:	18ed      	adds	r5, r5, r3
 8003780:	2600      	movs	r6, #0
 8003782:	42b5      	cmp	r5, r6
 8003784:	d120      	bne.n	80037c8 <_printf_common+0xc8>
 8003786:	2000      	movs	r0, #0
 8003788:	e010      	b.n	80037ac <_printf_common+0xac>
 800378a:	3501      	adds	r5, #1
 800378c:	68e3      	ldr	r3, [r4, #12]
 800378e:	6832      	ldr	r2, [r6, #0]
 8003790:	1a9b      	subs	r3, r3, r2
 8003792:	42ab      	cmp	r3, r5
 8003794:	ddd2      	ble.n	800373c <_printf_common+0x3c>
 8003796:	0022      	movs	r2, r4
 8003798:	2301      	movs	r3, #1
 800379a:	9901      	ldr	r1, [sp, #4]
 800379c:	9800      	ldr	r0, [sp, #0]
 800379e:	9f08      	ldr	r7, [sp, #32]
 80037a0:	3219      	adds	r2, #25
 80037a2:	47b8      	blx	r7
 80037a4:	3001      	adds	r0, #1
 80037a6:	d1f0      	bne.n	800378a <_printf_common+0x8a>
 80037a8:	2001      	movs	r0, #1
 80037aa:	4240      	negs	r0, r0
 80037ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80037ae:	2030      	movs	r0, #48	@ 0x30
 80037b0:	18e1      	adds	r1, r4, r3
 80037b2:	3143      	adds	r1, #67	@ 0x43
 80037b4:	7008      	strb	r0, [r1, #0]
 80037b6:	0021      	movs	r1, r4
 80037b8:	1c5a      	adds	r2, r3, #1
 80037ba:	3145      	adds	r1, #69	@ 0x45
 80037bc:	7809      	ldrb	r1, [r1, #0]
 80037be:	18a2      	adds	r2, r4, r2
 80037c0:	3243      	adds	r2, #67	@ 0x43
 80037c2:	3302      	adds	r3, #2
 80037c4:	7011      	strb	r1, [r2, #0]
 80037c6:	e7c1      	b.n	800374c <_printf_common+0x4c>
 80037c8:	0022      	movs	r2, r4
 80037ca:	2301      	movs	r3, #1
 80037cc:	9901      	ldr	r1, [sp, #4]
 80037ce:	9800      	ldr	r0, [sp, #0]
 80037d0:	9f08      	ldr	r7, [sp, #32]
 80037d2:	321a      	adds	r2, #26
 80037d4:	47b8      	blx	r7
 80037d6:	3001      	adds	r0, #1
 80037d8:	d0e6      	beq.n	80037a8 <_printf_common+0xa8>
 80037da:	3601      	adds	r6, #1
 80037dc:	e7d1      	b.n	8003782 <_printf_common+0x82>
	...

080037e0 <_printf_i>:
 80037e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037e2:	b08b      	sub	sp, #44	@ 0x2c
 80037e4:	9206      	str	r2, [sp, #24]
 80037e6:	000a      	movs	r2, r1
 80037e8:	3243      	adds	r2, #67	@ 0x43
 80037ea:	9307      	str	r3, [sp, #28]
 80037ec:	9005      	str	r0, [sp, #20]
 80037ee:	9203      	str	r2, [sp, #12]
 80037f0:	7e0a      	ldrb	r2, [r1, #24]
 80037f2:	000c      	movs	r4, r1
 80037f4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80037f6:	2a78      	cmp	r2, #120	@ 0x78
 80037f8:	d809      	bhi.n	800380e <_printf_i+0x2e>
 80037fa:	2a62      	cmp	r2, #98	@ 0x62
 80037fc:	d80b      	bhi.n	8003816 <_printf_i+0x36>
 80037fe:	2a00      	cmp	r2, #0
 8003800:	d100      	bne.n	8003804 <_printf_i+0x24>
 8003802:	e0bc      	b.n	800397e <_printf_i+0x19e>
 8003804:	497b      	ldr	r1, [pc, #492]	@ (80039f4 <_printf_i+0x214>)
 8003806:	9104      	str	r1, [sp, #16]
 8003808:	2a58      	cmp	r2, #88	@ 0x58
 800380a:	d100      	bne.n	800380e <_printf_i+0x2e>
 800380c:	e090      	b.n	8003930 <_printf_i+0x150>
 800380e:	0025      	movs	r5, r4
 8003810:	3542      	adds	r5, #66	@ 0x42
 8003812:	702a      	strb	r2, [r5, #0]
 8003814:	e022      	b.n	800385c <_printf_i+0x7c>
 8003816:	0010      	movs	r0, r2
 8003818:	3863      	subs	r0, #99	@ 0x63
 800381a:	2815      	cmp	r0, #21
 800381c:	d8f7      	bhi.n	800380e <_printf_i+0x2e>
 800381e:	f7fc fc77 	bl	8000110 <__gnu_thumb1_case_shi>
 8003822:	0016      	.short	0x0016
 8003824:	fff6001f 	.word	0xfff6001f
 8003828:	fff6fff6 	.word	0xfff6fff6
 800382c:	001ffff6 	.word	0x001ffff6
 8003830:	fff6fff6 	.word	0xfff6fff6
 8003834:	fff6fff6 	.word	0xfff6fff6
 8003838:	003600a1 	.word	0x003600a1
 800383c:	fff60080 	.word	0xfff60080
 8003840:	00b2fff6 	.word	0x00b2fff6
 8003844:	0036fff6 	.word	0x0036fff6
 8003848:	fff6fff6 	.word	0xfff6fff6
 800384c:	0084      	.short	0x0084
 800384e:	0025      	movs	r5, r4
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	3542      	adds	r5, #66	@ 0x42
 8003854:	1d11      	adds	r1, r2, #4
 8003856:	6019      	str	r1, [r3, #0]
 8003858:	6813      	ldr	r3, [r2, #0]
 800385a:	702b      	strb	r3, [r5, #0]
 800385c:	2301      	movs	r3, #1
 800385e:	e0a0      	b.n	80039a2 <_printf_i+0x1c2>
 8003860:	6818      	ldr	r0, [r3, #0]
 8003862:	6809      	ldr	r1, [r1, #0]
 8003864:	1d02      	adds	r2, r0, #4
 8003866:	060d      	lsls	r5, r1, #24
 8003868:	d50b      	bpl.n	8003882 <_printf_i+0xa2>
 800386a:	6806      	ldr	r6, [r0, #0]
 800386c:	601a      	str	r2, [r3, #0]
 800386e:	2e00      	cmp	r6, #0
 8003870:	da03      	bge.n	800387a <_printf_i+0x9a>
 8003872:	232d      	movs	r3, #45	@ 0x2d
 8003874:	9a03      	ldr	r2, [sp, #12]
 8003876:	4276      	negs	r6, r6
 8003878:	7013      	strb	r3, [r2, #0]
 800387a:	4b5e      	ldr	r3, [pc, #376]	@ (80039f4 <_printf_i+0x214>)
 800387c:	270a      	movs	r7, #10
 800387e:	9304      	str	r3, [sp, #16]
 8003880:	e018      	b.n	80038b4 <_printf_i+0xd4>
 8003882:	6806      	ldr	r6, [r0, #0]
 8003884:	601a      	str	r2, [r3, #0]
 8003886:	0649      	lsls	r1, r1, #25
 8003888:	d5f1      	bpl.n	800386e <_printf_i+0x8e>
 800388a:	b236      	sxth	r6, r6
 800388c:	e7ef      	b.n	800386e <_printf_i+0x8e>
 800388e:	6808      	ldr	r0, [r1, #0]
 8003890:	6819      	ldr	r1, [r3, #0]
 8003892:	c940      	ldmia	r1!, {r6}
 8003894:	0605      	lsls	r5, r0, #24
 8003896:	d402      	bmi.n	800389e <_printf_i+0xbe>
 8003898:	0640      	lsls	r0, r0, #25
 800389a:	d500      	bpl.n	800389e <_printf_i+0xbe>
 800389c:	b2b6      	uxth	r6, r6
 800389e:	6019      	str	r1, [r3, #0]
 80038a0:	4b54      	ldr	r3, [pc, #336]	@ (80039f4 <_printf_i+0x214>)
 80038a2:	270a      	movs	r7, #10
 80038a4:	9304      	str	r3, [sp, #16]
 80038a6:	2a6f      	cmp	r2, #111	@ 0x6f
 80038a8:	d100      	bne.n	80038ac <_printf_i+0xcc>
 80038aa:	3f02      	subs	r7, #2
 80038ac:	0023      	movs	r3, r4
 80038ae:	2200      	movs	r2, #0
 80038b0:	3343      	adds	r3, #67	@ 0x43
 80038b2:	701a      	strb	r2, [r3, #0]
 80038b4:	6863      	ldr	r3, [r4, #4]
 80038b6:	60a3      	str	r3, [r4, #8]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	db03      	blt.n	80038c4 <_printf_i+0xe4>
 80038bc:	2104      	movs	r1, #4
 80038be:	6822      	ldr	r2, [r4, #0]
 80038c0:	438a      	bics	r2, r1
 80038c2:	6022      	str	r2, [r4, #0]
 80038c4:	2e00      	cmp	r6, #0
 80038c6:	d102      	bne.n	80038ce <_printf_i+0xee>
 80038c8:	9d03      	ldr	r5, [sp, #12]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00c      	beq.n	80038e8 <_printf_i+0x108>
 80038ce:	9d03      	ldr	r5, [sp, #12]
 80038d0:	0030      	movs	r0, r6
 80038d2:	0039      	movs	r1, r7
 80038d4:	f7fc fcac 	bl	8000230 <__aeabi_uidivmod>
 80038d8:	9b04      	ldr	r3, [sp, #16]
 80038da:	3d01      	subs	r5, #1
 80038dc:	5c5b      	ldrb	r3, [r3, r1]
 80038de:	702b      	strb	r3, [r5, #0]
 80038e0:	0033      	movs	r3, r6
 80038e2:	0006      	movs	r6, r0
 80038e4:	429f      	cmp	r7, r3
 80038e6:	d9f3      	bls.n	80038d0 <_printf_i+0xf0>
 80038e8:	2f08      	cmp	r7, #8
 80038ea:	d109      	bne.n	8003900 <_printf_i+0x120>
 80038ec:	6823      	ldr	r3, [r4, #0]
 80038ee:	07db      	lsls	r3, r3, #31
 80038f0:	d506      	bpl.n	8003900 <_printf_i+0x120>
 80038f2:	6862      	ldr	r2, [r4, #4]
 80038f4:	6923      	ldr	r3, [r4, #16]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	dc02      	bgt.n	8003900 <_printf_i+0x120>
 80038fa:	2330      	movs	r3, #48	@ 0x30
 80038fc:	3d01      	subs	r5, #1
 80038fe:	702b      	strb	r3, [r5, #0]
 8003900:	9b03      	ldr	r3, [sp, #12]
 8003902:	1b5b      	subs	r3, r3, r5
 8003904:	6123      	str	r3, [r4, #16]
 8003906:	9b07      	ldr	r3, [sp, #28]
 8003908:	0021      	movs	r1, r4
 800390a:	9300      	str	r3, [sp, #0]
 800390c:	9805      	ldr	r0, [sp, #20]
 800390e:	9b06      	ldr	r3, [sp, #24]
 8003910:	aa09      	add	r2, sp, #36	@ 0x24
 8003912:	f7ff fef5 	bl	8003700 <_printf_common>
 8003916:	3001      	adds	r0, #1
 8003918:	d148      	bne.n	80039ac <_printf_i+0x1cc>
 800391a:	2001      	movs	r0, #1
 800391c:	4240      	negs	r0, r0
 800391e:	b00b      	add	sp, #44	@ 0x2c
 8003920:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003922:	2220      	movs	r2, #32
 8003924:	6809      	ldr	r1, [r1, #0]
 8003926:	430a      	orrs	r2, r1
 8003928:	6022      	str	r2, [r4, #0]
 800392a:	2278      	movs	r2, #120	@ 0x78
 800392c:	4932      	ldr	r1, [pc, #200]	@ (80039f8 <_printf_i+0x218>)
 800392e:	9104      	str	r1, [sp, #16]
 8003930:	0021      	movs	r1, r4
 8003932:	3145      	adds	r1, #69	@ 0x45
 8003934:	700a      	strb	r2, [r1, #0]
 8003936:	6819      	ldr	r1, [r3, #0]
 8003938:	6822      	ldr	r2, [r4, #0]
 800393a:	c940      	ldmia	r1!, {r6}
 800393c:	0610      	lsls	r0, r2, #24
 800393e:	d402      	bmi.n	8003946 <_printf_i+0x166>
 8003940:	0650      	lsls	r0, r2, #25
 8003942:	d500      	bpl.n	8003946 <_printf_i+0x166>
 8003944:	b2b6      	uxth	r6, r6
 8003946:	6019      	str	r1, [r3, #0]
 8003948:	07d3      	lsls	r3, r2, #31
 800394a:	d502      	bpl.n	8003952 <_printf_i+0x172>
 800394c:	2320      	movs	r3, #32
 800394e:	4313      	orrs	r3, r2
 8003950:	6023      	str	r3, [r4, #0]
 8003952:	2e00      	cmp	r6, #0
 8003954:	d001      	beq.n	800395a <_printf_i+0x17a>
 8003956:	2710      	movs	r7, #16
 8003958:	e7a8      	b.n	80038ac <_printf_i+0xcc>
 800395a:	2220      	movs	r2, #32
 800395c:	6823      	ldr	r3, [r4, #0]
 800395e:	4393      	bics	r3, r2
 8003960:	6023      	str	r3, [r4, #0]
 8003962:	e7f8      	b.n	8003956 <_printf_i+0x176>
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	680d      	ldr	r5, [r1, #0]
 8003968:	1d10      	adds	r0, r2, #4
 800396a:	6949      	ldr	r1, [r1, #20]
 800396c:	6018      	str	r0, [r3, #0]
 800396e:	6813      	ldr	r3, [r2, #0]
 8003970:	062e      	lsls	r6, r5, #24
 8003972:	d501      	bpl.n	8003978 <_printf_i+0x198>
 8003974:	6019      	str	r1, [r3, #0]
 8003976:	e002      	b.n	800397e <_printf_i+0x19e>
 8003978:	066d      	lsls	r5, r5, #25
 800397a:	d5fb      	bpl.n	8003974 <_printf_i+0x194>
 800397c:	8019      	strh	r1, [r3, #0]
 800397e:	2300      	movs	r3, #0
 8003980:	9d03      	ldr	r5, [sp, #12]
 8003982:	6123      	str	r3, [r4, #16]
 8003984:	e7bf      	b.n	8003906 <_printf_i+0x126>
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	1d11      	adds	r1, r2, #4
 800398a:	6019      	str	r1, [r3, #0]
 800398c:	6815      	ldr	r5, [r2, #0]
 800398e:	2100      	movs	r1, #0
 8003990:	0028      	movs	r0, r5
 8003992:	6862      	ldr	r2, [r4, #4]
 8003994:	f000 f845 	bl	8003a22 <memchr>
 8003998:	2800      	cmp	r0, #0
 800399a:	d001      	beq.n	80039a0 <_printf_i+0x1c0>
 800399c:	1b40      	subs	r0, r0, r5
 800399e:	6060      	str	r0, [r4, #4]
 80039a0:	6863      	ldr	r3, [r4, #4]
 80039a2:	6123      	str	r3, [r4, #16]
 80039a4:	2300      	movs	r3, #0
 80039a6:	9a03      	ldr	r2, [sp, #12]
 80039a8:	7013      	strb	r3, [r2, #0]
 80039aa:	e7ac      	b.n	8003906 <_printf_i+0x126>
 80039ac:	002a      	movs	r2, r5
 80039ae:	6923      	ldr	r3, [r4, #16]
 80039b0:	9906      	ldr	r1, [sp, #24]
 80039b2:	9805      	ldr	r0, [sp, #20]
 80039b4:	9d07      	ldr	r5, [sp, #28]
 80039b6:	47a8      	blx	r5
 80039b8:	3001      	adds	r0, #1
 80039ba:	d0ae      	beq.n	800391a <_printf_i+0x13a>
 80039bc:	6823      	ldr	r3, [r4, #0]
 80039be:	079b      	lsls	r3, r3, #30
 80039c0:	d415      	bmi.n	80039ee <_printf_i+0x20e>
 80039c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80039c4:	68e0      	ldr	r0, [r4, #12]
 80039c6:	4298      	cmp	r0, r3
 80039c8:	daa9      	bge.n	800391e <_printf_i+0x13e>
 80039ca:	0018      	movs	r0, r3
 80039cc:	e7a7      	b.n	800391e <_printf_i+0x13e>
 80039ce:	0022      	movs	r2, r4
 80039d0:	2301      	movs	r3, #1
 80039d2:	9906      	ldr	r1, [sp, #24]
 80039d4:	9805      	ldr	r0, [sp, #20]
 80039d6:	9e07      	ldr	r6, [sp, #28]
 80039d8:	3219      	adds	r2, #25
 80039da:	47b0      	blx	r6
 80039dc:	3001      	adds	r0, #1
 80039de:	d09c      	beq.n	800391a <_printf_i+0x13a>
 80039e0:	3501      	adds	r5, #1
 80039e2:	68e3      	ldr	r3, [r4, #12]
 80039e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80039e6:	1a9b      	subs	r3, r3, r2
 80039e8:	42ab      	cmp	r3, r5
 80039ea:	dcf0      	bgt.n	80039ce <_printf_i+0x1ee>
 80039ec:	e7e9      	b.n	80039c2 <_printf_i+0x1e2>
 80039ee:	2500      	movs	r5, #0
 80039f0:	e7f7      	b.n	80039e2 <_printf_i+0x202>
 80039f2:	46c0      	nop			@ (mov r8, r8)
 80039f4:	080050f8 	.word	0x080050f8
 80039f8:	08005109 	.word	0x08005109

080039fc <memmove>:
 80039fc:	b510      	push	{r4, lr}
 80039fe:	4288      	cmp	r0, r1
 8003a00:	d806      	bhi.n	8003a10 <memmove+0x14>
 8003a02:	2300      	movs	r3, #0
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d008      	beq.n	8003a1a <memmove+0x1e>
 8003a08:	5ccc      	ldrb	r4, [r1, r3]
 8003a0a:	54c4      	strb	r4, [r0, r3]
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	e7f9      	b.n	8003a04 <memmove+0x8>
 8003a10:	188b      	adds	r3, r1, r2
 8003a12:	4298      	cmp	r0, r3
 8003a14:	d2f5      	bcs.n	8003a02 <memmove+0x6>
 8003a16:	3a01      	subs	r2, #1
 8003a18:	d200      	bcs.n	8003a1c <memmove+0x20>
 8003a1a:	bd10      	pop	{r4, pc}
 8003a1c:	5c8b      	ldrb	r3, [r1, r2]
 8003a1e:	5483      	strb	r3, [r0, r2]
 8003a20:	e7f9      	b.n	8003a16 <memmove+0x1a>

08003a22 <memchr>:
 8003a22:	b2c9      	uxtb	r1, r1
 8003a24:	1882      	adds	r2, r0, r2
 8003a26:	4290      	cmp	r0, r2
 8003a28:	d101      	bne.n	8003a2e <memchr+0xc>
 8003a2a:	2000      	movs	r0, #0
 8003a2c:	4770      	bx	lr
 8003a2e:	7803      	ldrb	r3, [r0, #0]
 8003a30:	428b      	cmp	r3, r1
 8003a32:	d0fb      	beq.n	8003a2c <memchr+0xa>
 8003a34:	3001      	adds	r0, #1
 8003a36:	e7f6      	b.n	8003a26 <memchr+0x4>

08003a38 <_realloc_r>:
 8003a38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a3a:	0006      	movs	r6, r0
 8003a3c:	000c      	movs	r4, r1
 8003a3e:	0015      	movs	r5, r2
 8003a40:	2900      	cmp	r1, #0
 8003a42:	d105      	bne.n	8003a50 <_realloc_r+0x18>
 8003a44:	0011      	movs	r1, r2
 8003a46:	f7ff fb69 	bl	800311c <_malloc_r>
 8003a4a:	0004      	movs	r4, r0
 8003a4c:	0020      	movs	r0, r4
 8003a4e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003a50:	2a00      	cmp	r2, #0
 8003a52:	d103      	bne.n	8003a5c <_realloc_r+0x24>
 8003a54:	f7ff fcac 	bl	80033b0 <_free_r>
 8003a58:	2400      	movs	r4, #0
 8003a5a:	e7f7      	b.n	8003a4c <_realloc_r+0x14>
 8003a5c:	f000 f81b 	bl	8003a96 <_malloc_usable_size_r>
 8003a60:	0007      	movs	r7, r0
 8003a62:	4285      	cmp	r5, r0
 8003a64:	d802      	bhi.n	8003a6c <_realloc_r+0x34>
 8003a66:	0843      	lsrs	r3, r0, #1
 8003a68:	42ab      	cmp	r3, r5
 8003a6a:	d3ef      	bcc.n	8003a4c <_realloc_r+0x14>
 8003a6c:	0029      	movs	r1, r5
 8003a6e:	0030      	movs	r0, r6
 8003a70:	f7ff fb54 	bl	800311c <_malloc_r>
 8003a74:	9001      	str	r0, [sp, #4]
 8003a76:	2800      	cmp	r0, #0
 8003a78:	d0ee      	beq.n	8003a58 <_realloc_r+0x20>
 8003a7a:	002a      	movs	r2, r5
 8003a7c:	42bd      	cmp	r5, r7
 8003a7e:	d900      	bls.n	8003a82 <_realloc_r+0x4a>
 8003a80:	003a      	movs	r2, r7
 8003a82:	0021      	movs	r1, r4
 8003a84:	9801      	ldr	r0, [sp, #4]
 8003a86:	f7ff fc89 	bl	800339c <memcpy>
 8003a8a:	0021      	movs	r1, r4
 8003a8c:	0030      	movs	r0, r6
 8003a8e:	f7ff fc8f 	bl	80033b0 <_free_r>
 8003a92:	9c01      	ldr	r4, [sp, #4]
 8003a94:	e7da      	b.n	8003a4c <_realloc_r+0x14>

08003a96 <_malloc_usable_size_r>:
 8003a96:	1f0b      	subs	r3, r1, #4
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	1f18      	subs	r0, r3, #4
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	da01      	bge.n	8003aa4 <_malloc_usable_size_r+0xe>
 8003aa0:	580b      	ldr	r3, [r1, r0]
 8003aa2:	18c0      	adds	r0, r0, r3
 8003aa4:	4770      	bx	lr
	...

08003aa8 <_init>:
 8003aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aaa:	46c0      	nop			@ (mov r8, r8)
 8003aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003aae:	bc08      	pop	{r3}
 8003ab0:	469e      	mov	lr, r3
 8003ab2:	4770      	bx	lr

08003ab4 <_fini>:
 8003ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ab6:	46c0      	nop			@ (mov r8, r8)
 8003ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003aba:	bc08      	pop	{r3}
 8003abc:	469e      	mov	lr, r3
 8003abe:	4770      	bx	lr
